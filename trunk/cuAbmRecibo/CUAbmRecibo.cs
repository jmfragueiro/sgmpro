///////////////////////////////////////////////////////////
//  CUAbmRecibo.cs
//  Clase de implementación de CUAbmRecibo.
//  Generated by Fito
//  Created on:      08-abr-2009 11:32:54
//  Original author: Fito
///////////////////////////////////////////////////////////
using System;
using scioBaseLibrary;
using scioBaseLibrary.excepciones;
using scioBaseLibrary.helpers;
using scioControlLibrary;
using scioPersistentLibrary;
using scioToolLibrary;
using scioToolLibrary.enums;
using sgmpro.dominio.configuracion;

namespace cuAbmRecibo {
    /// <summary>
    /// Esta clase hereda de CUAbmGenerico y se encarga de gestionar la 
    /// ventana WinABMV junto con su panelABMV para la entidad Recibo.
    /// </summary>
    public class CUAbmRecibo : CUAbmGenerico<Recibo> {
        #region IControladorEditable Members
        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        public override PanelABMV<Recibo> crearPanelEdicion() {
            return new PanelAbmvRecibo(this);
        }

        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        public override void add(params object[] parametros) {
            if (parametros[0] is Pago)
                ObjetoEnEdicion = new Recibo {Pago = (Pago)parametros[0]};
            else
                throw new AppErrorException("ERROR-ADD-WITHOUT-MASTER", "PAGO");
        }

        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        public override void save(params object[] parametros) {
            bool grabo = false;
            if (ObjetoEnEdicion == null)
                return;

            // Si el recibo no tiene número, es un recibo nuevo.
            // En caso de que sea un Recibo Propio o algún otro
            // comprobante que sea autonumerado, genera el nro.
            // siguiente. Detecta que es autonumerado porque el
            // parámetro tipoRecibo tiene un valorlong > 0.
            try {
                Sistema.Controlador.logear("GENERICO", ENivelMensaje.INFORMACION, "Iniciando generacion de recibo: " + ObjetoEnEdicion.Tipo);
                long scn = Persistencia.Controlador.iniciarTransaccion();

                // Pregunta si es un comprobante autonumerado
                if (ObjetoEnEdicion.Tipo.Valorlong > 0) {
                    Sistema.Controlador.logear("GENERICO", ENivelMensaje.INFORMACION, "Generando nuevo numero de recibo...");
                    object[] resultado = Persistencia.EjecutarSqlOneRow(
                        String.Format(
                            "select par_valorlong from parametro with (HOLDLOCK,XLOCK) where par_clave = '{0}'",
                            ObjetoEnEdicion.Tipo.Clave),
                        Sistema.Controlador.CadenaConexion);
                    long nroRecibo = (long)resultado[0];
                    Sistema.Controlador.logear("GENERICO", ENivelMensaje.INFORMACION, "Numero de recibo actual: " + nroRecibo);
                    nroRecibo += 1;
                    ObjetoEnEdicion.Numero = nroRecibo.ToString();
                    ObjetoEnEdicion.Tipo.Valorlong = nroRecibo;
                    Sistema.Controlador.logear("GENERICO", ENivelMensaje.INFORMACION, "Numero de recibo asignado: " + nroRecibo);
                } else {
                    Sistema.Controlador.logear("GENERICO", ENivelMensaje.INFORMACION, "El tipo de recibo es NO Numerado...");
                }

                // Graba el nuevo recibo
                ObjetoEnEdicion.save();

                // Graba la vinculacion del recibo al pago correspondiente
                ObjetoEnEdicion.Pago.Recibos.Add(ObjetoEnEdicion);
                ObjetoEnEdicion.Pago.save();

                // Guarda el ultimo nro de recibo generado en el parametro
                ObjetoEnEdicion.Tipo.save();
                Persistencia.Controlador.commitTransaccion(scn);
                grabo = true;
            } catch (Exception e) {
                Persistencia.Controlador.rollbackTransaccion();
                Sistema.Controlador.logear("DATA-SAVENOK", ENivelMensaje.ERROR, e.ToString());
            }

            if (grabo && ObjetoEnEdicion.Tipo.Valorbool)
                try {
                    Sistema.Controlador.logear("GENERICO", ENivelMensaje.INFORMACION, "Imprimendo nuevo recibo...");
                    CUCaller.CallCU("cuGenerarInformes.CUGenerarRecibo", this, ObjetoEnEdicion);
                } catch (Exception e) {
                    Sistema.Controlador.logear("ERROR-IMPRIMIR-RECIBO", ENivelMensaje.ERROR, e.ToString());
                }
            Sistema.Controlador.logear("GENERICO", ENivelMensaje.INFORMACION, "Generacion de recibo finalizada.");
        }

        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        public override void verify(params object[] parametros) {
            if (!ObjetoEnEdicion.Tipo.Nombre.Equals("NINGUNO") 
                && string.IsNullOrEmpty(ObjetoEnEdicion.Numero) 
                && ObjetoEnEdicion.Tipo.Valorlong < 1)
                throw new DataErrorException("CAMPO-NOK", Mensaje.TextoValidacion("RECIBO-NUMERO"));
        }
        #endregion
    }
}