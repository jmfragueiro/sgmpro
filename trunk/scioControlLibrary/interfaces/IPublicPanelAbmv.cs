///////////////////////////////////////////////////////////
//  IPublicPanelAbmv.cs
//  Implementation of the Interface IPublicPanelAbmv
//  Generated by Enterprise Architect
//  Created on:      15-Abr-2009 07:11:10 p.m.
//  Original author: Fernando
///////////////////////////////////////////////////////////
using System.Windows.Forms;

namespace scioControlLibrary.interfaces {
    /// <summary>
    /// Interfase que representa el comportamiento público generico deseable 
    /// de una clase que implementa un panel para la edición ABMV (agregar, 
    /// borrar, modificar, ver) de una entidad del sistema.
    /// </summary>
    public interface IPublicPanelAbmv {
        /// <summary>
        /// Este método se debe encargar de cargar los controles comunes 
        /// necesarios para dejar al panel presentable y que dependen de
        /// parametros de la base de datos del sistema (como combos tipo
        /// 'EstadoCivil').Se recomienda que en los combos se establezca
        /// desde aqui el valor seleccionado, según el valor que posee el
        /// objeto con el que se está trabajando. Debería lanzarse una 
        /// VistaErrorException si hay algún problema.
        /// </summary>
        void cargarControles();

        /// <summary>
        /// Este método se debe encargar de cargar en el panel los datos
        /// propios del objeto con el que se está trabajando. Estos son
        /// los controles de texto y checkboxes, etc. Los combos deberían
        /// quedar seleccionados desde el método 'cargarControles()'. Se
        /// debería lanzar una VistaErrorExcetion si hay algún problema.
        /// </summary>
        void cargarDatos();

        /// <summary>
        /// Este método se debe encargar de cargar en el panel los tabs
        /// de listados con información asociada al objeto con el que se 
        /// está trabajando. Se debería lanzar una VistaErrorExcetion si 
        /// hay algún problema.
        /// </summary>
        void cargarTabs();

        /// <summary>
        /// Este método se debe encargar de verificar los datos ingresados
        /// o editados en el panel, antes de guardarlos, para asegurar su 
        /// validez. Debería lanzar una AppErrorExcetion si hay problema o 
        /// si algún dato no pasa la validación. No lanza nada si hay algun
        /// problema porque se lo deja a la funcion de verify() de interfaz
        /// IControladorEditable (a quien debería llamar).
        /// </summary>
        void validarDatos();

        /// <summary>
        /// Este método se debe encargar de verificar si se han modificado
        /// datos en el panel respecto de los datos guardarlos en el objeto. 
        /// Debería lanzar una VistaErrorExcetion si hay problema.
        /// </summary>
        /// <returns>
        /// Retorna 'true' si se han modificado datos, o si no 'false'.
        /// </returns>
        bool isDirty();

        /// <summary>
        /// Este método se debe encargar de pasar los datos del panel al 
        /// objeto con el que se está trabajando. Se debería lanzar una 
        /// VistaErrorExcetion si hay problema.
        /// </summary>
        void actualizarObjeto();

        /// <summary>
        /// Este método debe encargarse de rearmar y verificar el
        /// objeto con el que se trabaja en el panel. Para ello se
        /// deben primero validar los datos ingresados/editados y 
        /// si está ok se cargas los datos en el objeto. 
        /// </summary>
        /// <returns>
        /// El objeto armado con los datos del panel.
        /// </returns>
        void refrescarDatos();

        /// <summary>
        /// Este método es el encargado de colocar a todos los
        /// compenentes en modo solo lectura, evitando modificar
        /// sus datos. Algo que se puede poner ReadOnly debe
        /// tener un nombre de control que comienza con 'ctrl'.
        /// Debería lanzar una VistaErrorException si hay problemas.
        /// </summary>
        void setNoEditable();

        /// <summary>
        /// Este método debe encargarse de colocar todos los controles
        /// en modo de edición, permitiendo así modificar sus datos. 
        /// CONVENCION: algo que se puede poner Editable debe tener un 
        /// nombre de control que comienza con 'ctrl'. Debería lanzar
        /// VistaErrorExcetion si hay algún problema.
        /// </summary>
        void setEditable();

        /// <summary>
        /// Este método debe encargarse de colocar a todos los
        /// componentes en blanco ó en su estado inicial. Esto
        /// permite iniciar desde cero una modificación de datos.
        /// Debería lanzar VistaErrorExcetion si hay un problema.
        /// </summary>
        void setClear();

        /// <summary>
        /// Este método es el encargado de devolver el componente
        /// visula padre del panel (el Parent), el que normalmente
        /// es un IPublicWinAbmv u otro contenedor.
        /// </summary>
        ContainerControl getParent();
    }
}