///////////////////////////////////////////////////////////
//  IControladorTree.cs
//  Implementation of the Interface IControladorTree
//  Generated by Enterprise Architect
//  Created on:      15-Abr-2009 07:11:10 p.m.
//  Original author: Fito
///////////////////////////////////////////////////////////
using System.Drawing;
using System.Windows.Forms;
using scioControlLibrary.enums;

namespace scioControlLibrary.interfaces {
    /// <summary>
    /// Interfase que representa el comportamiento deseable de una clase
    /// que gestiona y controla un árbol de opciones del sistema y que 
    /// permite la interacción con una clase que IControladorListable,
    /// que permite la edición ABMV en una entidad del sistema.
    /// </summary>
    public interface IControladorTree {
        /// <summary>
        /// Este método debería devolver el árbol completo armado.
        /// Debería lanzar una VistaErrorException si hay problemas.
        /// </summary>
        /// <returns>
        /// El árbol completo armado.
        /// </returns>
        TreeNode getTree();

        /// <summary>
        /// Este método debería devolver la lista de imágenes que se
        /// debe utilizar para trabajar con las opciones del árbol.
        /// Debería lanzar una VistaErrorException si hay problemas.
        /// </summary>
        /// <returns>
        /// La lista de imágenes necesaria para el árbol completo.
        /// </returns>
        ImageList getImagenesTree();

        /// <summary>
        /// Este método debería devolver el indice de la imagen para 
        /// cuando un nodo se encuentra seleccionado (vía doble-click).
        /// Debería lanzar una VistaErrorException si hay problemas.
        /// </summary>
        /// <returns>
        /// La lista de imágenes necesaria para el árbol completo.
        /// </returns>
        int getImagenSeleccionado();

        /// <summary>
        /// Este método se utiliza para que el Tree sepa de qué
        /// modo tiene que abrir la ventana que abre al manejar
        /// un doble-click sobre un nodo del mismo.
        /// </summary>        
        /// <param name="nodo">
        /// El Nodo que está apunto de ejecutarse.
        /// </param> 
        /// <returns>
        /// El Modo en que debe abrirse las ventanas asociadas a
        /// los nodos del tree.
        /// </returns>
        EModoVentana getModoVista(TreeNode nodo);

        /// <summary>
        /// Este método debería cargar el árbol en un control treeview
        /// que debe ser pasado aquí como argumento de la llamada.
        /// Debería lanzar una VistaErrorException si hay problemas.
        /// </summary>
        /// <returns>
        /// La lista de imágenes necesaria para el árbol completo.
        /// </returns>
        void cargarTree(TreeView vista);

        /// <summary>
        /// Este método se lanza antes de ejecutar efectivamente un 
        /// nodo y sirve para que el controlador sepa que se esta
        /// iniciando uno (el que se pasa como argumento al mismo).
        /// Debería lanzar una VistaErrorException si hay problemas.
        /// </summary>
        /// <param name="nodo">
        /// El Nodo que está apunto de ejecutarse.
        /// </param>
        void alEjecutarNodo(TreeNode nodo);

        /// <summary>
        /// Este método se lanza luego de ejecutar efectivamente una 
        /// actualización de listado y sirve para que el controlador 
        /// sepa que se ha actualizado el mismo. Debería lanzar una 
        /// VistaErrorException si hay problemas.
        /// </summary>
        /// <param name="nodo">
        /// El nodo del árbol que está actualmente seleccionado.
        /// </param>
        void alActualizarListado(TreeNode nodo);

        /// <summary>
        /// Este método debería devolver el titulo para la ventana que
        /// contiene al panel.
        /// </summary>
        /// <returns>
        /// Una cadena con el título de la ventana contenedora.
        /// </returns>
        string getTitulo();

        /// <summary>
        /// Este método debería devolver el icono para la ventana que
        /// contiene al panel.
        /// </summary>
        /// <returns>
        /// Un objeto que representa al icono para la ventana contenedora.
        /// </returns>
        Icon getIcono();
    }
}