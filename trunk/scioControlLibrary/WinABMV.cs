///////////////////////////////////////////////////////////
//  WinABMV.cs
//  Clase de ventana genérica para entidades del sistema.
//  Generated by Fito
//  Created on:      08-abr-2009 11:32:54
//  Original author: Fito
///////////////////////////////////////////////////////////
using System;
using System.Drawing;
using System.Windows.Forms;
using scioBaseLibrary;
using scioBaseLibrary.excepciones;
using scioControlLibrary.enums;
using scioControlLibrary.interfaces;
using scioPersistentLibrary.acceso;
using scioToolLibrary;
using scioToolLibrary.enums;

namespace scioControlLibrary {
    /// <summary>
    /// Esta clase implementa una ventana de ABMV generica para mostrar
    /// elementos de entidades que son editables desde el sistema, via
    /// paneles de datos (obtenidos como clase heredada de PanelABMV).
    /// </summary>
    public partial class WinABMV<T> : Form, IVistaContenedor where T : EntidadIdentificada<T> {
        private bool _isSaving;
        /// <summary>
        /// Controlador asociado que implementa la interfaz IControladorEditable
        /// </summary>
        protected readonly IControladorEditable<T> _controlador;
        /// <summary>
        /// El panel para la ventana, dentro del cual se interfasea con 
        /// el objeto que se estaría editando, viendo, cargando, etc.
        /// </summary>
        protected readonly IVistaPanelAbmv _panel;

        /// <summary>
        /// Constructor de la clase que asigna el controlador y el objeto
        /// destino de la ventana (para agregar, mostrar, editar o borrar), y
        /// luego inicializa los componentes visuales. Debería lanzar una
        /// VistaErrorException si hay algún problema (y mostrar el mismo).
        /// </summary>
        /// <param name="controlador">
        /// El objeto controlador de la ventana.
        /// </param>
        public WinABMV(IControladorEditable<T> controlador) {
            if (controlador == null)
                throw new VistaErrorException("VISTA-NOREADY");

            try {
                Sistema.Controlador.Winppal.setAyuda(Mensaje.TextoMensaje("UPDATE-DATAPANEL"));

                // Establece el controlador de la ventana
                GC.Collect();
                _controlador = controlador;

                // Establece la ventana de acuerdo a su diseño 
                // original y la actualiza según el panel recibido
                _panel = _controlador.getPanelEdicion();
                _panel.Contenedor = this;
                ((UserControl) _panel).Parent = this;

                // Inicializa todos los componentes internos
                InitializeComponent();

                // Establece el título y el icono de la aplicación
                Icon = _controlador.getIcono();
                Text = string.Format(
                    "{0} - {1}",
                    Mensaje.TextoMensaje("TITULO-SHOW"),
                    _controlador.getTitulo());

                // Crea, inicializa y asigna el panel interno
                _panelABMV = (UserControl) _panel;
                _panelABMV.Size = ((UserControl) _panel).Size;
                _panelABMV.Location = new Point(3, 40 + toolBar.Height);

                // Verifica el modo en que debe mostrarse inicalmente
                setModoVista();
            } catch (Exception e) {
                Sistema.Controlador.mostrar("VISTA-NOK", ENivelMensaje.ERROR, e.ToString(), false);
                throw new VistaErrorException("VISTA-NOK", e.ToString());
            } finally {
                Sistema.Controlador.Winppal.setAyuda(Mensaje.TextoMensaje("AYUDA-LISTO"));
            }
        }

        /// <summary>
        /// Este método devuelve el controlador asociado a la instancia.
        /// </summary>
        /// <returns>
        /// El controlador asociado a la ventana.
        /// </returns>
        public IControladorEditable<T> getControlador() {
            return _controlador;
        }

        /// <summary>
        /// Este método es el encargado de colocar a la ventana en 
        /// un modo de agregar un elemento, en donde solo se activan
        /// los botones de guardar, borrar y undo. También se solicita 
        /// al panel interno que sea editable.
        /// </summary>
        private void setAgregable() {
            try {
                _panel.setEditable();
                toolBar.Items["btnSave"].Visible = true;
                toolBar.Items["btnUndo"].Visible = true;
                toolBar.Items["btnDelete"].Visible = true;
            } catch (Exception e) {
                Sistema.Controlador.mostrar("VISTA-NOK", ENivelMensaje.ERROR, e.ToString(), false);
                throw new VistaErrorException("VISTA-NOK", e.ToString());
            }
        }

        /// <summary>
        /// Este método es el encargado de colocar a la ventana en 
        /// modo de edición, en donde se activan los botones de la
        /// barra de herramientas para guardar, undo y borrar datos.
        /// También se solicita al panel interno que sea editable.
        /// </summary>
        private void setEditable() {
            try {
                _panel.setEditable();
                toolBar.Items["btnSave"].Visible = true;
                toolBar.Items["btnUndo"].Visible = true;
                toolBar.Items["btnDelete"].Visible = true;
            } catch (Exception e) {
                Sistema.Controlador.mostrar("VISTA-NOK", ENivelMensaje.ERROR, e.ToString(), false);
                throw new VistaErrorException("VISTA-NOK", e.ToString());
            }
        }

        /// <summary>
        /// Este método oculta los botones de acción de la toolbar para
        /// dejar a la ventana en un modo de únicamente visualización.
        /// Además avisa al panel interno que se vuelva solo lectura.
        /// </summary>
        private void setReadOnly() {
            try {
                _panel.setNoEditable();
                toolBar.Items["btnSave"].Visible = false;
                toolBar.Items["btnUndo"].Visible = false;
                toolBar.Items["btnDelete"].Visible = false;
            } catch (Exception e) {
                Sistema.Controlador.mostrar("VISTA-NOK", ENivelMensaje.ERROR, e.ToString(), false);
                throw new VistaErrorException("VISTA-NOK", e.ToString());
            }
        }

        #region IVistaContenedor members
        /// <summary>
        /// Este método establece el modo en que se visualiza
        /// la ventana (qué botones se muestran) de acuerdo al
        /// modo de vista del controlador asociado. Finalmente
        /// ejecuta el setModoVista del panel asociado.
        /// </summary>
        public void setModoVista() {
            switch (_controlador.ModoVista) {
                case EModoVentana.EDIT:
                case EModoVentana.LIST:
                case EModoVentana.FULL:
                    setEditable();
                    break;
                case EModoVentana.ADD:
                    setAgregable();
                    break;
                default:
                    setReadOnly();
                    break;
            }

            _panel.setModoVista();
        }

        /// <summary>
        /// Este método permite guardar los datos del panel sin la
        /// necesidad de cerrar la ventana (como se hace cuando se
        /// graba vía el botón del menú) y es para los casos en que 
        /// se quiere agregar un nuevo registro en un listado detail 
        /// de un panelABMV y todavía no se grabó el master que se 
        /// está agregando.
        /// </summary>
        public void guardarDatos() {
            _panel.guardarDatos();
        }

        /// <summary>
        /// Este método permite guardar los datos del panel sin la
        /// necesidad de cerrar la ventana (como se hace cuando se
        /// graba vía el botón del menú) y es para los casos en que 
        /// se quiere agregar un nuevo registro en un listado detail 
        /// de un panelABMV y todavía no se grabó el master que se 
        /// está agregando.
        /// </summary>
        public void actualizarDatos() {
            _panel.actualizarDatos();
        }

        /// <summary>
        /// Este método es el que le dice al contenedor de una vista 
        /// que el usuario a determinado que la misma debe cerrarse.
        /// </summary>
        public void cerrar() {
            Close();
        }
        #endregion IVistaContenedor members

        #region interface
        /// <summary>
        /// Este método responde al botón Help. Debería 'mostrar' cualquier
        /// error que pudiese ocurrir y no propagar ninguna excepción.
        /// </summary>
        /// <param name="sender">
        /// El componente que lanza el evento (envía el mensaje).
        /// </param>
        /// <param name="e">
        /// Los argumentos del evento lanzado por el componente.
        /// </param>
        private void btnHelp_Click(object sender, EventArgs e) {
            try {
                _controlador.help();
            } catch (Exception ex) {
                Sistema.Controlador.mostrar("ACTION-HELP-NOK", ENivelMensaje.ERROR, ex.ToString(), true);
            }
        }

        /// <summary>
        /// Este método responde al botón Save. Debería 'mostrar' cualquier
        /// error que pudiese ocurrir y no propagar ninguna excepción.
        /// </summary>
        /// <param name="sender">
        /// El componente que lanza el evento (envía el mensaje).
        /// </param>
        /// <param name="e">
        /// Los argumentos del evento lanzado por el componente.
        /// </param>
        public void btnSave_Click(object sender, EventArgs e) {
            try {
                _isSaving = true;
                guardarDatos();
                Close();
            } catch (Exception ex) {
                _isSaving = false;
                Sistema.Controlador.mostrar("ACTION-SAVE-NOK", ENivelMensaje.ERROR, ex.ToString(), true);
            }
        }

        /// <summary>
        /// Este método responde al botón Undo. Debería 'mostrar' cualquier
        /// error que pudiese ocurrir y no propagar ninguna excepción.
        /// </summary>
        /// <param name="sender">
        /// El componente que lanza el evento (envía el mensaje).
        /// </param>
        /// <param name="e">
        /// Los argumentos del evento lanzado por el componente.
        /// </param>
        private void btnUndo_Click(object sender, EventArgs e) {
            try {
                if (_panel.isDirty())
                    _panel.setearObjeto(_controlador.ObjetoEnEdicion);
            } catch (Exception ex) {
                Sistema.Controlador.mostrar("ACTION-UNDO-NOK", ENivelMensaje.ERROR, ex.ToString(), true);
            }
        }

        /// <summary>
        /// Este método responde al botón Delete. Debería 'mostrar' cualquier
        /// error que pudiese ocurrir y no propagar ninguna excepción.
        /// </summary>
        /// <param name="sender">
        /// El componente que lanza el evento (envía el mensaje).
        /// </param>
        /// <param name="e">
        /// Los argumentos del evento lanzado por el componente.
        /// </param>
        private void btnDelete_Click(object sender, EventArgs e) {
            try {
                _panel.setClear();
            } catch (Exception ex) {
                Sistema.Controlador.mostrar("ACTION-CLEAR-NOK", ENivelMensaje.ERROR, ex.ToString(), true);
            }
        }

        /// <summary>
        /// Este método responde al Cerrar el Form. Verifica si hubo
        /// alguna modificación sin guardar, en cuyo caso pergunta si 
        /// se sale (rollbackea) o no. Debería 'mostrar' cualquier error 
        /// que pudiese ocurrir y no propagar ninguna excepción.
        /// </summary>
        /// <param name="sender">
        /// El componente que lanza el evento (envía el mensaje).
        /// </param>
        /// <param name="e">
        /// Los argumentos del evento lanzado por el componente.
        /// </param>
        private void WinABMV_FormClosing(object sender, FormClosingEventArgs e) {
            try {
                if (!_isSaving && (_controlador.ModoVista != EModoVentana.VIEW && _panel.isDirty())) {
                    if (Sistema.Controlador.mostrar("PREGUNTA-CERRAR-DIRTY", ENivelMensaje.PREGUNTA, null, false)
                        == DialogResult.No)
                        e.Cancel = true;              
                }
            } catch (Exception ex) {
                Sistema.Controlador.mostrar("VISTA-CLOSE-NOK", ENivelMensaje.ERROR, ex.ToString(), true);
                e.Cancel = false;
            }
        }

        /// <summary>
        /// Este método responde al click del botón closer de la ventnana
        /// para cerrar la misma ante una presión de ESC.
        /// </summary>
        /// <param name="sender">
        /// El componente que lanza el evento (envía el mensaje).
        /// </param>
        /// <param name="e">
        /// Los argumentos del evento lanzado por el componente.
        /// </param>
        private void btnCloser_Click(object sender, EventArgs e) {
            Close();
        }

        /// <summary>
        /// Este evento es llamado al darle Enter al cuadro Filtrar por Código
        /// y se encarga de ejecutar el filtro y mostrar los resultados.
        /// </summary>
        /// <param name="sender">
        /// El objeto que realiza la llamda del evento.
        /// </param>
        /// <param name="e">
        /// Los argumentos de la llamada del evento.
        /// </param>
        private void _panelABMV_KeyDown(object sender, KeyEventArgs e) {
            switch (e.KeyCode) {
                case Keys.F1:
                    if (btnHelp.Visible) {
                        e.SuppressKeyPress = true;
                        btnHelp.PerformClick();
                    }
                    break;
                case Keys.F2:
                    if (btnSave.Visible) {
                        e.SuppressKeyPress = true;
                        btnSave.PerformClick();
                    }
                    break;
                case Keys.F3:
                    if (btnUndo.Visible) {
                        e.SuppressKeyPress = true;
                        btnUndo.PerformClick();
                    }
                    break;
                case Keys.F4:
                    if (btnDelete.Visible) {
                        e.SuppressKeyPress = true;
                        btnDelete.PerformClick();
                    }
                    break;
                case Keys.Escape:
                    e.SuppressKeyPress = true;
                    cerrar();
                    break;
                default:
                    return;
            }
        }
        #endregion interface
    }
}