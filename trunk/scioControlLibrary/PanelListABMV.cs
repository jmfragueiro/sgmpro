///////////////////////////////////////////////////////////
//  PanelListABMV.cs
//  Clase de panel de listado genérico para entidades del sistema.
//  Generated by Fito
//  Created on:      08-abr-2009 11:32:54
//  Original author: Fito
///////////////////////////////////////////////////////////
using System;
using System.Collections.Generic;
using System.Data;
using System.Windows.Forms;
using DgvFilterPopup;
using printdgv;
using scioBaseLibrary;
using scioBaseLibrary.excepciones;
using scioControlLibrary.enums;
using scioControlLibrary.interfaces;
using scioPersistentLibrary.acceso;
using scioSecureLibrary.enums;
using scioSecureLibrary.excepciones;
using scioToolLibrary;
using scioToolLibrary.enums;

namespace scioControlLibrary {
    public partial class PanelListABMV<T> : UserControl, IVistaPanelList where T : EntidadIdentificada<T> {
        /// <summary>
        /// Este atributo debería utilizarse para marcar el tiempo en que
        /// el panel se encuentra bajo procesos especiales, como seteos 
        /// iniciales de manera de que si mientras eso sucede no deben 
        /// ejecutarse ciertas acciones específicas (el cambio celda/fila 
        /// actual), se pueda saber cuándo empieza y cuándo termina. 
        /// </summary> 
        protected bool _enProceso;
        /// <summary>
        /// En contenedor del panel actual.
        /// </summary>
        public IVistaContenedor Contenedor {
            get {
                if (_contenedor == null)
                    throw new VistaErrorException("VISTA-NO-PARENT");
                return _contenedor;
            }
            set { _contenedor = value; }
        }
        protected IVistaContenedor _contenedor;
        /// <summary>
        /// Controlador asociado al panel del listado.
        /// </summary>
        protected IControladorListable<T> _controlador;
        /// <summary>
        /// La fila actualmente seleccionada dentro del listado.
        /// </summary>
        protected DataGridViewRow _filaActual;

        /// <summary>
        /// Constructor de la clase que primero ejecuta la inicialización
        /// por defecto y luego asigna el controlador y panel asociado al 
        /// listado (para agregar, mostrar, editar o borrar). Debería lanzar 
        /// una VistaErrorExcetion si hay un problema.
        /// </summary>
        /// <param name="controlador">
        /// El objeto controlador de la ventana.
        /// </param>
        public PanelListABMV(IControladorListable<T> controlador) {
            try {
                InitializeComponent();
                _controlador = controlador;
            } catch (Exception e) {
                throw new VistaErrorException("PANEL-NOK", e.ToString());
            }
        }

        /// <summary>
        /// Este método devuelve el controlador asociado a la instancia.
        /// </summary>
        /// <returns>
        /// El controlador asociado al panel de listado.
        /// </returns>
        public IControladorListable<T> getControlador() {
            return _controlador;
        }

        /// <summary>
        /// Este método permite acceder al controll específico dentro del
        /// cual se está efectivamente mostrando el listado (por ejemplo
        /// un datagridview en C#.Net).
        /// </summary>
        /// <returns>
        /// El control de interface de usuario especifico que muestra el listado.
        /// </returns>
        public object getControlListado() {
            return dgvListado;
        }

        /// <summary>
        /// Este método devuelve el objeto actual, es decir el objeto que
        /// está asociado a la fila actualmente seleccionada en la lista.
        /// Si no hay una fila seleccionada, entonces devuelve un null.
        /// </summary>
        /// <returns>
        /// El objeto actual para el listado.
        /// </returns>
        public T getObjetoActual() {
            if (_filaActual != null && _filaActual.DataBoundItem != null)
                return _controlador.getObjectFromDataRow(((DataRowView) _filaActual.DataBoundItem).Row);

            return null;
        }

        /// <summary>
        /// Implementa el método de la interface.
        /// </summary>
        public object getObjectActual() {
            return getObjetoActual();
        }

        /// <summary>
        /// Implementa el método de la interface.
        /// </summary>
        public virtual void alMostrar(params object[] parametros) {}

        /// <summary>
        /// Implementa el método de la interface.
        /// </summary>
        public virtual void alOcultar(params object[] parametros) {}

        /// <summary>
        /// Este método refresca el listado del panel con los datos que 
        /// devuelve el método list() del controlador del listado -debe 
        /// tener datos frescos-. Además, el método permite ocultar las 
        /// columnas cuyos titulos vienen en el List nocols.
        /// </summary>
        /// <param name="nocols">
        /// La lista de nombres de columnas que no se deben mostrar.
        /// </param>
        public void refrescarListado(List<string> nocols) {
            _enProceso = true;

            try {
                if (dgvListado != null && _controlador != null) {
                    dgvListado.DataSource = _controlador.listList();

                    // ReSharper disable PossibleNullReferenceException
                    if (dgvListado.Columns != null && dgvListado.Columns.Count > 0)
                        if (nocols != null)
                            foreach (string nocol in nocols)
                                if (dgvListado.Columns.Contains(nocol))
                                    dgvListado.Columns[nocol].Visible = false;
                    // ReSharper restore PossibleNullReferenceException

                    dgvListado.Refresh();
                    toolStrip1.Items["lblCuenta"].Text = (_controlador.Cuenta == 1)
                                                             ? _controlador.Cuenta + " Registro"
                                                             : _controlador.Cuenta + " Registros";

                    if (dgvListado.Rows.Count > 0) {
                        dgvListado.Rows[0].Selected = true;
                        _filaActual = dgvListado.CurrentRow;
                    }

                    // Agregado para lanzar avisos a los controladores
                    if (_filaActual != null && dgvListado.CurrentRow != null) {
                        dgvListado.CurrentRow.Selected = true;
                        _controlador.alActualizarFila(_filaActual.DataBoundItem);
                        _controlador.alActualizarSeleccion(dgvListado.SelectedRows);
                    }
                }
            } catch (Exception e) {
                throw new VistaErrorException("VISTA-NOK", e.ToString());
            } finally {
                _enProceso = false;
            }
        }

        /// <summary>
        /// Este método permtie establecer el valor de multiselección
        /// del panel asociado al listado actual.
        /// </summary>
        /// <param name="setear">
        /// El valor 'true' para permitir multiselección o, si no, 'false'.
        /// </param>
        public virtual void setMultiSelect(bool setear) {
            dgvListado.MultiSelect = setear;
        }

        /// <summary>
        /// Este método establece el modo en que se visualiza
        /// el listado (qué botones se muestran) de acuerdo al
        /// modo de vista del controlador asociado. Esto se llama
        /// por ejemplo al actualizar la fila de DataGridView.
        /// </summary>
        public virtual void setModoVista() {
            // Verifica el modo de vista del listado contra el estado del 
            // objeto de la fila actual (por ejem: si esta borrado no se
            // debería mostrar un botón de edición o uno de eliminación)
            if (_controlador.ModoVista > EModoVentana.VIEW)
                if (_controlador.ControlEditable != null
                    && _controlador.ControlEditable.ObjetoEnEdicion != null
                    && !(_controlador.ControlEditable.ObjetoEnEdicion).isAlive())
                    setModoVista(EModoVentana.ADD);
                else
                    setModoVista(_controlador.ModoVista);
            else
                setModoVista(_controlador.ModoVista);
        }

        /// <summary>
        /// Este método establece el modo en que se visualiza
        /// el listado (qué botones se muestran) de acuerdo al
        /// modo de vista del controlador asociado.
        /// </summary>
        public virtual void setModoVista(EModoVentana modo) {
            switch (modo) {
                case EModoVentana.FULL:
                case EModoVentana.EDIT:
                case EModoVentana.LIST:
                    setFullView();
                    break;
                case EModoVentana.ADD:
                    setAgregable();
                    break;
                case EModoVentana.NINGUNO:
                    setNinguno();
                    break;
                default:
                    setReadOnly();
                    break;
            }
        }

        /// <summary>
        /// Este método oculta los botones de acción de la toolbar para
        /// </summary>
        protected virtual void setNinguno() {
            toolStrip1.Items["btnView"].Visible = false;
            toolStrip1.Items["btnAdd"].Visible = false;
            toolStrip1.Items["btnEdit"].Visible = false;
            toolStrip1.Items["btnRemove"].Visible = false;

            // Luego de establecer el modo de vista verifica permisos
            aplicarListPermisos(toolStrip1, typeof(T).Name.ToUpper());
        }

        /// <summary>
        /// Este método oculta los botones de acción de la toolbar para
        /// </summary>
        protected virtual void setReadOnly() {
            toolStrip1.Items["btnAdd"].Visible = false;
            toolStrip1.Items["btnEdit"].Visible = false;
            toolStrip1.Items["btnRemove"].Visible = false;

            // Luego de establecer el modo de vista verifica permisos
            aplicarListPermisos(toolStrip1, typeof(T).Name.ToUpper());
        }

        /// <summary>
        /// Este método muestra los botones de edicion de la toolbar para
        /// dejar al listado en un modo de full edición (con add y remove).
        /// </summary>
        protected virtual void setFullView() {
            toolStrip1.Items["btnAdd"].Visible = true;
            toolStrip1.Items["btnEdit"].Visible = true;
            toolStrip1.Items["btnRemove"].Visible = true;

            // Luego de establecer el modo de vista verifica permisos
            aplicarListPermisos(toolStrip1, typeof(T).Name.ToUpper());
        }

        /// <summary>
        /// Este método muestra solo el botón de agregar de la toolbar para
        /// dejar al listado en un modo de Agregable (solamente con add).
        /// </summary>
        protected virtual void setAgregable() {
            toolStrip1.Items["btnAdd"].Visible = true;
            toolStrip1.Items["btnEdit"].Visible = false;
            toolStrip1.Items["btnRemove"].Visible = false;

            // Luego de establecer el modo de vista verifica permisos
            aplicarListPermisos(toolStrip1, typeof(T).Name.ToUpper());
        }

        /// <summary>
        /// Este método retorna la colección de filas del datagridview.
        /// </summary>
        /// <returns>
        /// Una colección con todas las filas del datagridview.
        /// </returns>
        public DataGridViewRowCollection getRows() {
            return dgvListado.Rows;
        }

        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        public void aplicarListPermisos(ToolStrip contenedor, string recurso) {
            try {
                string mirecurso = "ENTIDAD." + recurso;
                foreach (ToolStripItem ctrl in contenedor.Items)
                    if (ctrl is ToolStripButton) {
                        if (ctrl.Tag is ETipoPermiso)
                            if (
                                !Sistema.Controlador.SecurityService.usuarioActualPoseePermiso(mirecurso,
                                     (ETipoPermiso) ctrl.Tag))
                                ctrl.Visible = false;
                        if (ctrl.Tag is string && ctrl.Tag.ToString().StartsWith("BOTON"))
                            if (
                                !Sistema.Controlador.SecurityService.usuarioActualPoseePermiso((string) ctrl.Tag,
                                     ETipoPermiso.EJECUTAR))
                                ctrl.Visible = false;
                    }
            } catch (Exception e) {
                throw new SecurityErrorException("PANEL-NOK", e.ToString());
            }
        }

        #region helpers
        /// <summary>
        /// Este método verifica si se debe guardar un objeto padre
        /// del listado antes de ejecutar alguna accion sobre este.
        /// Si se debe guardar, entonces pregunta antes de continuar.
        /// </summary>
        /// <returns>
        /// Retorna 'true' si se puede continuar, esto es si se guardaron 
        /// los cambios en el padre ó no hay cambios para guardar ó no hay 
        /// objeto padre, de lo contrario retorna 'false'=no debería seguir.
        /// </returns>
        private bool guardaCambios() {
            if (Contenedor is IVistaPanelAbmv)
                if (((IVistaPanelAbmv) Contenedor).isDirty()) {
                    if (Sistema.Controlador.mostrar("PREGUNTA-SAVE-FOR-ADD", ENivelMensaje.PREGUNTA, null, false)
                        == DialogResult.Yes) {
                        Contenedor.guardarDatos();
                        return true;
                    }
                    return false;
                }
            return true;
        }

        /// <summary>
        /// Este método es el encargado de ejecutar las tareas necesarias
        /// luego de que se ha ejecutado (y ha finalizado) la acción que
        /// se asocia a un botón del listado.
        /// </summary>
        protected virtual void postAccion() {
            refrescarListado(_controlador.ColsInvisibles);
            Contenedor.actualizarDatos();
        }
        #endregion helpers

        #region interface
        /// <summary>
        /// Este método es llamado cuando se presiona enter sobre el listado.
        /// esta creado para que reaccione de alguna forma, por defecto es
        /// como si fuera un doble click, pero el método puede ser sobrepasado.
        /// </summary>
        protected virtual void alPresionarEnter() {
            btnView.PerformClick();
        }

        /// <summary>
        /// Este método responde al botón View, y si no existe una fila para
        /// mostrar (por ejemplo no hay nada seleccionado) muestra un error.
        /// No propaga excepciones. Actualiza el listado luego de finalizada 
        /// su operación.
        /// </summary>
        /// <param name="sender">
        /// El componente que lanza el evento (envía el mensaje).
        /// </param>
        /// <param name="e">
        /// Los argumentos del evento lanzado por el componente.
        /// </param>
        protected virtual void btnView_Click(object sender, EventArgs e) {
            if (dgvListado.CurrentRow == null)
                Sistema.Controlador.mostrar("ROW-MUST", ENivelMensaje.ERROR, null, false);
            else
                try {
                    _controlador.listView();
                } catch (Exception ex) {
                    Sistema.Controlador.mostrar("ACTION-VIEW-NOK", ENivelMensaje.ERROR, ex.ToString(), true);
                }
        }

        /// <summary>
        /// Este método responde al botón Add. Aqui se tiene en cuenta que el
        /// listado pued ser principal (por ejemplo asociado a un tree) o bien
        /// puede ser un detail dentro de una ventana de ABMV (por ejemplo de
        /// los contactos de una persona), en cuyo caso el tratamiento debería
        /// ser distinto. No propaga excepciones y actualiza el listado (y los 
        /// tabs si es detail) luego de finalizada su operación.
        /// </summary>
        /// <param name="sender">
        /// El componente que lanza el evento (envía el mensaje).
        /// </param>
        /// <param name="e">
        /// Los argumentos del evento lanzado por el componente.
        /// </param>
        protected virtual void btnAdd_Click(object sender, EventArgs e) {
            try {
                if (guardaCambios())
                    _controlador.listAdd();
            } catch (Exception ex) {
                Sistema.Controlador.mostrar("ACTION-ADD-NOK", ENivelMensaje.ERROR, ex.ToString(), true);
            } finally {
                postAccion();
            }
        }

        /// <summary>
        /// Este método responde al botón Edit, y si no existe una fila para
        /// mostrar (por ejemplo no hay nada seleccionado) muestra un error.
        /// Aqui se tiene en cuenta que el listado puede ser principal (por 
        /// ejemplo asociado a un tree) o bien puede ser un detail dentro de 
        /// una ventana de ABMV (por ejemplo de los contactos de una persona), 
        /// en cuyo caso el tratamiento debería ser distinto. No se propagan 
        /// excepciones y actualiza el listado (y los tabs si es detail) luego 
        /// de finalizada su operación.
        /// </summary>
        /// <param name="sender">
        /// El componente que lanza el evento (envía el mensaje).
        /// </param>
        /// <param name="e">
        /// Los argumentos del evento lanzado por el componente.
        /// </param>
        protected virtual void btnEdit_Click(object sender, EventArgs e) {
            if (dgvListado.CurrentRow == null)
                Sistema.Controlador.mostrar("ROW-MUST", ENivelMensaje.ERROR, null, false);
            else
                try {
                    if (guardaCambios())
                        _controlador.listEdit();
                } catch (Exception ex) {
                    Sistema.Controlador.mostrar("ACTION-EDIT-NOK", ENivelMensaje.ERROR, ex.ToString(), true);
                } finally {
                    postAccion();
                }
        }

        /// <summary>
        /// Este método responde al botón Remove, y si no existe una fila para
        /// mostrar (por ejemplo no hay nada seleccionado) muestra un error.
        /// Aqui se tiene en cuenta que el listado puede ser principal (por 
        /// ejemplo asociado a un tree) o bien puede ser un detail dentro de 
        /// una ventana de ABMV (por ejemplo de los contactos de una persona), 
        /// en cuyo caso el tratamiento debería ser distinto. No se propagan 
        /// excepciones y actualiza el listado (y los tabs si es detail) luego 
        /// de finalizada su operación.
        /// </summary>
        /// <param name="sender">
        /// El componente que lanza el evento (envía el mensaje).
        /// </param>
        /// <param name="e">
        /// Los argumentos del evento lanzado por el componente.
        /// </param>
        protected virtual void btnRemove_Click(object sender, EventArgs e) {
            if (dgvListado.CurrentRow == null)
                Sistema.Controlador.mostrar("ROW-MUST", ENivelMensaje.ERROR, null, false);
            else
                try {
                    if (Sistema.Controlador.mostrar("PREGUNTA-BAJAR-OBJETO", ENivelMensaje.PREGUNTA, null, false)
                        == DialogResult.Yes)
                        if (guardaCambios()) {
                            _controlador.listRemove();
                            Sistema.Controlador.mostrar("DATA-DELOK", ENivelMensaje.INFORMACION, null, false);
                        }
                } catch (Exception ex) {
                    Sistema.Controlador.mostrar("ACTION-DEL-NOK", ENivelMensaje.ERROR, ex.ToString(), true);
                } finally {
                    postAccion();
                }
        }

        /// <summary>
        /// Este método responde al botón Refresh. 
        /// </summary>
        /// <param name="sender">
        /// El componente que lanza el evento (envía el mensaje).
        /// </param>
        /// <param name="e">
        /// Los argumentos del evento lanzado por el componente.
        /// </param>
        protected virtual void btnRefresh_Click(object sender, EventArgs e) {
            postAccion();
        }

        /// <summary>
        /// Este método responde al botón Help. 
        /// </summary>
        /// <param name="sender">
        /// El componente que lanza el evento (envía el mensaje).
        /// </param>
        /// <param name="e">
        /// Los argumentos del evento lanzado por el componente.
        /// </param>
        protected virtual void btnHelp_Click(object sender, EventArgs e) {
            _controlador.listHelp();
        }

        /// <summary>
        /// Este método responde al evento de cambio de fila seleccionada
        /// y avisa al controlador lanzando el metodo alActualizarFila().
        /// Debería lanzar VistaErrorExcetion si hay un problema.
        /// </summary>
        /// <param name="sender">
        /// El componente que lanza el evento (envía el mensaje).
        /// </param>
        /// <param name="e">
        /// Los argumentos del evento lanzado por el componente.
        /// </param>
        protected virtual void dgvListado_CurrentCellChanged(object sender, EventArgs e) {
            try {
                if (!_enProceso && _controlador != null && dgvListado.CurrentRow != null)
                    if (_filaActual != null) {
                            if (dgvListado.CurrentRow != _filaActual)
                                _filaActual = dgvListado.CurrentRow;
                        _controlador.alActualizarFila(getObjetoActual());
                        setModoVista();
                    } else {
                        _filaActual = dgvListado.CurrentRow;
                        _controlador.alActualizarFila(getObjetoActual());
                    }
            } catch (Exception ex) {
                throw new VistaErrorException("ROW-NOK", ex.ToString());
            }
        }

        /// <summary>
        /// Responde al doble-click sobre una celda.
        /// </summary>
        /// <param name="sender">
        /// El objeto que realiza la llamda del evento.
        /// </param>
        /// <param name="e">
        /// Los argumentos de la llamada del evento.
        /// </param>
        protected virtual void dgvListado_CellContentDoubleClick(object sender, DataGridViewCellEventArgs e) {
            if (btnView.Visible)
                btnView_Click(sender, e);
        }

        /// <summary>
        /// Este evento es llamado al momento de cargar la ventana.
        /// </summary>
        /// <param name="sender">
        /// El objeto que realiza la llamda del evento.
        /// </param>
        /// <param name="e">
        /// Los argumentos de la llamada del evento.
        /// </param>
        protected virtual void PanelListABMV_Load(object sender, EventArgs e) {
            new DgvFilterManager(dgvListado);
            _controlador.listOpen();
        }

        /// <summary>
        /// Este evento es llamado al momento de formatear una celda
        /// del listado y se utiliza para 'borrar', o sea no mostrar,
        /// una celda que contiene una fecha tomada como NULL (cuando
        /// posee el valor Fechas.FechaNull), de manera de no mostrar
        /// cualqueir cosa en los listados.
        /// </summary>
        /// <param name="sender">
        /// El objeto que realiza la llamda del evento.
        /// </param>
        /// <param name="e">
        /// Los argumentos de la llamada del evento.
        /// </param>
        private void dgvListado_CellFormatting(object sender, DataGridViewCellFormattingEventArgs e) {
            if (e.Value != null &&
                (ReferenceEquals(e.Value.GetType(), _fecha.GetType()) &&
                 (DateTime) e.Value <= Fechas.FechaMin))
                e.Value = "";
        }
        private DateTime _fecha;

        /// <summary>
        /// Este evento es llamado al momento de modificarse la
        /// selección dentro de un listado.
        /// </summary>
        /// <param name="sender">
        /// El objeto que realiza la llamda del evento.
        /// </param>
        /// <param name="e">
        /// Los argumentos de la llamada del evento.
        /// </param>
        private void dgvListado_SelectionChanged(object sender, EventArgs e) {
            if (!_enProceso)
                _controlador.alActualizarSeleccion(dgvListado.SelectedRows);
        }

        /// <summary>
        /// Invoca el componente para la impresión del grid
        /// Llama primeramente a la ventana de opciones de 
        /// impresión.
        /// </summary>
        /// <param name="sender">
        /// El objeto que realiza la llamda del evento.
        /// </param>
        /// <param name="e">
        /// Los argumentos de la llamada del evento.
        /// </param>
        private void btnPrint_Click(object sender, EventArgs e) {
            PrintDGV.Print_DataGridView(dgvListado, Mensaje.TextoMensaje("TITULO-REPORTE-GRILLA"));
        }

        /// <summary>
        /// Este evento es llamado al darle Enter al cuadro Filtrar por Código
        /// y se encarga de ejecutar el filtro y mostrar los resultados.
        /// </summary>
        /// <param name="sender">
        /// El objeto que realiza la llamda del evento.
        /// </param>
        /// <param name="e">
        /// Los argumentos de la llamada del evento.
        /// </param>
        private void dgvListado_KeyDown(object sender, KeyEventArgs e) {
            switch (e.KeyCode) {
                case Keys.F1:
                    if (btnHelp.Visible) {
                        e.SuppressKeyPress = true;
                        btnHelp.PerformClick();
                    }
                    break;
                case Keys.F5:
                    if (btnRefresh.Visible) {
                        e.SuppressKeyPress = true;
                        btnRefresh.PerformClick();
                    }
                    break;
                case Keys.F6:
                    if (btnAdd.Visible) {
                        e.SuppressKeyPress = true;
                        btnAdd.PerformClick();
                    }
                    break;
                case Keys.F7:
                    if (btnEdit.Visible) {
                        e.SuppressKeyPress = true;
                        btnEdit.PerformClick();
                    }
                    break;
                case Keys.F8:
                    if (btnRemove.Visible) {
                        e.SuppressKeyPress = true;
                        btnRemove.PerformClick();
                    }
                    break;
                case Keys.Enter:
                    e.SuppressKeyPress = true;
                    alPresionarEnter();
                    break;
                case Keys.Escape:
                    e.SuppressKeyPress = true;
                    Contenedor.cerrar();
                    break;
                default:
                    return;
            }
        }
        #endregion interface
    }
}