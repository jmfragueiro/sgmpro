///////////////////////////////////////////////////////////
//  CUSetGenerico.cs
//  Clase de implementación de CUSetGenerico.
//  Generated by Fito
//  Created on:      08-abr-2009 11:32:54
//  Original author: Fito
///////////////////////////////////////////////////////////
using System;
using System.Collections.Generic;
using System.Data;
using System.Windows.Forms;
using scioBaseLibrary.excepciones;
using scioControlLibrary.enums;
using scioControlLibrary.interfaces;
using scioPersistentLibrary.acceso;
using scioPersistentLibrary.interfases;
using scioToolLibrary;

namespace scioControlLibrary {
    public class CUListSetGenerico<T> : IControladorListSet<T> where T : EntidadIdentificada<T> {
        /// <summary>
        /// El binding source utilizado para contener el listado.
        /// </summary>
        protected BindingSource _bs;
        /// <summary>
        /// El panle de listado a utilizarse para mostrar el listado.
        /// </summary>
        protected PanelListSet<T> _panelListado;
        /// <summary>
        /// El nombre del parámetro específico a trabajar con ésta instancia.
        /// </summary>
        public string Nombre { get; set; }
        /// <summary>
        /// Implementación de la propiedad de la interfaz.
        /// </summary>
        public object Padre { get; set; }
        /// <summary>
        /// El filtro base para el listado (si actúa como "Detail").
        /// </summary>
        public IEntidadIdentificable ObjetoMaster { get; set; }
        /// <summary>
        /// La lista de columnas que no deben mostrarse en el listado.
        /// </summary>
        public List<string> ColsInvisibles { get; set; }
        /// <summary>
        /// Implementación de la propiedad de la interfaz.
        /// </summary>
        public EModoVentana ModoVista { get; set; }
        /// <summary>
        /// La lista de elementos disponibles para el ListSet.
        /// </summary>
        public IList<T> Disponibles { get; set; }
        /// <summary>
        /// La lista de elementos configurados para el ListSet.
        /// </summary>
        public IList<T> Configurados { get; set; }

        /// <summary>
        /// Constructor de la clase que inicializa elementos internos.
        /// </summary>
        public CUListSetGenerico() {
            Nombre = "Elemento";
            ColsInvisibles = new List<string> { "Id", "FechaBaja" };
        }

        #region IControladorListSet Members
        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        public virtual PanelListSet<T> getPanelListado(params object[] parametros) {
            if (_panelListado == null)
                _panelListado = crearPanelListado();

            if (ModoVista == EModoVentana.NINGUNO || parametros.Length > 0)
                ModoVista = (parametros.Length > 0)
                    ? (EModoVentana)parametros[0]
                    : EModoVentana.VIEW;

            _panelListado.refrescarListado(ColsInvisibles);

            return _panelListado;
        }

        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        public virtual PanelListSet<T> crearPanelListado() {
            return new PanelListSet<T>(this);
        }

        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        public virtual void alActualizarFila(params object[] parametros) {}

        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        public virtual void alActualizarSeleccion(DataGridViewSelectedRowCollection seleccion) {}

        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        public void listOpen(params object[] parametros) {}

        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        public virtual BindingSource listList(params object[] parametros) {
            try {
                // Ejecuta el filtro y obtiene resultados de la base
                _bs = _bs ?? new BindingSource();

                _bs.DataSource = null;
                if (Configurados != null)
                    _bs.DataSource = CollectionHelper.ConvertTo(Configurados);

                return _bs;
            } catch (Exception e) {
                throw new VistaErrorException("DATA-LISTNOK", e.ToString());
            }
        }

        /// <summary>
        /// Implementación del método de la interfaz. 
        /// </summary>
        public virtual void listEdit(params object[] parametros) {
            iniciar(Padre);
            ObjetoMaster.save();
        }

        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        public virtual void listHelp() {
            throw new VistaErrorException("AYUDA-NOREADY");
        }

        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        public virtual void listClose(params object[] parametros) {}

        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        public T getObjectFromDataRow(DataRow row) {
            return RepositorioGenerico<T>.GetById((Guid)row["Id"]);
        }
        #endregion

        #region IControladorCasoUso Members
        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        /// <param name="padre">
        /// En éste caso el objeto padre del caso de uso es un Form.
        /// </param>       
        /// <param name="valor">
        /// Aqui, en principio, no se espera que venga nada.
        /// </param>
        public virtual bool iniciar(object padre, params object[] valor) {
            try {
                // Crea el panel para asignar el objeto a trabajar
                Padre = padre;

                // Abre la ventana para las tareas de edición, etc.
                (new WinSet<T>(Disponibles, Configurados, Nombre)).ShowDialog();

                // Retorna true para avisar que finalizaron todos bien
                return true;
            } catch (Exception e) {
                throw new AppErrorException("UCCALLER-NOINIT", e.ToString());
            }
        }
		
        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        public virtual void aceptarParametros(params object[] parametros) {
            ModoVista = (parametros.Length > 0)
                            ? (EModoVentana) parametros[0]
                            : EModoVentana.VIEW;
        }		
        #endregion
    }
}