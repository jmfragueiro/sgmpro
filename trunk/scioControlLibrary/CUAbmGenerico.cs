///////////////////////////////////////////////////////////
//  CUAbmGenerico.cs
//  Clase de implementación de CUAbmGenerico.
//  Generated by Fito
//  Created on:      08-abr-2009 11:32:54
//  Original author: Fito
///////////////////////////////////////////////////////////
using System;
using System.Drawing;
using scioBaseLibrary.excepciones;
using scioControlLibrary.enums;
using scioControlLibrary.interfaces;
using scioControlLibrary.Properties;
using scioPersistentLibrary.acceso;
using scioToolLibrary;

namespace scioControlLibrary {
    /// <summary>
    /// Esta clase generica implementa la interface IControladorEditable y 
    /// debe servir como base para las calses que se encargan de gestionar 
    /// un PanelABMV de la entidad gestionada.
    /// </summary>
    public abstract class CUAbmGenerico<T> : IControladorEditable<T> where T : EntidadIdentificada<T>, new() {
        #region IControladorEditable Members
        /// <summary>
        /// El panel que representa a la interfaz de usuario que se controla.
        /// </summary>
        public PanelABMV<T> PanelEdicion { get; set; }
        /// <summary>
        /// Implementación de la propiedad de la interfaz.
        /// </summary>
        public virtual T ObjetoEnEdicion { get; set; }
        /// <summary>
        /// Implementación de la propiedad de la interfaz.
        /// </summary>
        public EModoVentana ModoVista { get; set; }
        /// <summary>
        /// Implementación de la propiedad de la interfaz.
        /// </summary>
        public object Padre { get; set; }

        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        public virtual PanelABMV<T> getPanelEdicion(params object[] parametros) {
            if (PanelEdicion == null)
                PanelEdicion = crearPanelEdicion();

            // Recién se setea aquí el objeto para el panel, para no
            // hacer quilombo al pedo si no se muestra el objeto ni
            // es realmente necesario asignarlo a la vista para nada
            if (ObjetoEnEdicion != null)
                PanelEdicion.setearObjeto(ObjetoEnEdicion);

            if (ModoVista == EModoVentana.NINGUNO || parametros.Length > 0)
                ModoVista = (parametros.Length > 0)
                                ? (EModoVentana) parametros[0]
                                : EModoVentana.VIEW;

            return PanelEdicion;
        }

        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        public abstract PanelABMV<T> crearPanelEdicion();

        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        public virtual void add(params object[] parametros) {
            ObjetoEnEdicion = new T();
        }

        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        public virtual void edit(params object[] parametros) {}

        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        public virtual void remove(params object[] parametros) {
            if (ObjetoEnEdicion != null)
                ObjetoEnEdicion.delete();
        }

        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        public abstract void verify(params object[] parametros);

        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        public virtual void save(params object[] parametros) {
            if (ObjetoEnEdicion != null)
                ObjetoEnEdicion.save();
        }

        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        public virtual void help() {
            throw new VistaErrorException("AYUDA-NOREADY");
        }

        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        public virtual void close(params object[] parametros) {}

        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        public virtual string getTitulo() {
            return Mensaje.TextoMensaje("TITULO-ABMV-GENERICO") + typeof(T).Name;
        }

        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        public virtual Icon getIcono() {
            return Resources.winedit;
        }
        #endregion

        #region IControladorCasoUso members
        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        /// <param name="padre">
        /// En éste caso el objeto padre del caso de uso es un Form.
        /// </param>       
        /// <param name="valor">
        /// Aqui se espera que venga: [0](EModoVentana)= el modo en el que 
        /// debe abrirse la ventana;[1](object)= el objeto con el que debe 
        /// trabajarse -si ya existe- el cual se casteará a su tipo real.
        /// </param>
        public virtual bool iniciar(object padre, params object[] valor) {
            try {
                // Crea el panel para asignar el objeto a trabajar
                Padre = padre;

                // Acepta los parametros pasados en la llamada
                aceptarParametros(valor);

                // Abre la ventana para las tareas de edición, etc.
                (new WinABMV<T>(this)).ShowDialog();

                // Retorna true para avisar que finalizaron todos bien
                return true;
            } catch (Exception e) {
                throw new AppErrorException("UCCALLER-NOINIT", e.ToString());
            }
        }

        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        public virtual void aceptarParametros(params object[] parametros) {
            ModoVista = (parametros.Length > 0)
                            ? (EModoVentana)parametros[0]
                            : EModoVentana.VIEW;

            // Si se pasa un objeto lo toma para trabajar, sino
            // arranca sin nada (o con lo que ya tiene setado)
            if (parametros.Length > 1)
                ObjetoEnEdicion = (T)parametros[1];
        }
        #endregion
    }
}