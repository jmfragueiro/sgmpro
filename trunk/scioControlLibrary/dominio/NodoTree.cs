///////////////////////////////////////////////////////////
//  NodoTree.cs
//  Clase de control para un Tree para árboles de configuración.
//  Generated by Fito
//  Created on:      08-abr-2009 11:32:54
//  Original author: Fito
///////////////////////////////////////////////////////////
using System;
using System.Collections.Generic;
using System.Windows.Forms;
using scioBaseLibrary.excepciones;
using scioPersistentLibrary.acceso;

namespace scioControlLibrary.dominio {
    /// <summary>
    /// Clase que encapsula un nodo de un tree. Cada nodo tiene una relación 
    /// uno a muchos con la misma clase, por ende lo que se guarda es el nodo 
    /// raiz y el resto se almacena en cadena
    /// </summary>
    public class NodoTree : EntidadIdentificada<NodoTree> {
        /// <summary>
        /// Indica el nivel del nodo. El nivel 0 corresponde a la raiz
        /// </summary>
        public virtual int Nivel { get; set; }
        ///<summary>
        ///</summary>
        public virtual string Descripcion { get; set; }
        ///<summary>
        /// Texto que debe aparecer en el nodo
        ///</summary>
        public virtual string Texto { get; set; }
        ///<summary>
        /// id de la imagen que debe tener el nodo cuando está seleccionado
        ///</summary>
        public virtual int IdImagenSeleccionado { get; set; }
        ///<summary>
        /// id de la imagen que debe tener el nodo cuando no está seleccionado
        ///</summary>
        public virtual int IdImagenNoSeleccionado { get; set; }
        ///<summary>
        /// Nodos hijos
        ///</summary>
        public virtual IList<NodoTree> NodosHijos {
            get { return _hijos; }
            set { _hijos = value; }
        }
        private IList<NodoTree> _hijos;

        ///<summary>
        /// Constructor
        ///</summary>
        public NodoTree() {
            _hijos = new List<NodoTree>();
        }

        ///<summary>
        /// Devuelve un nodo de un Tree haciendo el tramiento de sus hijos también
        ///</summary>
        ///<returns></returns>
        public virtual TreeNode getTree() {
            try {
                TreeNode nNodo = new TreeNode {
                    Text = Descripcion,
                    Tag = Texto,
                    ImageIndex = IdImagenNoSeleccionado,
                    SelectedImageIndex = IdImagenSeleccionado
                };

                foreach (NodoTree hijo in NodosHijos)
                    if (hijo.isAlive())
                        nNodo.Nodes.Add(hijo.getTree());

                return nNodo;
            } catch (Exception e) {
                throw new VistaErrorException("TREE-NOK", e.ToString());
            }
        }

        /// <summary>
        /// Este método genera el string por defecto a mostrar en todos lados.
        /// </summary>
        public override string ToString() {
            if (Texto != null) {
                string[] textos = Texto.Split(':');
                return textos[(textos.Length - 1)];
            }
            return base.ToString();
        }
    }
}