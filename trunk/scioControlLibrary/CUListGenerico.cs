///////////////////////////////////////////////////////////
//  CUListGenerico.cs
//  Clase de implementación de CUListGenerico.
//  Generated by Fito
//  Created on:      08-abr-2009 11:32:54
//  Original author: Fito
///////////////////////////////////////////////////////////
using System;
using System.Collections.Generic;
using System.Data;
using System.Windows.Forms;
using scioBaseLibrary.excepciones;
using scioControlLibrary.enums;
using scioControlLibrary.interfaces;
using scioPersistentLibrary.acceso;
using scioPersistentLibrary.criterios;
using scioPersistentLibrary.interfases;
using scioToolLibrary;

namespace scioControlLibrary {
    /// <summary>
    /// Esta clase generica implementa la interface IControladorListable y 
    /// debe servir como base para las clases que se encargan de gestionar 
    /// un PanelListABMV de la entidad gestionada.
    /// </summary>
    public abstract class CUListGenerico<T> : IControladorListable<T> where T : EntidadIdentificada<T>, new() {
        /// <summary>
        /// El binding source utilizado para contener el listado.
        /// </summary>
        protected BindingSource _bs;
        /// <summary>
        /// El panle de listado a utilizarse para mostrar el listado.
        /// </summary>
        protected PanelListABMV<T> _panelListado;
        /// <summary>
        /// Implementación de la propiedad de la interfaz.
        /// </summary>
        public object Padre { get; set; }
        /// <summary>
        /// La lista de columnas que no deben mostrarse en el listado.
        /// </summary>
        public List<string> ColsInvisibles { get; set; }
        /// <summary>
        /// El orden para el listado.
        /// </summary>
        public IList<IOrdenConsulta> Ordenamiento { get; set; }
        /// <summary>
        /// Los criterios para el filtrado.
        /// </summary>
        public IList<ICriterioConsulta> Filtros { get; set; }
        /// <summary>
        /// Implementación de la propiedad de la interfaz.
        /// </summary>
        public EModoVentana ModoVista { get; set; }
        /// <summary>
        /// Implementación de la propiedad de la interfaz.
        /// </summary>
        public EModoListado ModoListado { get; set; }
        /// <summary>
        /// El filtro base para el listado (si actúa como "Detail").
        /// </summary>
        public IEntidadIdentificable ObjetoMaster { get; set; }
        /// <summary>
        /// El controlador de edición asociado al listado.        
        /// </summary>
        public IControladorEditable<T> ControlEditable { get; set; }
        /// <summary>
        /// Implementación de la propiedad de la interfaz.
        /// </summary>
        public long Cuenta { get; set; }

        /// <summary>
        /// Constructor de la clase que inicializa elementos internos.
        /// </summary>
        protected CUListGenerico() {
            ModoVista = EModoVentana.LIST;
            ModoListado = EModoListado.OBJETO;
            Filtros = new List<ICriterioConsulta>();
            Ordenamiento = new List<IOrdenConsulta>();
            ColsInvisibles = new List<string> {"Id", "FechaBaja"};
        }

        #region IControladorListable Members
        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        public virtual PanelListABMV<T> getPanelListado(params object[] parametros) {
            if (ModoVista == EModoVentana.NINGUNO || parametros.Length > 0)
                ModoVista = (parametros.Length > 0)
                                ? (EModoVentana) parametros[0]
                                : EModoVentana.VIEW;

            if (_panelListado == null)
                _panelListado = crearPanelListado();

            _panelListado.refrescarListado(ColsInvisibles);

            return _panelListado;
        }

        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        protected virtual PanelListABMV<T> crearPanelListado() {
            return new PanelListABMV<T>(this);
        }

        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        public virtual ICriterioConsulta getFiltroMaster() {
            return Criterios.EsNoNulo("Id");
        }

        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        public virtual void alActualizarFila(params object[] parametros) {
            if (ControlEditable != null)
                if (parametros != null && parametros[0] is T)
                    ControlEditable.ObjetoEnEdicion = (T) parametros[0];
                else
                    ControlEditable.ObjetoEnEdicion = null;
        }

        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        public virtual void alActualizarSeleccion(DataGridViewSelectedRowCollection seleccion) {}

        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        public virtual void listOpen(params object[] parametros) {
            if (_panelListado != null) {
                _panelListado.setModoVista();
                _panelListado.alMostrar(parametros);
            }
        }

        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        public virtual BindingSource listList(params object[] parametros) {
            try {
                // Agrega el filtro de base que debe utilizarse (para, por 
                // ejemplo, obtener solo el detail adecuado de un master)
                ICriterioConsulta master = getFiltroMaster();
                if (!Filtros.Contains(master))
                    Filtros.Add(master);

                // Ejecuta el filtro y obtiene resultados de la base (se debe sobrepasar en 
                // una subclase de ésta (y usar GetAllbyOrden) si se quieren los "muertos"
                _bs = _bs ?? new BindingSource();
                _bs.DataSource =
                    (ModoListado == EModoListado.OBJETO)
                        ? CollectionHelper.ConvertTo(RepositorioGenerico<T>.GetByCriteria(true, Filtros, Ordenamiento))
                        : RepositorioGenerico<T>.SelectByCriteria(true, Filtros, Ordenamiento);

                // Obtiene la cantidad de registros para mostrar
                Cuenta = ((DataTable) _bs.DataSource).Rows.Count;

                return _bs;
            } catch (Exception e) {
                throw new VistaErrorException("DATA-LISTNOK", e.ToString());
            }
        }

        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        public virtual void listView(params object[] parametros) {
            if (ControlEditable != null)
                ControlEditable.iniciar(Padre, new object[] {EModoVentana.VIEW, _panelListado.getObjetoActual()});
        }

        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        public virtual void listAdd(params object[] parametros) {
            if (ControlEditable != null) {
                ControlEditable.add(ObjetoMaster);
                ControlEditable.iniciar(Padre, new object[] {EModoVentana.ADD});
            }
        }

        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        public virtual void listEdit(params object[] parametros) {
            if (ControlEditable != null) {
                ControlEditable.edit(parametros);
                ControlEditable.iniciar(Padre, new object[] {EModoVentana.EDIT, _panelListado.getObjetoActual()});
            }
        }

        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        public virtual void listRemove(params object[] parametros) {
            if (ControlEditable != null)
                ControlEditable.remove(parametros);
        }

        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        public virtual void listHelp() {
            if (ControlEditable != null)
                ControlEditable.help();
        }

        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        public virtual void listClose(params object[] parametros) {
            if (ControlEditable != null)
                ControlEditable.close(parametros);

            if (_panelListado != null)
                _panelListado.alOcultar(parametros);
        }

        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        public T getObjectFromDataRow(DataRow row) {
            T obj = RepositorioGenerico<T>.GetById((Guid) row["Id"]);
            return (obj != null)
                       ? obj.refrescar()
                       : null;
        }
        #endregion

        #region IControladorCasoUso Members
        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        /// <param name="padre">
        /// En éste caso el objeto padre del caso de uso es un Form.
        /// </param>       
        /// <param name="valor">
        /// Aqui se espera que venga: [0](EModoVentana)= el modo en el que 
        /// debe abrirse la ventana;[1](object)= el objeto Master contra el 
        /// que debe armarse el listado (en caso de ser un detail asociado 
        /// a un master determinado).
        /// </param>
        public virtual bool iniciar(object padre, params object[] valor) {
            try {
                // Crea el panel para asignar el objeto a trabajar
                Padre = padre;

                // Acepta los parametros pasados en la llamada
                aceptarParametros(valor);

                // Retorna true para avisar que finalizaron todos bien
                return true;
            } catch (Exception e) {
                throw new AppErrorException("UCCALLER-NOINIT", e.ToString());
            }
        }
		

        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        public virtual void aceptarParametros(params object[] parametros) {
            ModoVista = (parametros.Length > 0)
                            ? (EModoVentana)parametros[0]
                            : EModoVentana.VIEW;

            // Si se pasa un objeto master lo toma para trabajar, 
            // sino arranca sin nada (no toma lo que este seteado)
            if (parametros.Length > 1 && parametros[1] is IEntidadIdentificable)
                ObjetoMaster = (IEntidadIdentificable)parametros[1];
        }		
        #endregion
    }
}