///////////////////////////////////////////////////////////
//  WinListConAccionExtra.cs
//  Clase de ventana genérica para listar elementos.
//  Generated by Fito
//  Created on:      08-abr-2009 11:32:54
//  Original author: Fito
///////////////////////////////////////////////////////////
using System;
using System.Reflection;
using System.Windows.Forms;
using scioBaseLibrary;
using scioBaseLibrary.excepciones;
using scioControlLibrary.enums;
using scioControlLibrary.interfaces;
using scioPersistentLibrary.acceso;
using scioToolLibrary;
using scioToolLibrary.enums;

namespace scioControlLibrary {
    /// <summary>
    /// Esta clase implementa una ventana de selección generica para mostrar
    /// un listado de elementos de entidades que son persistentes y permitir
    /// seleccionar una pra devolver a un campo determinado.
    /// </summary>
    public partial class WinListConAccionExtra<T> : Form, IVistaContenedor where T : EntidadIdentificada<T> {
        /// <summary>
        /// Este atributo es el controlador para el listado/preview de la 
        /// ventana y para gestionar las operaciones ABMV sobre la entidad.
        /// </summary>
        private readonly IControladorListable<T> _controlador;
        /// <summary>
        /// Este atributo es el controladorla ventana a efectos de poder
        /// utilizar y ejecutar acciones extras.
        /// </summary>
        private readonly IControladorWinList _ctrlWinList;
        /// <summary>
        /// El panel asociado al listado a mostrar para seleccion.
        /// </summary>
        private IVistaPanelList _panel;
        /// <summary>
        /// El objeto seleccionado en la ventana.
        /// </summary>
        public T Seleccion { get; protected set; }

        /// <summary>
        /// Constructor que inicializa los componentes internos.
        /// </summary>
        public WinListConAccionExtra(string controlador, IControladorWinList ctrlWinList) {
            if (controlador == null)
                throw new VistaErrorException("VISTA-NOREADY");

            try {
                InitializeComponent();

                // Establece el título y el icono de la aplicación
                StartPosition = FormStartPosition.CenterScreen;

                // Establece el contolador winlist
                btnAccionExtra.Visible = false;
                if (ctrlWinList != null) {
                    _ctrlWinList = ctrlWinList;
                    btnAccionExtra.Visible = true;
                    btnAccionExtra.Text = _ctrlWinList.getNombreAccionExtra();
                }

                // Obtiene el controlador para el listado
                string dll = Sistema.Controlador.AppPath + "\\" + controlador.Split('.')[0] + ".dll";
                Assembly asm = Assembly.LoadFrom(dll);
                Type ty = asm.GetType(controlador);
                _controlador = (IControladorListable<T>)ty.GetConstructors()[0].Invoke(null);
            } catch (Exception e) {
                Sistema.Controlador.mostrar("VISTA-NOK", ENivelMensaje.ERROR, e.ToString(), true);
                throw new VistaErrorException("VISTA-NOK", e.ToString());
            }
        }

        /// <summary>
        /// Este método devuelve el controlador asociado a la instancia.
        /// </summary>
        /// <returns>
        /// El controlador asociado a la ventana.
        /// </returns>
        public IControladorListable<T> getControlador() {
            return _controlador;
        }

        /// <summary>
        /// Este método es el encargado de actualizar la ventana
        /// para mostrar a la derecha lo que se corresponda con el
        /// item del árbol seleccionado.
        /// </summary>
        public void actualizarListado() {
            try {
                Cursor = Cursors.WaitCursor;
                Sistema.Controlador.Winppal.setAyuda(Mensaje.TextoMensaje("UPDATE-LISTPANEL"));

                if (_controlador != null) {
                    splitContainer1.SuspendLayout();

                    // Crea, inicializa y asigna el panel interno
                    _panel = _controlador.getPanelListado(EModoVentana.VIEW);
                    _panel.Contenedor = this;

                    splitContainer1.Panel1.Controls.Clear();
                    splitContainer1.Panel1.Controls.Add((UserControl) _panel);
                    ((UserControl) _panel).Dock = DockStyle.Fill;

                    splitContainer1.ResumeLayout(false);
                    splitContainer1.PerformLayout();
                }
            } catch (Exception ex) {
                Sistema.Controlador.mostrar("VISTA-NOK", ENivelMensaje.ERROR, ex.ToString(), true);
            } finally {
                Sistema.Controlador.Winppal.setAyuda(Mensaje.TextoMensaje("AYUDA-LISTO"));
                Cursor = Cursors.Default;
            }
        }

        #region interfase
        /// <summary>
        /// Este método responde al evento del boton cancelar y
        /// simplemente cierra la ventana sin cambios.
        /// </summary>
        /// <param name="sender">
        /// El componente que lanza el evento (envía el mensaje).
        /// </param>
        /// <param name="e">
        /// Los argumentos del evento lanzado por el componente.
        /// </param>
        private void btnListo_Click(object sender, EventArgs e) {
            cerrar();
        }

        /// <summary>
        /// Este método responde al evento Load de la ventana. Debería 
        /// 'mostrar' cualquier error que pudiese ocurrir y no propagar 
        /// ninguna excepción.
        /// </summary>
        /// <param name="sender">
        /// El componente que lanza el evento (envía el mensaje).
        /// </param>
        /// <param name="e">
        /// Los argumentos del evento lanzado por el componente.
        /// </param>
        private void WinSelect_Load(object sender, EventArgs e) {
            Cursor = Cursors.WaitCursor;
            Sistema.Controlador.Winppal.setAyuda(Mensaje.TextoMensaje("UPDATE-DATAPANEL"));

            try {
                _controlador.Filtros.Clear();
                actualizarListado();
            } catch (Exception ex) {
                Sistema.Controlador.mostrar("VISTA-NOK", ENivelMensaje.ERROR, ex.ToString(), true);
                Close();
            } finally {
                Sistema.Controlador.Winppal.setAyuda(Mensaje.TextoMensaje("AYUDA-LISTO"));
                Cursor = Cursors.Default;
            }
        }

        /// <summary>
        /// Este método responde al evento de click en el boton de accion
        /// extra. Debería 'mostrar' cualquier error que pudiese ocurrir 
        /// y no propagar ninguna excepción.
        /// </summary>
        /// <param name="sender">
        /// El componente que lanza el evento (envía el mensaje).
        /// </param>
        /// <param name="e">
        /// Los argumentos del evento lanzado por el componente.
        /// </param>
        private void btnAccionExtra_Click(object sender, EventArgs e) {
            try {
                Object obj = null;
                if (_ctrlWinList != null) {
                    if (_panel.getObjectActual() != null)
                        obj = _panel.getObjectActual();

                    _ctrlWinList.ejecutarAccion(new[] {obj});
                }
            } catch (Exception ex) {
                Sistema.Controlador.mostrar("VISTA-NOK", ENivelMensaje.ERROR, ex.ToString(), false);                
            } finally {
                actualizarListado();
            }
        }
        #endregion interfase

        #region Implementation of IVistaContenedor
        /// <summary>
        /// Implementa el método de la interface.
        /// </summary>
        public virtual void setModoVista() {}

        /// <summary>
        /// Implementa el método de la interface.
        /// </summary>
        public virtual void guardarDatos() {}

        /// <summary>
        /// Implementa el método de la interface.
        /// </summary>
        public virtual void actualizarDatos() {}

        /// <summary>
        /// Este método es el que le dice al contenedor de una vista 
        /// que el usuario a determinado que la misma debe cerrarse.
        /// </summary>
        public void cerrar() {
            Close();
        }
        #endregion
    }
}