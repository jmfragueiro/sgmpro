///////////////////////////////////////////////////////////
//  IEntidadIdentificable.cs
//  Implementation of the Interface IEntidadIdentificable
//  Generated by Enterprise Architect
//  Created on:      15-Dic-2009 07:11:10 p.m.
//  Original author: Fito
///////////////////////////////////////////////////////////
using System;

namespace scioPersistentLibrary.interfases {
    /// <summary>
    /// Esta interfase es la que representa el comportamiento deseable de
    /// una clase que implemente una entidad identificable del mecanismo
    /// de persistencia, el cual debe encargarse de la persistencia de los
    /// objetos dentro de un motor de persistencia. Asi, toda entidad que
    /// sea representada y persistida dentro del framework debe implementar
    /// esta interface.
    /// </summary>
    public interface IEntidadIdentificable {
        /// <summary>
        /// Identificador único (como una clave primaria) para el motor del
        /// mecanismo de persistencia. All objeto de una entidad identificable
        /// debne poseer un identificador único.
        /// </summary>
        Guid Id { get; set; }

        /// <summary>
        /// All entidad identificable debe poseer un modo de determinar si una
        /// instancia persistida (o no) esta 'viva' o no (por ejemplo, pudiendo 
        /// ser descartada si fuera necesario). La fecha de baja de la entidad 
        /// identificable sirve como base para este mecanismo (si tiene fecha
        /// de baja entonces no está vivo -ver isAlive()-).
        /// </summary>                
        DateTime FechaBaja { get; set; }

        /// <summary>
        /// All ebntidad identificable debe poder ser persistida, para lo que
        /// se utilzia el presente método. Este hace persistente el objeto en 
        /// cuestión si es nuevo ó hace persistente las modificaciones si no 
        /// lo es.
        /// </summary>
        void save();

        /// <summary>
        /// Este método deshace la persistencia de una instancia persistida de
        /// una entidad identificable. En principio el delete no deberia borrar 
        /// físicamente el objeto en el mecanismo de persistencia -por ejemplo: 
        /// el registro en la base de datos- sino simplemente se espera que se
        /// asigne el atributo fecha de baja, incluído por ésta clase a todas 
        /// sus subclases con la fecha de baja. 
        /// </summary>
        void delete();

        /// <summary>
        /// Este método rehace la persistencia de una instancia de una entidad 
        /// identificable en cuestion. El undelete aprovecha el hecho de que el 
        /// delete no debería borrar físicamente el objeto y entonces se espera
        /// que se reasigne el atributo fecha de baja como nulo.
        /// </summary>
        void undelete();

        /// <summary>
        /// Este método debe ser el encargado de anunciar si la instancia de la
        /// entidad identificable en cuestión se enceuntra 'vivo' o nó, sea lo 
        /// que fuere que eso signifique. Permite establecer un patrón común para 
        /// determinar, por ejemlo, objetos dados de baja. 
        /// </summary>
        /// <returns>
        /// Retorna true si el objeto está 'vivo', o false si no lo está.
        /// </returns>
        bool isAlive();
    }
}