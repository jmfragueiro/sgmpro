///////////////////////////////////////////////////////////
//  Criterios.cs
//  Implementation of the Class Criterios
//  Generated by Enterprise Architect
//  Created on:      13-abr-2009 17:23:40
//  Original author: Fito
///////////////////////////////////////////////////////////
using System;
using scioPersistentLibrary.enums;
using scioPersistentLibrary.excepciones;
using scioPersistentLibrary.interfases;

namespace scioPersistentLibrary.criterios {
    /// <summary>
    /// Esta es una clase helper que presenta una serie de métodos 
    /// estáticos para utilizar la jerarquía CriterioConsulta sin
    /// tener que escribir tanto (ggg).
    /// </summary>
    public class Criterios {
        /// <summary>
        /// Método que encapsula la creación de un ICriterioConsulta.
        /// </summary>
        public static ICriterioConsulta And(ICriterioConsulta left, ICriterioConsulta rigth) {
            return new ExpresionAnd(left, rigth);
        }

        /// <summary>
        /// Método que encapsula la creación de un ICriterioConsulta.
        /// </summary>
        public static ICriterioConsulta Or(ICriterioConsulta left, ICriterioConsulta rigth) {
            return new ExpresionOr(left, rigth);
        }

        /// <summary>
        /// Método que encapsula la creación de un ICriterioConsulta.
        /// </summary>
        public static ICriterioConsulta Not(CriterioConsulta operando) {
            return new ExpresionNot(operando);
        }

        /// <summary>
        /// Método que encapsula la creación de un ICriterioConsulta.
        /// </summary>
        public static ICriterioConsulta Mayor(string atributo, object valor) {
            return ArmarTodo(EOperadorSimple.MAYORQUE, atributo, valor);
        }

        /// <summary>
        /// Método que encapsula la creación de un ICriterioConsulta.
        /// </summary>
        public static ICriterioConsulta MayorIgual(string atributo, object valor) {
            return ArmarTodo(EOperadorSimple.MAYORIGUAL, atributo, valor);
        }

        /// <summary>
        /// Método que encapsula la creación de un ICriterioConsulta.
        /// </summary>
        public static ICriterioConsulta Menor(string atributo, object valor) {
            return ArmarTodo(EOperadorSimple.MENORQUE, atributo, valor);
        }

        /// <summary>
        /// Método que encapsula la creación de un ICriterioConsulta.
        /// </summary>
        public static ICriterioConsulta MenorIgual(string atributo, object valor) {
            return ArmarTodo(EOperadorSimple.MENORIGUAL, atributo, valor);
        }

        /// <summary>
        /// Método que encapsula la creación de un ICriterioConsulta.
        /// </summary>
        public static ICriterioConsulta Igual(string atributo, object valor) {
            return ArmarTodo(EOperadorSimple.IGUAL, atributo, valor);
        }

        /// <summary>
        /// Método que encapsula la creación de un ICriterioConsulta.
        /// </summary>
        public static ICriterioConsulta Distinto(string atributo, object valor) {
            return ArmarTodo(EOperadorSimple.DISTINTO, atributo, valor);
        }

        /// <summary>
        /// Método que encapsula la creación de un ICriterioConsulta.
        /// </summary>
        public static ICriterioConsulta Like(string atributo, object valor) {
            return ArmarTodo(EOperadorSimple.LIKE, atributo, valor);
        }

        /// <summary>
        /// Método que encapsula la creación de un ICriterioConsulta.
        /// </summary>
        public static ICriterioConsulta EsNulo(string atributo) {
            return new ExpresionSimple(EOperadorUnario.NULO, atributo);
        }

        /// <summary>
        /// Método que encapsula la creación de un ICriterioConsulta.
        /// </summary>
        public static ICriterioConsulta EsNoNulo(string atributo) {
            return new ExpresionSimple(EOperadorUnario.NONULO, atributo);
        }

        /// <summary>
        /// Método helper que termina de armar el operador necesario.
        /// </summary>
        private static ICriterioConsulta ArmarTodo(EOperadorSimple op, string atributo, object valor) {
            try {
                if (valor is string) return new ExpresionSimple(op, atributo, (string)valor);
                if (valor is Guid) return new ExpresionSimple(op, atributo, (Guid)valor);
                if (valor is bool) return new ExpresionSimple(op, atributo, (bool)valor);
                if (valor is int) return new ExpresionSimple(op, atributo, (int)valor);
                if (valor is long) return new ExpresionSimple(op, atributo, (long)valor);
                if (valor is double) return new ExpresionSimple(op, atributo, (double)valor);
                if (valor is DateTime) return new ExpresionSimple(op, atributo, (DateTime)valor);
                if (valor is Enum) return new ExpresionSimple(op, atributo, (Enum)valor);
                if (valor is IEntidadIdentificable) return new ExpresionSimple(op, atributo, (IEntidadIdentificable)valor);
                return new ExpresionSimple(op, atributo, valor.ToString());
            } catch (Exception e) {
                throw new PersistErrorException("OPERANDO-TIPO-NOK", e.ToString());
            }
        }
    }
}