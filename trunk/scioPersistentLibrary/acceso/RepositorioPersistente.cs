///////////////////////////////////////////////////////////
//  RepositorioPersistente.cs
//  Implementation of the Class RepositorioPersistente
//  Generated by Enterprise Architect
//  Created on:      08-abr-2009 11:32:53
//  Original author: Fito
///////////////////////////////////////////////////////////
using System;
using scioPersistentLibrary.excepciones;

namespace scioPersistentLibrary.acceso {
    /// <summary>
    /// En el framework ad-hoc de SCIO, esta clase generica (con parámetros) representa 
    /// el segundo nivel en la jerarquía de repositorios de persistencia. La clase hereda 
    /// de RepostorioGenerico y representa a un repositorio de elementos persistente que 
    /// puede modificarse (acepta lectura/escritura) desde una base de datos, la cual se 
    /// configura aquí vía un mecanismo de ORM (NHibernate según el archivo de config.
    /// hibernate.cfg.xml). Esta clase utiliza, a su vez, una clase 'Persistencia' que 
    /// gestionará la sesión de persistencia para cada acción ejecutada.
    /// </summary>
    public class RepositorioPersistente<T> : RepositorioGenerico<T> where T : EntidadIdentificada<T> {
        /// <summary>
        /// Este método hace persistente (agrega) un objeto del tipo T en 
        /// base de persistencia. Como descansa en un método de la clase
        /// Persistencia, dependerá de esta si finalmente se decide comitear 
        /// ó no. No captura esceciones, sino que las propaga hacia arriba.
        /// </summary>
        /// <param name="objeto">
        /// El objeto del tipo T ha ser persistido.
        /// </param>
        internal static void Add(T objeto) {
            try {
                if (Persistencia.Controlador.hayTransaccion())
                    (Persistencia.Controlador.getSsp()).Save(objeto);
                else {
                    long scn = Persistencia.Controlador.iniciarTransaccion();
                    (Persistencia.Controlador.getSsp()).Save(objeto);
                    Persistencia.Controlador.commitTransaccion(scn);
                }
            } catch (Exception e) {
                Persistencia.Controlador.rollbackTransaccion();
                throw new PersistErrorException("DB-ERROR", e.ToString());
            }
        }

        /// <summary>
        /// Este método hace persistente una modificación del estado de un
        /// objeto del tipo T en base de persistencia. Como descansa en un 
        /// método de la clase Persistencia, dependerá de esta si finalmente se 
        /// decide comitear ó no. No captura esceciones, sino que las propaga 
        /// hacia arriba.
        /// </summary>
        /// <param name="objeto">
        /// El objeto del tipo T cuyas modificaciones han de ser persistidas.
        /// </param>
        internal static void Update(T objeto) {
            try {
                if (Persistencia.Controlador.hayTransaccion())
                    (Persistencia.Controlador.getSsp()).SaveOrUpdate(objeto);
                else {
                    long scn = Persistencia.Controlador.iniciarTransaccion();
                    (Persistencia.Controlador.getSsp()).SaveOrUpdate(objeto);
                    Persistencia.Controlador.commitTransaccion(scn);
                }
            } catch (Exception e) {
                Persistencia.Controlador.rollbackTransaccion();
                throw new PersistErrorException("DB-ERROR", e.ToString());
            }
        }

        /// <summary>
        /// Este método elimina un objeto del tipo T en la base de persistencia. 
        /// Como descansa en un método de la clase Persistencia, dependerá de esta si 
        /// finalmente se decide comitear ó no. No captura esceciones, sino que 
        /// las propaga hacia arriba.
        /// </summary>
        /// <param name="objeto">
        /// El objeto del tipo T ha ser eliminado.
        /// </param>
        internal static void Remove(T objeto) {
            try {
                if (Persistencia.Controlador.hayTransaccion())
                    (Persistencia.Controlador.getSsp()).Delete(objeto);
                else {
                    long scn = Persistencia.Controlador.iniciarTransaccion();
                    (Persistencia.Controlador.getSsp()).Delete(objeto);
                    Persistencia.Controlador.commitTransaccion(scn);
                }
            } catch (Exception e) {
                Persistencia.Controlador.rollbackTransaccion();
                throw new PersistErrorException("DB-ERROR", e.ToString());
            }
        }
    }
}