///////////////////////////////////////////////////////////
//  CUCargaResultado.cs
//  Clase de implementación de CUCargaResultado.
//  Generated by Fito
//  Created on:      08-abr-2009 11:32:54
//  Original author: Fito
///////////////////////////////////////////////////////////

using System;
using System.Windows.Forms;
using scioBaseLibrary;
using scioBaseLibrary.excepciones;
using scioBaseLibrary.helpers;
using scioBaseLibrary.interfases;
using scioParamLibrary.dominio;
using scioParamLibrary.dominio.repos;
using scioPersistentLibrary;
using sgmpro.dominio.configuracion;
using sgmpro.dominio.gestion;
using toolsGestion;

namespace cuListaGestion {
    internal class CUCargaResultado : IControladorCasoUso {
        private ListaGestion _lista;

        /// <summary>
        /// Implementación de la propiedad de la interfaz.
        /// </summary>
        public object Padre { get; set; }

        /// <summary>
        /// Este método es el encargado de caragar el resultado 
        /// a todas las cuentas de la lista de gestion utilizada.
        /// </summary>
        private void cargarResultado(Parametro tipo, string descripcion, DateTime fecha) {
            try {
                if (Padre is PanelListListas && ((PanelListListas) Padre).ParentForm != null)
                    ((PanelListListas) Padre).ParentForm.Cursor = Cursors.WaitCursor;

                foreach (Gestion gestion in _lista.ListaGestiones)
                    if (gestion.isAlive() && !gestion.estaAsignada())
                        saveResultado(gestion, tipo, descripcion, fecha);
            } catch (Exception e) {
                throw new DataErrorException("DATA-SAVENOK", e.ToString());
            } finally {
                if (Padre is PanelListListas && ((PanelListListas) Padre).ParentForm != null)
                    ((PanelListListas) Padre).ParentForm.Cursor = Cursors.Default;
            }
        }

        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        public void saveResultado(Gestion gestion, Parametro tipo, string descripcion, DateTime fecha) {
            if (gestion != null) {
                // Primero graba y actualiza algunas cosas
                try {
                    long scn = Persistencia.Controlador.iniciarTransaccion();
                    gestion.FechaInicio = DateTime.Now;
                    gestion.Resultado = tipo;
                    gestion.ResultadoDesc = descripcion;
                    gestion.ResultadoFecha = fecha;
                    gestion.Usuario = Sistema.Controlador.SecurityService.getUsuario();
                    gestion.Estado = Parametros.GetByClave("ESTADOGESTION.ENPROCESO");
                    gestion.Cuenta.agregarGestion(gestion);
                    gestion.save();
                    Persistencia.Controlador.commitTransaccion(scn);
                } catch (Exception e) {
                    Persistencia.Controlador.rollbackTransaccion();
                    throw new DataErrorException("DATA-SAVENOK", e.ToString());
                }

                // Finalmente ejecuta el resultado y finaliza la gestion
                try {
                    ResultadoGestion.EjecutarResultado(gestion, gestion.Resultado);
                    gestion.Estado = Parametros.GetByClave("ESTADOGESTION.FINALIZADA");
                    gestion.FechaCierre = DateTime.Now;
                    gestion.save();
                } catch (Exception e) {
                    throw new DataErrorException("ERROR-EJECUTAR-RESULTADO", e.ToString());
                }
            }
        }

        #region IControladorCasoUso members
        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        /// <param name="padre">
        /// En éste caso el objeto padre del caso de uso es un Form.
        /// </param>       
        /// <param name="valor">
        /// Aqui se espera que venga: [0](string)=el nombre del caso de uso;
        /// [1](ListaGestion)=La lista con la que se debe trabajar aqui.
        /// </param>
        public virtual bool iniciar(object padre, params object[] valor) {
            try {
                // Crea el panel para asignar el objeto a trabajar
                Padre = padre;

                // Si se pasa un objeto lo toma para trabajar, sino
                // arranca sin nada (o con lo que ya tiene setado)
                if (valor.Length > 0)
                    _lista = (ListaGestion) valor[0];

                // Abre la ventana para las tareas de edición, etc.
                WinCargaResultado vista = new WinCargaResultado();

                // Finalmente muestra la ventana y al luego retorna
                vista.ShowDialog();

                // Al retornar verifica si hay un resultado cargado
                if (vista.Tipo != null)
                    cargarResultado(vista.Tipo, vista.Descripcion, vista.Fecha);

                return true;
            } catch (Exception e) {
                throw new AppErrorException("UCCALLER-NOINIT", e.ToString());
            }
        }

        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        public void aceptarParametros(params object[] parametros) { }
        #endregion
    }
}