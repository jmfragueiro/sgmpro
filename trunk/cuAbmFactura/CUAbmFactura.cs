///////////////////////////////////////////////////////////
//  CUAbmFactura.cs
//  Clase de implementación de CUAbmFactura.
//  Generated by Fito
//  Created on:      08-abr-2009 11:32:54
//  Original author: Fito
///////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Drawing;
using System.Windows.Forms;
using cuAbmFactura.Properties;
using cuAbmFactura.Reportes;
using scioBaseLibrary;
using scioBaseLibrary.excepciones;
using scioBaseLibrary.helpers;
using scioControlLibrary;
using scioControlLibrary.enums;
using scioReportLibrary;
using scioToolLibrary;
using scioToolLibrary.enums;
using sgmpro.dominio.caja;
using sgmpro.dominio.configuracion;

namespace cuAbmFactura {
    /// <summary>
    /// Esta clase hereda de CUAbmGenerico y se encarga de gestionar la 
    /// ventana WinABMV junto con su panelABMV para la entidad Factura.
    /// </summary>
    public class CUAbmFactura : CUAbmGenerico<Factura> {
        #region IControladorEditable Members
        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        public override PanelABMV<Factura> crearPanelEdicion() {
            return new PanelAbmvFactura(this);
        }

        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        public override Icon getIcono() {
            return Resources.factura;
        }

        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        public override void add(params object[] parametros) {
            if (parametros[0] is Entidad)
                ObjetoEnEdicion = new Factura {Cliente = (Entidad)parametros[0]};
            else
                base.add(parametros);
        }

        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        public override void save(params object[] parametros) {
            base.save(parametros);

            // Luego genera los recibos correspondientes (solo si es un
            // tipo de Factura que genera recibo -Valorbool de Tipo = true-)
            if (ObjetoEnEdicion.Tipo.Valorbool)
                generarRecibos();
        }

        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        public override void verify(params object[] parametros) {
            if (ObjetoEnEdicion.Cliente == null)
                throw new DataErrorException("CAMPO-NOK", Mensaje.TextoValidacion("FACTURA-CLIENTE"));

            if (ObjetoEnEdicion.Tipo == null)
                throw new DataErrorException("CAMPO-NOK", Mensaje.TextoValidacion("FACTURA-TIPO"));

            if (ObjetoEnEdicion.Fecha == Fechas.FechaNull || ObjetoEnEdicion.Fecha < Fechas.FechaMin)
                throw new DataErrorException("CAMPO-NOK", Mensaje.TextoValidacion("FACTURA-FECHA"));

            if (String.IsNullOrEmpty(ObjetoEnEdicion.Numero))
                throw new DataErrorException("CAMPO-NOK", Mensaje.TextoValidacion("FACTURA-NUMERO"));
        }
        #endregion

        #region helpers
        /// <summary>
        /// Este método es encargado de generar recibos para los Facturas
        /// generados a partir del Factura cargado. Se intentan generar 3 
        /// recibos, pero puede que el usuario decida no generar alguno.
        /// </summary>
        private void generarRecibos() {
            try {
                CUCaller.CallCU("cuAbmRecibo", this, new object[] {EModoVentana.ADD, ObjetoEnEdicion});
            } catch (Exception e) {
                Sistema.Controlador.logear("ERROR-PAGO-RECIBO", ENivelMensaje.ERROR, e.ToString());
            }
        }

        /// <summary>
        /// Carga el DS, crea el reporte y llama al visor del reporte
        /// para la factura.
        /// En caso de que la factura no contenga los datos mínimos,
        /// devuelve un false. Caso contrario true.
        /// </summary>
        /// <param name="unaFactura"></param>
        /// <param name="items"></param>
        public bool imprimeFacturaA(Factura unaFactura, CUListItemFactura items) {
            try {
                /// Carga el DS
                dsFactura miDs = new dsFactura();
                DataTable lista = (DataTable)items.listList().DataSource;

                /// Si no tiene ninguna línea, la factura no es válida y retorna.
                if (unaFactura == null || lista.Rows.Count == 0) return false;

                for (int i = 0; i < lista.Rows.Count; i++)
                    miDs.Factura.AddFacturaRow(
                        unaFactura.Tipo.Nombre,
                        unaFactura.Numero,
                        unaFactura.Fecha,
                        unaFactura.Cliente.Nombre,
                        unaFactura.Contado,
                        unaFactura.IVA,
                        unaFactura.FechaBaja,
                        Convert.ToInt32(lista.Rows[i]["Numero"]),
                        lista.Rows[i]["Concepto"].ToString(),
                        Convert.ToDouble(lista.Rows[i]["Precio"]),
                        Convert.ToDateTime(lista.Rows[i]["FechaBaja"]),
                        unaFactura.Cliente.Direccion,
                        unaFactura.Cliente.Cuit);

                /// Crea el reporte asociado
                RFacturaA uReFa = new RFacturaA();
                uReFa.SetDataSource(miDs);

                /// Carga el reporte al visualizador y lo muestra
                PanelVisorFactura unPanel = new PanelVisorFactura();
                unPanel.setReporte(uReFa);
                unPanel.Dock = DockStyle.Fill;

                FrmVisualizador unaVentana = new FrmVisualizador("Imprimir Factura A");
                unaVentana.Controls.Add(unPanel);
                unaVentana.ShowDialog();

                return true;
            } catch(Exception e) {
                Sistema.Controlador.mostrar("ERROR-IMPRIMIR-RECIBO", ENivelMensaje.ERROR, e.ToString(), true);
                return false;                
            }
        }
        #endregion
    }
}