///////////////////////////////////////////////////////////
//  ConfigurarGestionTree.cs
//  Clase de control para el tree configurar gestión.
//  Generated by Fito
//  Created on:      08-abr-2009 11:32:54
//  Original author: Fito
///////////////////////////////////////////////////////////
using System;
using System.Drawing;
using System.Windows.Forms;
using cuBandejaEntrada.Properties;
using scioBaseLibrary;
using scioControlLibrary.dominio.repos;
using scioControlLibrary.enums;
using scioControlLibrary.interfaces;
using scioParamLibrary.dominio.repos;
using scioSecureLibrary.dominio;
using scioToolLibrary;
using scioToolLibrary.enums;
using sgmpro.dominio.gestion.repos;

namespace cuBandejaEntrada {
    public class BandejaEntradaTree : IControladorTree {
        //   Atributo que contiene al árbol asociado a la instancia.
        private readonly TreeNode _tree;
        //   Lista de Imágenes para los iconitos del árbol
        private readonly ImageList _listaImagenes;
        //   El usuario actual del sistema (que inicia la ventana).
        private readonly Usuario _usuario;

        /// <summary>
        ///   Contructor de la clase que inicializa el árbol asociado
        ///   y la lista de imagenes que se utilizará dentro del _tree.
        /// </summary>
        public BandejaEntradaTree() {
            _tree = NodoTrees.GetRaizByDescripcion("Gestiones Asociadas").getTree();

            _listaImagenes = new ImageList();
            _listaImagenes.Images.Add(Resources.world);
            _listaImagenes.Images.Add(Resources.bandeja);
            _listaImagenes.Images.Add(Resources.realizadas);
            _listaImagenes.Images.Add(Resources.telefono);
            _listaImagenes.Images.Add(Resources.backoffice);
            _listaImagenes.Images.Add(Resources.postal);
            _listaImagenes.Images.Add(Resources.terreno);
            _listaImagenes.Images.Add(Resources.pendiente);
            _listaImagenes.Images.Add(Resources.arrow_right);

            _usuario = Sistema.Controlador.SecurityService.getUsuario();
        }

        #region Implementation of IControladorTree
        /// <summary>
        ///   Implementación del método de la interfaz.
        /// </summary>
        /// <returns>
        ///   Devuelve el nodo raiz del árbol con todas sus hojas.
        /// </returns>
        public TreeNode getTree() {
            return _tree;
        }

        /// <summary>
        ///   Implementación del método de la interfaz.
        /// </summary>
        public int getImagenSeleccionado() {
            return 8;
        }

        /// <summary>
        ///   Implementación del método de la interfaz.
        /// </summary>
        public ImageList getImagenesTree() {
            return _listaImagenes;
        }

        /// <summary>
        ///   Implementación del método de la interfaz.
        /// </summary>
        public void alEjecutarNodo(TreeNode nodo) {}

        /// <summary>
        ///   Implementación del método de la interfaz.
        /// </summary>
        public void alActualizarListado(TreeNode nodo) {
            actualizarTitulos(_tree);
        }

        /// <summary>
        ///   Implementación del método de la interfaz.
        /// </summary>
        public EModoVentana getModoVista(TreeNode nodo) {
            if (nodo.Tag != null)
                return (nodo.Tag.ToString().Contains(":FINALIZADA"))
                           ? EModoVentana.LIST
                           : EModoVentana.GESTION;
            return EModoVentana.LIST;
        }

        /// <summary>
        ///   Implementación del método de la interfaz.
        /// </summary>
        /// <returns>
        ///   Devuelve el titulo deseado para la ventana del árbol.
        /// </returns>
        public string getTitulo() {
            return Mensaje.TextoMensaje("TITULO-BANDEJA-GESTIONES");
        }

        /// <summary>
        ///   Implementación del método de la interfaz.
        /// </summary>
        public virtual Icon getIcono() {
            return Resources.icono;
        }

        /// <summary>
        ///   Implementación del método de la interfaz.
        /// </summary>
        public void cargarTree(TreeView vista) {
            actualizarTitulos(_tree);
            vista.Nodes.Add(_tree);
            vista.ImageList = getImagenesTree();
        }

        /// <summary>
        ///   Este método actualiza el titulo de un nodo según la
        ///   cantidad de gestiones que se encuentren dentro del mismo.
        /// </summary>
        /// <param name = "nodo">
        ///   El nodo para el cual se desea actualizar el titulo
        /// </param>
        public void actualizarTitulos(TreeNode nodo) {
            foreach (TreeNode tn in nodo.Nodes)
                actualizarTitulos(tn);

            if (nodo.Tag != null) {
                string[] textosNodo = nodo.Tag.ToString().Split(':');
                if (textosNodo.Length > 1)
                    try {
                        string llamado = textosNodo[1];
                        long ctdad;

                        if (llamado.Equals("FINALIZADA"))
                            ctdad = Gestiones.CountFinalizadasByUsuario(_usuario);
                        else if (llamado.Equals("PENDIENTE"))
                            ctdad = Gestiones.CountPendientesByUsuario(_usuario);
                        else
                            ctdad = Gestiones.CountGestionablesByUsuarioTipo(
                                _usuario, Parametros.GetByClave("TIPOGESTION." + llamado));

                        if (nodo.Text.IndexOf('(') > 1)
                            nodo.Text = nodo.Text.Substring(0, (nodo.Text.IndexOf('(') - 1));
                        nodo.Text += " (" + ctdad + ")";
                    } catch (Exception e) {
                        Sistema.Controlador.logear("TREE-NOK", ENivelMensaje.ERROR, e.ToString());
                        nodo.Text += " (ERR)";
                    }
            }
        }
        #endregion
    }
}