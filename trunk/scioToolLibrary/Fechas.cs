///////////////////////////////////////////////////////////
//  Fechas.cs
//  Implementation of the Class Fechas
//  Generated by Enterprise Architect
//  Created on:      08-abr-2009 11:32:54
//  Original author: Fito
///////////////////////////////////////////////////////////
using System;

namespace scioToolLibrary {
    /// <summary>
    /// Esta clase helper encapsula el concepto de fechas válidas para el
    /// sistema. Aqui se definen lo que implica una fecha null y la menor
    /// fecha que el sistema puede contener. Tiene una interface de miembros
    /// estáticos que permiten obtener y trabajr con estos valores.
    /// </summary>
    public sealed class Fechas {
        private static readonly DateTime _FECHAMIN = new DateTime(1753, 01, 01);
        private static readonly DateTime _FECHANULL = new DateTime(1753, 01, 01);
        private static readonly DateTime _FECHADEF = new DateTime(1900, 01, 01);

        /// <summary>
        /// Este método retorna la fecha más antigua que puede 
        /// contener el sistema (hoy 01/01/1900).
        /// </summary>
        /// <returns>
        /// La fecha más antigua representable en el sistema.
        /// </returns>
        public static DateTime FechaMin { get { return _FECHAMIN; } }

        /// <summary>
        /// Este método retorna un valor de fecha que implica 
        /// una fecha nula dentro del sistema (hoy 01/01/0001
        /// que se toma de la definición de NHibernate).
        /// </summary>
        /// <returns>
        /// La representación de fecha nula en el sistema (y en
        /// NHibernate).
        /// </returns>
        public static DateTime FechaNull { get { return _FECHANULL; } }

        /// <summary>
        /// Este método retorna el quivalente a una fecha por
        /// defecto que puede ser utilizada en distintos contextos
        /// y que permite unificar dicho criterio. 
        /// </summary>
        /// <returns>
        /// Un valor de fecha que puede ser tomado como un valor 
        /// por defecto común para el sistema.
        /// </returns>
        public static DateTime FechaDefault { get { return _FECHADEF; } }

        /// <summary>
        /// Asegura que un valor de fecha sea correcta, pq la base
        /// tira un error con un valor muy bajo como el por defecto
        /// de NHibernate para el tipo de dato DateTime(01/01/0001).       
        /// </summary>
        /// <param name="value">
        /// El valor de fecha a ser verificado.
        /// </param>
        /// <returns>
        /// El valor de fecha del argumento corregido.
        /// </returns>
        public static DateTime GetOkDate(DateTime value) {
            return (value < _FECHAMIN) ? _FECHAMIN : value;
        }

        /// <summary>
        /// Este método retorna un valor visualizable para una fecha.
        /// </summary>
        /// <param name="value">
        /// El valor de fecha a ser transformado para visualización.
        /// </param>
        /// <returns>
        /// El valor de fecha del argumento corregido.
        /// </returns>
        public static DateTime? GetVisibleDate(DateTime value) {
            return (value <= _FECHAMIN) ? (DateTime?) null : value;
        }

        /// <summary>
        /// Devuelve la diferencia de días entre fechas
        /// </summary>
        /// <param name="fchMayor">Fecha mayor </param>
        /// <param name="fchMenor">Fecha menor</param>
        /// <returns>Días de diferencia entre la menor y la mayor fecha</returns>
        public static int DiasEntre(DateTime fchMenor, DateTime fchMayor) {
            return (GetOkDate(fchMayor)).Subtract(GetOkDate(fchMenor)).Days;
        }

        /// <summary>
        /// Devuelve el nombre del mes en funcion del nro de mes
        /// </summary>
        /// <param name="nroMes">Numero del mes</param>
        /// <returns>Nombre del mes</returns>
        public static string ToStringMes(int nroMes) {
            switch (nroMes) {
                case 1:
                    return "Enero";
                case 2:
                    return "Febrero";
                case 3:
                    return "Marzo";
                case 4:
                    return "Abril";
                case 5:
                    return "Mayo";
                case 6:
                    return "Junio";
                case 7:
                    return "Julio";
                case 8:
                    return "Agosto";
                case 9:
                    return "Septiembre";
                case 10:
                    return "Octubre";
                case 11:
                    return "Noviembre";
                case 12:
                    return "Diciembre";
                default:
                    return null;
            }
        }

        /// <summary>
        /// Devuelve el siguiente día hábil de una fecha (que 
        /// puede ser el mismo día si la fecha cae en un día hábil).
        /// </summary>
        /// <param name="fecha">
        /// La fecha de la cual se quiere obtener el siguiente día hábil.
        /// </param>
        /// <returns>
        /// El día hábil siguiente más proximo a la fecha (puede ser la misma).
        /// </returns>
        public static DateTime ToDiaHabil(DateTime fecha) {
            if (fecha.DayOfWeek == DayOfWeek.Saturday)
                return fecha.AddDays(2);
            if (fecha.DayOfWeek == DayOfWeek.Sunday)
                return fecha.AddDays(1);
            return fecha;
        }
    }
}