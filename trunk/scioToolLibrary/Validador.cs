///////////////////////////////////////////////////////////
//  Validador.cs
//  Implementation of the Class Validador
//  Generated by Enterprise Architect
//  Created on:      13-abr-2009 17:23:41
//  Original author: Fito
///////////////////////////////////////////////////////////
using System;
using System.Text.RegularExpressions;

namespace scioToolLibrary {
    /// <summary>
    /// Esta es una clase helper que implementa el concepto de validador 
    /// de campos de datos dentro del sistema. Unifica el tratamiento de 
    /// validaciones de algunos tipos de campos dentro de la aplicación. 
    /// </summary>
    public class Validador {
        /// <summary>
        /// Este método valida un cuit y su digito verificador.
        /// </summary>
        /// <param name="origen">
        /// El cuit origen a validar (como una cadena).
        /// </param>
        /// <returns>
        /// Retorna 'true' si pasa la validacion ó 'false' si no la pasa.
        /// </returns>
        public static bool ValidarCUIT(string origen) {
            try {
                // Por las dudas primero elimnina los guiones
                string cuit = origen.Replace("-", string.Empty);

                // Primero verifica la longitud
                if (cuit.Length != 11)
                    return false;

                // Luego valida los valores de inicio del cuit
                int prefix = int.Parse(cuit.Substring(0, 2));
                if (prefix != 20 && prefix != 23 && prefix != 24
                    && prefix != 27 && prefix != 30 && prefix != 33)
                    return false;

                // Luego valida el digito verificador
                int[] mult = new[] {5, 4, 3, 2, 7, 6, 5, 4, 3, 2};
                char[] nums = cuit.ToCharArray();
                int total = 0;
                for (int i = 0; i < mult.Length; i++)
                    total += int.Parse(nums[i].ToString()) * mult[i];
                int resto = total % 11;
                int digito = resto == 0 ? 0 : resto == 1 ? 9 : 11 - resto;
                return (digito == int.Parse(cuit.Substring(10)));
            } catch {
                return false;
            }
        }

        /// <summary>
        /// Este método valida un DNI.
        /// </summary>
        /// <param name="origen">
        /// El DNI origen a validar (como una cadena).
        /// </param>
        /// <returns>
        /// Retorna 'true' si pasa la validacion ó 'false' si no la pasa.
        /// </returns>
        public static bool ValidarDNI(string origen) {
            try {
                long valor = Convert.ToInt64(origen);
                return (valor >= 1000000 && valor <= 99000000);
            } catch {
                return false;
            }
        }

        /// <summary>
        /// Este método valida una dirección de email.
        /// </summary>
        /// <param name="origen">
        /// El email origen a validar (como una cadena).
        /// </param>
        /// <returns>
        /// Retorna 'true' si pasa la validacion ó 'false' si no la pasa.
        /// </returns>
        public static bool ValidarEmail(string origen) {
            try {
                const string EXPRESION = "\\w+([-+.']\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*";

                if (Regex.IsMatch(origen, EXPRESION))
                    return Regex.Replace(origen, EXPRESION, string.Empty).Length == 0;

                return false;
            } catch {
                return false;
            }
        }

        /// <summary>
        /// Este método valida un valor para el día en una configuración de 
        /// crontab (como la que se usa para definir periodicidad de un job).        
        /// </summary>
        /// <param name="origen">
        /// El texto origen a validar (como una cadena).
        /// </param>
        /// <returns>
        /// Retorna 'true' si pasa la validacion ó 'false' si no la pasa.
        /// </returns>
        public static bool ValidarDiasCrontab(string origen) {
            try {
                string expresion = origen.Split(' ')[3];

                if (expresion.Equals("?") || expresion.Equals("*"))
                    return true;

                int ini = 0;
                string[] grupos = expresion.Split(';');
                foreach (string grupo in grupos) {
                    string[] diff = grupo.Split('-');
                    foreach (string s in diff) {
                        int act = Convert.ToInt32(s);
                        if (ini >= act || act > 31)
                            throw new Exception();
                        ini = act;
                    }
                }
                return true;
            } catch {
                return false;
            }
        }
    }
}