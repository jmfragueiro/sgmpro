///////////////////////////////////////////////////////////
//  CUListPagos.cs
//  Clase de implementación de CUListPagos.
//  Generated by Fito
//  Created on:      08-abr-2009 11:32:54
//  Original author: Fito
///////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Drawing;
using System.Windows.Forms;
using cuAbmPago.Properties;
using scioBaseLibrary;
using scioBaseLibrary.excepciones;
using scioControlLibrary;
using scioControlLibrary.enums;
using scioPersistentLibrary.acceso;
using scioPersistentLibrary.interfases;
using scioPersistentLibrary.orden;
using scioSecureLibrary.enums;
using scioToolLibrary;
using scioToolLibrary.enums;
using sgmpro.dominio.configuracion;

namespace cuAbmPago {
    /// <summary>
    /// Esta clase hereda de CUListGenerico y se encarga de 
    /// gestionar un PanelListABMV para la entidad Pago.
    /// </summary>
    public class CUListPagosAll : CUPreviewGenerico<Pago> {
        /// <summary>
        /// Constructor de la clase que inicializa elementos internos.
        /// </summary>
        public CUListPagosAll() {
            ControlEditable = new CUAbmPago();

            ColsInvisibles.Add("Imputaciones");
            ColsInvisibles.Add("Recibos");

            Ordenamiento.Add(Orden.Desc("Fecha"));

            ModoListado = EModoListado.RELACIONAL;
        }

        #region IControladorPreview Members
        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        public override string getTitulo() {
            return Mensaje.TextoMensaje("TITULO-ABMV-PAGO");
        }

        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        public override Icon getIcono() {
            return Resources.pago;
        }
        #endregion

        #region IControladorListable Members
        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        protected override PanelPreview<Pago> crearPanelPreview() {
            return new PanelPreviewPago(ControlEditable);
        }

        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        public override BindingSource listList(params object[] parametros) {
            try {
                // Agrega el filtro de base que debe utilizarse (para, por 
                // ejemplo, obtener solo el detail adecuado de un master)
                ICriterioConsulta master = getFiltroMaster();
                if (!Filtros.Contains(master))
                    Filtros.Add(master);

                // Ejecuta el filtro y obtiene resultados de la base
                _bs = _bs ?? new BindingSource();

                _bs.DataSource = (ModoListado == EModoListado.OBJETO)
                                     ? CollectionHelper.ConvertTo(
                                           RepositorioGenerico<Pago>.GetByCriteria(false, Filtros, Ordenamiento))
                                     : RepositorioGenerico<Pago>.SelectByCriteria(false, Filtros, Ordenamiento);

                Cuenta = ((DataTable)_bs.DataSource).Rows.Count;
                return _bs;
            } catch (Exception e) {
                throw new VistaErrorException("DATA-LISTNOK", e.ToString());
            }
        }

        /// <summary>
        /// Implementación del método de la interfaz.
        /// Solo deja borrar un pago de fecha menor a hoy si tiene
        /// el permiso tipo TOTAL para ENTIDAD.PAGO.
        /// </summary>
        public override void listRemove(params object[] parametros) { 
            if (!Sistema.Controlador.SecurityService
                .usuarioActualPoseePermiso("ENTIDAD.PAGO", ETipoPermiso.TOTAL)
                && _panelListado.getObjetoActual().Fecha < DateTime.Today)
                throw new VistaErrorException("PERMISO-NOK");

            base.listRemove(parametros);
            Sistema.Controlador.mostrar("PAGO-ANULAR-OK", ENivelMensaje.INFORMACION, null, false);
        }
        #endregion
    }
}