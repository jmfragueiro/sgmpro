///////////////////////////////////////////////////////////
//  CUAbmPago.cs
//  Clase de implementación de CUAbmPago.
//  Generated by Fito
//  Created on:      08-abr-2009 11:32:54
//  Original author: Fito
///////////////////////////////////////////////////////////
using System;
using System.Collections.Generic;
using System.Drawing;
using cuAbmPago.Properties;
using scioBaseLibrary;
using scioBaseLibrary.excepciones;
using scioBaseLibrary.helpers;
using scioControlLibrary;
using scioControlLibrary.enums;
using scioParamLibrary.dominio;
using scioParamLibrary.dominio.repos;
using scioPersistentLibrary;
using scioToolLibrary;
using scioToolLibrary.enums;
using sgmpro.dominio.configuracion;
using sgmpro.dominio.configuracion.repos;
using toolsGestion;

namespace cuAbmPago {
    /// <summary>
    /// Esta clase hereda de CUAbmGenerico y se encarga de gestionar la 
    /// ventana WinABMV junto con su panelABMV para la entidad Pago.
    /// </summary>
    public class CUAbmPago : CUAbmGenerico<Pago> {
        private bool _puedeUnificar;
        private readonly Parametro _honorario = Parametros.GetByClave("TIPOPAGO.HONORARIOS");
        private readonly Parametro _gastos = Parametros.GetByClave("TIPOPAGO.GASTOS");
        private readonly Parametro _dorigen = Parametros.GetByClave("CONCEPTODEUDA.ORIGEN");
        private readonly Parametro _dgastos = Parametros.GetByClave("CONCEPTODEUDA.GASTO");
        private readonly Parametro _dhonorario = Parametros.GetByClave("CONCEPTODEUDA.HONORARIO");
        private readonly List<Pago> _pagos = new List<Pago>();

        #region IControladorEditable Members
        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        public override PanelABMV<Pago> crearPanelEdicion() {
            return new PanelAbmvPago(this);
        }

        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        public override Icon getIcono() {
            return Resources.pago;
        }

        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        public override void add(params object[] parametros) {
            if (parametros[0] is Cuenta)
                ObjetoEnEdicion = new Pago {Cuenta = (Cuenta)parametros[0]};
            else
                base.add(parametros);
        }

        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        public override void save(params object[] parametros) {
            _puedeUnificar = ((PanelAbmvPago)PanelEdicion).puedeUnificar();
            double ivaHonorario = ((PanelAbmvPago)PanelEdicion).getIVAHonorarios();
            IList<Deuda> deudas = Deudas.OrdenarPorFecha(((PanelAbmvPago)PanelEdicion).getCuotas());
            Pago pagoHonorario = null;

            // Primero calcula los montos de los pagos a ingresar
            double cap =  Math.Round(ObjetoEnEdicion.Capital, 2);
            double itr = Math.Round(ObjetoEnEdicion.Interes, 2);
            double hon = Math.Round(ObjetoEnEdicion.Honorarios, 2);
            double gas = Math.Round(ObjetoEnEdicion.Gastos, 2);

            // Luego crea los pagos a utilizar que hagan falta
            if ((gas > 0) && _puedeUnificar) {
                Pago p = ObjetoEnEdicion.transformarPago(ObjetoEnEdicion.Tipo, new[] { cap, itr, 0, gas });
                p.Descripcion += " (**INCLUYE GASTOS**)";
                _pagos.Add(p);
            } else if ((cap + itr) > 0)
                _pagos.Add(ObjetoEnEdicion.transformarPago(ObjetoEnEdicion.Tipo, new[] { cap, itr, 0, 0 }));
                    
            if (hon > 0)
                _pagos.Add((pagoHonorario = ObjetoEnEdicion.transformarPago(_honorario, new[] { 0, 0, hon, 0 })));

            if ((gas > 0) && !_puedeUnificar)
                _pagos.Add(ObjetoEnEdicion.transformarPago(_gastos, new[] { 0, 0, 0, gas }));

            // Entonces inicia la aplicación de los pagos
            try {
                long scn = Persistencia.Controlador.iniciarTransaccion();
                foreach (Pago pago in _pagos) {
                    // Primero grabo el pago a aplicar (por las dudas)
                    pago.save();

                    // Luego paga efectivamente las deudas que aún no estan 
                    // canceladas (en orden segun fecha) hasta que el monto 
                    // sea cero o igual al IVA que se "agregó" únicamente a 
                    // los honorarios que se pudieron haber cargado al pagar.
                    foreach (Deuda deuda in deudas) {
                        if (!deuda.estaCancelada()) {
                            // Obtiene la cuenta y verifica si debe agregar 
                            // deuda a pagarse (para los nuevos punitorios)
                            double saldo = (deuda.Cuenta != null)
                                               ? deuda.Cuenta.ingresarPago(pago, deuda)
                                               : deuda.Convenio.ingresarPago(pago, deuda);

                            // Si no queda saldo en el pago entonces sale
                            if (saldo <= 0 || (pago.Tipo.Equals(_honorario) && saldo <= ivaHonorario))
                                break;
                        }
                    }
                }

                // Por ultimo agrega el iva a los honorarios al pago
                if (pagoHonorario != null) {
                    pagoHonorario.Honorarios += ivaHonorario;
                    pagoHonorario.save();
                }
                Persistencia.Controlador.commitTransaccion(scn);
            } catch (Exception e) {
                Persistencia.Controlador.rollbackTransaccion();
                throw new DataErrorException("DATA-SAVENOK", e.ToString());
            }

            // Luego genera los recibos correspondientes (solo si es un
            // tipo de pago que genera recibo -Valorbool de Tipo = true-)
            if (ObjetoEnEdicion.Tipo.Valorbool)
                generarRecibos();

            // Finalmente ejecuta el resultado de aplicar el Pago actual
            try {
                long scn = Persistencia.Controlador.iniciarTransaccion();
                ResultadoPago.EjecutarResultado(ObjetoEnEdicion);
                Persistencia.Controlador.commitTransaccion(scn);
            } catch (Exception e) {
                Persistencia.Controlador.rollbackTransaccion();
                throw new DataErrorException("DATA-SAVENOK", e.ToString());
            }
        }

        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        public override void verify(params object[] parametros) {
            if (((PanelAbmvPago)PanelEdicion).getCuotas().Count <= 0)
                throw new DataErrorException("CAMPO-NOK", Mensaje.TextoValidacion("PAGO-DEUDAS"));

            if (ObjetoEnEdicion.Total <= 0)
                throw new DataErrorException("CAMPO-NOK", Mensaje.TextoValidacion("PAGO-IMPORTE"));

            if (ObjetoEnEdicion.Capital < 0)
                throw new DataErrorException("CAMPO-NOK", Mensaje.TextoValidacion("PAGO-CAPITAL"));

            if (ObjetoEnEdicion.Interes < 0)
                throw new DataErrorException("CAMPO-NOK", Mensaje.TextoValidacion("PAGO-INTERES"));

            if (ObjetoEnEdicion.Honorarios < 0)
                throw new DataErrorException("CAMPO-NOK", Mensaje.TextoValidacion("PAGO-HONORARIO"));

            if (ObjetoEnEdicion.Gastos < 0)
                throw new DataErrorException("CAMPO-NOK", Mensaje.TextoValidacion("PAGO-GASTO"));

            if (ObjetoEnEdicion.Cuenta == null)
                throw new DataErrorException("CAMPO-NOK", Mensaje.TextoValidacion("PAGO-CUENTA"));

            if (string.IsNullOrEmpty(ObjetoEnEdicion.Descripcion))
                throw new DataErrorException("CAMPO-NOK", Mensaje.TextoValidacion("PAGO-DESC"));

            if (ObjetoEnEdicion.Tipo == null)
                throw new DataErrorException("CAMPO-NOK", Mensaje.TextoValidacion("PAGO-TIPO"));

            if (ObjetoEnEdicion.FormaPago == null)
                throw new DataErrorException("CAMPO-NOK", Mensaje.TextoValidacion("PAGO-FORMA"));

            if (ObjetoEnEdicion.Fecha == Fechas.FechaNull || ObjetoEnEdicion.Fecha < Fechas.FechaMin)
                throw new DataErrorException("CAMPO-NOK", Mensaje.TextoValidacion("PAGO-FECHA"));

            if (ObjetoEnEdicion.FechaUMod == Fechas.FechaNull || ObjetoEnEdicion.FechaUMod < Fechas.FechaMin)
                throw new DataErrorException("CAMPO-NOK", Mensaje.TextoValidacion("PAGO-FECHA-INGRESO"));

            // Solo controla si el pago no es mayor a la deuda
            double cap = 0, inte = 0, hon = 0, gas = 0;
            foreach (Deuda deuda in Deudas.OrdenarPorFecha(((PanelAbmvPago)PanelEdicion).getCuotas())) {
                cap += deuda.Capital;
                inte += deuda.Interes;
                hon += deuda.Honorarios;
                gas += deuda.Gastos;
            }
            if (Math.Round(cap, 2) < Math.Round(ObjetoEnEdicion.Capital, 2) ||
                Math.Round(inte, 2) < Math.Round(ObjetoEnEdicion.Interes, 2) ||
                Math.Round(hon, 2) < Math.Round(ObjetoEnEdicion.Honorarios, 2) ||
                Math.Round(gas, 2) < Math.Round(ObjetoEnEdicion.Gastos, 2))
                throw new DataErrorException("CAMPO-NOK", Mensaje.TextoValidacion("PAGO-VS-DEUDA"));
        }
        #endregion

        #region IControladorCasoUso members
        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        public override void aceptarParametros(params object[] parametros) {
            base.aceptarParametros(parametros);

            // Si le pasan la cuenta se la setea a la deuda
            if (parametros.Length > 2)
                ObjetoEnEdicion.Cuenta = (Cuenta)parametros[2];
        }
        #endregion

        #region helpers
        /// <summary>
        /// Este método es encargado de generar recibos para los pagos
        /// generados a partir del pago cargado. Se intentan generar 3 
        /// recibos, pero puede que el usuario decida no generar alguno.
        /// </summary>
        private void generarRecibos() {
            foreach (Pago pago in _pagos) {
                Parametro concepto = _dorigen;
                double importe = Math.Round((pago.Capital + pago.Interes), 2);
                if (_puedeUnificar)
                    importe += Math.Round(pago.Gastos, 2);

                if (pago.Tipo.Equals(_honorario)) {
                    concepto = _dhonorario;
                    importe = Math.Round(pago.Honorarios, 2);
                } else if (pago.Tipo.Equals(_gastos)) {
                    concepto = _dgastos;
                    importe = Math.Round(pago.Gastos, 2);
                }

                Recibo rc = new Recibo {
                    Concepto = concepto, 
                    Fecha = pago.Fecha, 
                    Importe = importe, 
                    Pago = pago
                };

                try {
                    CUCaller.CallCU("cuAbmRecibo", this, new object[] {EModoVentana.ADD, rc});
                } catch (Exception e) {
                    Sistema.Controlador.logear("ERROR-PAGO-RECIBO", ENivelMensaje.ERROR, e.ToString());
                }
            }
        }
        #endregion
    }
}