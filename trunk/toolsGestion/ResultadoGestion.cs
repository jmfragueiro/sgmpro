///////////////////////////////////////////////////////////
//  ResultadoGestion.cs
//  Implementation of the Class ResultadoGestion
//  Generated by Enterprise Architect
//  Created on:      20-abr-2009 16:57:18
//  Original author: Fito
///////////////////////////////////////////////////////////
using System;
using scioBaseLibrary;
using scioBaseLibrary.excepciones;
using scioParamLibrary.dominio;
using scioParamLibrary.dominio.repos;
using scioToolLibrary;
using sgmpro.dominio.configuracion;
using sgmpro.dominio.gestion;

namespace toolsGestion {
    /// <summary>
    /// Esta clase representa la semántica de aplicar el resultado de una 
    /// Gestión realizada sobre una Cuenta morosa. Las gestiones implican 
    /// un contacto, la ejecución de alguna acción sobre una cuenta, y se 
    /// decanta en un tipo de resultado predefinido. Clase NO persistente.
    /// IMPORTANTE: el resultado de una gestion se ejecuta ANTES!!! de que 
    /// la misma se cierre y se agregue a la cuenta asociada. Esto es así
    /// para que, si el resultado falla, la gestion no se modifique y no
    /// se termine. IMPORTANTE2: POR ESTO ULTIMO, PRIMERO DEBE VERIFICAR 
    /// EL RESULTADO Y QUE DEBE Y PUEDE EJECUTARSE Y RECIEN DESPUES HACER 
    /// CAMBIOS!!!!!!!!!!!.
    /// </summary>
    public class ResultadoGestion {
        /// <summary>
        /// Este método representa el punto de entrada a la api de Resultado de
        /// Gestión. Se maneja como un método estático que obtiene todos lo que
        /// se necesita desde sus párametros y con ello define qué resultado se
        /// debe ejecutar y aplicar las acciones asociadas al mismo. Aqui no se 
        /// capturan las excepciones para se que vuelvan a la clase de gestión.
        /// IMPORTANTE: el resultado de una gestion se ejecuta ANTES!!! de que 
        /// la misma se cierre y se agregue a la cuenta asociada. Esto es así
        /// para que, si el resultado falla, la gestion no se modifique y no
        /// se termine. IMPORTANTE2: POR ESTO ULTIMO, PRIMERO DEBE VERIFICAR 
        /// EL RESULTADO Y QUE DEBE Y PUEDE EJECUTARSE Y RECIEN DESPUES HACER 
        /// CAMBIOS!!!!!!!!!!!.
        /// </summary>
        /// <param name="gestion">
        /// La gestión que se esta ejecutando.
        /// </param>
        /// <param name="resultado">
        /// El resultado que se desea ejecutar para la gestión.
        /// </param>
        public static void EjecutarResultado(Gestion gestion, Parametro resultado) {
            // Primero se verifica si debe agregarse un gasto por esto
            if (gestion.Tipo.Valordouble > 0)
                AgregarGastoGestion(gestion);

            // Luego se ejecuta la parte propia de cada resultado
            if (resultado.Clave.Equals("RESULTADOGESTION.NOCONTACTADO"))
                EjecutarResultadoNoContactado(gestion);
            else if (resultado.Clave.Equals("RESULTADOGESTION.PROMESAPAGO"))
                EjecutarResultadoPromesaPago(gestion);
            else if (resultado.Clave.Equals("RESULTADOGESTION.PROMESAPAGOCUOTA"))
                EjecutarResultadoPromesaPagoCuota(gestion);
            else if (resultado.Clave.Equals("RESULTADOGESTION.PROMESAVISITA"))
                EjecutarResultadoPromesaVisita(gestion);
            else if (resultado.Clave.Equals("RESULTADOGESTION.PROMESASUCURSAL"))
                EjecutarResultadoPromesaPagoSucursal(gestion);
            else if (resultado.Clave.Equals("RESULTADOGESTION.ALTACONVENIO"))
                EjecutarResultadoAltaConvenio(gestion);
            else if (resultado.Clave.Equals("RESULTADOGESTION.FALLECIDO"))
                EjecutarResultadoDeudorFallecido(gestion);
            else if (resultado.Clave.Equals("RESULTADOGESTION.SINVOLUNTAD"))
                EjecutarResultadoSinVoluntad(gestion);
            else if (resultado.Clave.Equals("RESULTADOGESTION.AGOTADA"))
                EjecutarResultadoAgotada(gestion);
            else if (resultado.Clave.Equals("RESULTADOGESTION.SOLICITACONTACTO"))
                EjecutarResultadoSolicitaContacto(gestion);
            else if (resultado.Clave.Equals("RESULTADOGESTION.REINTENTARCONTACTO"))
                EjecutarResultadoReintentoContacto(gestion);
            else if (resultado.Clave.Equals("RESULTADOGESTION.CONTACTOINVALIDO"))
                EjecutarResultadoContactoInvalido(gestion);
            else if (resultado.Clave.Equals("RESULTADOGESTION.POSITIVA"))
                EjecutarResultadoBusquedaPositiva(gestion);
            else if (resultado.Clave.Equals("RESULTADOGESTION.EMBARGO"))
                EjecutarResultadoCuentaConEmbargo(gestion);
            else if (resultado.Clave.Equals("RESULTADOGESTION.INSOLVENTE"))
                EjecutarResultadoInsolvente(gestion);
        }

        /// <summary>
        /// Este método se encarga de verificar y agergar, si debe, el
        /// gasto que corresponda por la ejecución de la gestión actual.
        /// </summary>
        /// <param name="gestion">
        /// La gestión que se esta ejecutando.
        /// </param>
        private static void AgregarGastoGestion(Gestion gestion) {
            if (gestion.Tipo.Valordouble > 0) {
                Deuda d = new Deuda(DateTime.Now, Parametros.GetByClave("CONCEPTODEUDA.GASTO"), 
                                Parametros.GetByClave("DETALLEDEUDA.NINGUNO"), false,
                                    "GASTO POR GESTION " + gestion.Tipo, 0, 0, 0, 
                                        Math.Round(gestion.Tipo.Valordouble, 2), gestion.Cuenta, null, 0);

                // TODO: VERIFICAR SI SE DEBE GRABAR LA DEUDA CREADA POR GESTION EN AGREGARGASTOGESTION()
                //d.save();
                gestion.Cuenta.agregarDeuda(d);
            }
        }

        #region resultados
        /// <summary>
        /// Ejecución de un resultado de no contactado, donde verifica que si
        /// se supero el valor del parametro MAXIMAGESTIONESNC entonces debe
        /// pasarse la cuenta al estado 'NO SE UBICA' (cuenta valorlong-1 pq
        /// se agrega esta gestion tb obvio).
        /// </summary>
        public static void EjecutarResultadoNoContactado(Gestion gestion) {
            //if (gestion.Cuenta.Estado.Clave.Contains("JUICIO")) 
            //    return;

            //Parametro maxnc = Parametros.GetByClave("GESTION.MAXIMAGESTIONESNC");

            //for (int i = 0; i <= (maxnc.Valorlong - 1); i++) {
            //    Gestion ges = gestion.Cuenta.getGestionRealizadaAnteriorSinRefresh(i);
            //    if (ges == null || !ges.Resultado.Equals(gestion.Resultado))
            //        return;
            //}

            //gestion.Cuenta.setearEstado(Parametros.GetByClave("ESTADOCUENTA.NO-SE-UBICA"));
        }

        /// <summary>
        /// Ejecución de un resultado de promesa pago parcial (antes de firmar
        /// un plan) o de refinanciacion.
        /// </summary>
        public static void EjecutarResultadoPromesaPago(Gestion gestion) {
            gestion.Cuenta.FechaElegible =
                gestion.ResultadoFecha.AddDays((Parametros.GetByClave("GESTION.DIASGRACIA")).Valorlong);

            //gestion.Cuenta.setearEstado(
            //    gestion.Cuenta.Estado.Clave.Contains("JUICIO") 
            //        ? Parametros.GetByClave("ESTADOCUENTA.JUICIO-CON-PROMESA") 
            //        : Parametros.GetByClave("ESTADOCUENTA.PROMESA-DE-PAGO"), 
            //        "Fecha de promesa:" + gestion.ResultadoFecha.ToShortDateString());
        }

        /// <summary>
        /// Ejecución de un resultado de promesa de pago de una cuota de un plan.
        /// </summary>
        public static void EjecutarResultadoPromesaPagoCuota(Gestion gestion) {
            gestion.Cuenta.FechaElegible =
                gestion.ResultadoFecha.AddDays((Parametros.GetByClave("GESTION.DIASGRACIA")).Valorlong);
        }

        /// <summary>
        /// Ejecución de un resultado de promesa de visita al estudio.
        /// </summary>
        public static void EjecutarResultadoPromesaVisita(Gestion gestion) {
            gestion.Cuenta.FechaElegible =
                gestion.ResultadoFecha.AddDays((Parametros.GetByClave("GESTION.DIASGRACIA")).Valorlong);
        }

        /// <summary>
        /// Ejecución de un resultado de promesa de pago parcial en sucrusal
        /// (antes de firmar un plan).
        /// </summary>
        public static void EjecutarResultadoPromesaPagoSucursal(Gestion gestion) {
            gestion.Cuenta.FechaElegible =
                gestion.ResultadoFecha.AddDays((Parametros.GetByClave("GESTION.DIASGRACIA")).Valorlong);

            //gestion.Cuenta.setearEstado(
            //    gestion.Cuenta.Estado.Clave.Contains("JUICIO")
            //        ? Parametros.GetByClave("ESTADOCUENTA.JUICIO-CON-PROMESA")
            //        : Parametros.GetByClave("ESTADOCUENTA.PROMESA-DE-PAGO"),
            //        "Fecha de promesa:" + gestion.ResultadoFecha.ToShortDateString());
        }

        /// <summary>
        /// Ejecución de un resultado de alta de convenio.
        /// </summary>
        private static void EjecutarResultadoAltaConvenio(Gestion gestion) {
            gestion.Estado = Parametros.GetByClave("ESTADOGESTION.FINALIZADA");
            gestion.Usuario = Sistema.Controlador.SecurityService.getUsuario();
            gestion.Resultado = Parametros.GetByClave("RESULTADOGESTION.ALTACONVENIO");
            gestion.FechaInicio = gestion.FechaInicio.Equals(Fechas.FechaNull) ? DateTime.Now : gestion.FechaInicio;
            gestion.FechaUMod = DateTime.Now;
            gestion.FechaCierre = DateTime.Now;           
            gestion.save();

            gestion.Cuenta.ListaAsignada = null;
            gestion.Cuenta.FechaElegible =
                gestion.Cuenta.ConvenioActivo.getPrimeraCuota().FechaVencimiento.AddDays(
                    (Parametros.GetByClave("GESTION.DIASGRACIA"))
                        .Valorlong);
            gestion.Cuenta.save();
        }

        /// <summary>
        /// Ejecución de un resultado de deudor fallecido.
        /// </summary>
        private static void EjecutarResultadoDeudorFallecido(Gestion gestion) {
            //gestion.Cuenta.setearEstado(Parametros.GetByClave("ESTADOCUENTA.DEUDOR-FALLECIDO"));
        }

        /// <summary>
        /// Ejecución de un resultado de contacto inválido.
        /// </summary>
        private static void EjecutarResultadoContactoInvalido(Gestion gestion) {
            //if (!gestion.Cuenta.Estado.Clave.Contains("JUICIO"))
            //    gestion.Cuenta.setearEstado(Parametros.GetByClave("ESTADOCUENTA.BUSQUEDA"));
        }

        /// <summary>
        /// Ejecución de un resultado de contacto inválido.
        /// </summary>
        private static void EjecutarResultadoBusquedaPositiva(Gestion gestion) {
            //if (!gestion.Cuenta.Estado.Clave.Contains("JUICIO"))
            //    gestion.Cuenta.setearEstado(Parametros.GetByClave("ESTADOCUENTA.CONTACTO"));
        }

        /// <summary>
        /// Ejecución de un resultado de deudor sin voluntad de pago.
        /// </summary>
        private static void EjecutarResultadoSinVoluntad(Gestion gestion) {
            //gestion.Cuenta.setearEstado(Parametros.GetByClave("ESTADOCUENTA.SIN-VOLUNTAD-DE-PAGO"));
        }

        /// <summary>
        /// Ejecución de un resultado de gestion agotada.
        /// </summary>
        private static void EjecutarResultadoAgotada(Gestion gestion) {
            //gestion.Cuenta.setearEstado(Parametros.GetByClave("ESTADOCUENTA.SIN-VOLUNTAD-DE-PAGO"));
        }

        /// <summary>
        /// Ejecución de un resultado de gestion agotada.
        /// </summary>
        private static void EjecutarResultadoInsolvente(Gestion gestion) {
            //gestion.Cuenta.setearEstado(Parametros.GetByClave("ESTADOCUENTA.INSOLVENTE"));
        }

        /// <summary>
        /// Ejecución de un resultado de gestion de solicitud de contacto por 
        /// parte del deudor. Se controla que no se supere el maximo de repet.
        /// consecutiva de este resultado segun el parametro MAXREPGESTIONES.SC.
        /// </summary>
        private static void EjecutarResultadoSolicitaContacto(Gestion gestion) {
            Parametro maxsc = Parametros.GetByClave("GESTION.MAXREPGESTIONES.SC");

            for (int i = 0; i <= (maxsc.Valorlong-1); i++) {
                Gestion ges = gestion.Cuenta.getGestionRealizadaAnteriorSinRefresh(i);
                if (ges == null || !ges.Resultado.Equals(gestion.Resultado)) {
                    if (gestion.ResultadoFecha.Date == DateTime.Today.Date)
                        gestion.Estado = Parametros.GetByClave("ESTADOGESTION.PENDIENTE");
                    else
                        gestion.Cuenta.FechaElegible = gestion.ResultadoFecha.Date;
                    return;
                }
            }

            throw new DataErrorException("ERROR-RESULTADO-REPETIDO");
        }

        /// <summary>
        /// Ejecución de un resultado de gestion de reintento de contacto con 
        /// el propio deudor. Se controla que no se supere el maximo de repet.
        /// consecutiva de este resultado segun el parametro MAXREPGESTIONES.SC.
        /// </summary>
        private static void EjecutarResultadoReintentoContacto(Gestion gestion) {
            Parametro maxrc = Parametros.GetByClave("GESTION.MAXREPGESTIONES.RC");

            for (int i = 0; i <= (maxrc.Valorlong-1); i++) {
                Gestion ges = gestion.Cuenta.getGestionRealizadaAnteriorSinRefresh(i);
                if (ges == null || !ges.Resultado.Equals(gestion.Resultado)) {
                    if (gestion.ResultadoFecha.Date == DateTime.Today.Date)
                        gestion.Estado = Parametros.GetByClave("ESTADOGESTION.PENDIENTE");
                    else
                        gestion.Cuenta.FechaElegible = gestion.ResultadoFecha.Date;
                    return;
                }
            }

            throw new DataErrorException("ERROR-RESULTADO-REPETIDO");
        }

        /// <summary>
        /// Ejecución de un resultado de cuenta con embargo.
        /// </summary>
        private static void EjecutarResultadoCuentaConEmbargo(Gestion gestion) {
            //gestion.Cuenta.setearEstado(Parametros.GetByClave("ESTADOCUENTA.CUENTA-CON-EMBARGO"));
        }
        #endregion resultados
    }
}