///////////////////////////////////////////////////////////
//  ResultadoPago.cs
//  Implementation of the Class ResultadoPago
//  Generated by Enterprise Architect
//  Created on:      20-abr-2009 16:57:18
//  Original author: Fito
///////////////////////////////////////////////////////////
using scioParamLibrary.dominio.repos;
using sgmpro.dominio.configuracion;

namespace toolsGestion {
    /// <summary>
    /// Esta clase representa la semántica de aplicar el pago.Tipo de una acción 
    /// (gestión) de Pago realizada sobre una Cuenta morosa. Los pagos implican 
    /// también un contacto, la ejecución de alguna acción sobre una cuenta y se 
    /// decanta en un tipo de pago.Tipo predefinido. Clase NO persistente.
    /// IMPORTANTE: el pago.Tipo de un Pago se ejecuta DESPUES!! de que el mismo 
    /// se ha cerrado y agregado a la cuenta asociada. Esto es así para que, si
    /// si la aplicación del pago.Tipo falla, el pago no se modifique y ya quede
    /// aplicado. IMPORTANTE2: NO OBSTANTE, COMBIENE VERIFICAR EL RESULTADO Y QUE 
    /// DEBE Y PUEDE EJECUTARSE Y RECIEN DESPUES HACER CAMBIOS!!!!!!!!!!!.
    /// </summary>
    public class ResultadoPago {
        /// <summary>
        /// Este método representa el punto de entrada a la api de Resultado de Pago.
        /// Se maneja como un método estático que obtiene todos lo que se necesita 
        /// desde sus párametros y con ello define qué pago.Tipo se debe ejecutar y 
        /// aplicar las acciones asociadas al mismo. Aqui no se capturan excepciones 
        /// para se que vuelvan a la clase de gestión.
        /// IMPORTANTE: el pago.Tipo de un Pago se ejecuta DESPUES!! de que el mismo 
        /// se ha cerrado y agregado a la cuenta asociada. Esto es así para que, si
        /// si la aplicación del pago.Tipo falla, el pago no se modifique y ya quede
        /// aplicado. IMPORTANTE2: NO OBSTANTE, COMBIENE VERIFICAR EL RESULTADO Y QUE 
        /// DEBE Y PUEDE EJECUTARSE Y RECIEN DESPUES HACER CAMBIOS!!!!!!!!!!!.
        /// </summary>
        /// <param name="pago">
        /// El pago cuyo ingreso genera la ejecución de un pago.Tipo.
        /// </param>
        public static void EjecutarResultado(Pago pago) {
            // Primero se ejecuta la parte propia de cada pago.Tipo
            //if (pago.Tipo.Clave.Equals("TIPOPAGO.PAGOCUOTA"))
            //    EjecutarResultadoPagoCuota(pago);
            //else if (pago.Tipo.Clave.Equals("TIPOPAGO.PARCIAL"))
            //    EjecutarResultadoPagoParcial(pago);
            //else if (pago.Tipo.Clave.Equals("TIPOPAGO.SUCURSAL"))
            //    EjecutarResultadoPagoSucursal(pago);
            //else if (pago.Tipo.Clave.Equals("TIPOPAGO.CANCELACION"))
            //    EjecutarResultadoCancelacion(pago);
            //else if (pago.Tipo.Clave.Equals("TIPOPAGO.CANCELAQUITA"))
            //    EjecutarResultadoCancelaQuita(pago);
            //else if (pago.Tipo.Clave.Equals("TIPOPAGO.ANTICIPO"))
            //    EjecutarResultadoAnticipo(pago);
            //else if (pago.Tipo.Clave.Equals("TIPOPAGO.JUDICIAL"))
            //    EjecutarResultadoJudicial(pago);
        }

        #region resultados
        public static void EjecutarResultadoPagoCuota(Pago pago) {
            if (pago.Cuenta.ConvenioActivo != null)
                pago.Cuenta.setearEstado(Parametros.GetByClave("ESTADOCUENTA.FIRMO-RECONOCIMIENTO"));
        }

        public static void EjecutarResultadoPagoParcial(Pago pago) {
            if (pago.Cuenta.ConvenioActivo == null)
                pago.Cuenta.setearEstado(
                    (pago.Cuenta.Estado.Equals(Parametros.GetByClave("ESTADOCUENTA.FIRMO-RECONOCIMIENTO"))
                    || pago.Cuenta.Estado.Equals(Parametros.GetByClave("ESTADOCUENTA.JUICIO-CON-CONVENIO"))
                    || pago.Cuenta.Estado.Equals(Parametros.GetByClave("ESTADOCUENTA.JUICIO-CON-PAGOS-PARCIALES"))
                    || pago.Cuenta.Estado.Equals(Parametros.GetByClave("ESTADOCUENTA.JUICIO-EJECUTIVO-INICIADO"))
                    || pago.Cuenta.Estado.Equals(Parametros.GetByClave("ESTADOCUENTA.JUICIO-CON-PROMESA")))
                        ? Parametros.GetByClave("ESTADOCUENTA.JUICIO-CON-PAGOS-PARCIALES")
                        : Parametros.GetByClave("ESTADOCUENTA.CTA.-CON-PAGOS-PARCIALES"));
            else 
                pago.Cuenta.setearEstado(Parametros.GetByClave("ESTADOCUENTA.FIRMO-RECONOCIMIENTO"));
        }

        public static void EjecutarResultadoPagoSucursal(Pago pago) {
            pago.Cuenta.setearEstado((pago.Cuenta.ConvenioActivo != null)
                                     ? Parametros.GetByClave("ESTADOCUENTA.CTA.-REF.-PAGA-EN-CLIENTE")
                                     : Parametros.GetByClave("ESTADOCUENTA.PAGO-EN-SUCURSAL"));
        }

        public static void EjecutarResultadoCancelacion(Pago pago) {
            pago.Cuenta.setearEstado(Parametros.GetByClave("ESTADOCUENTA.CANCELACION-TOTAL-DE-DEUDA"));
        }

        private static void EjecutarResultadoCancelaQuita(Pago pago) {
            pago.Cuenta.setearEstado(Parametros.GetByClave("ESTADOCUENTA.CANCELACION-TOTAL-DE-DEUDA"));
        }

        private static void EjecutarResultadoAnticipo(Pago pago) {
            if (pago.Cuenta.ConvenioActivo != null)
                pago.Cuenta.setearEstado(
                    (pago.Cuenta.Estado.Equals(Parametros.GetByClave("ESTADOCUENTA.FIRMO-RECONOCIMIENTO"))
                    || pago.Cuenta.Estado.Equals(Parametros.GetByClave("ESTADOCUENTA.JUICIO-CON-CONVENIO"))
                    || pago.Cuenta.Estado.Equals(Parametros.GetByClave("ESTADOCUENTA.JUICIO-CON-PAGOS-PARCIALES"))
                    || pago.Cuenta.Estado.Equals(Parametros.GetByClave("ESTADOCUENTA.JUICIO-EJECUTIVO-INICIADO"))
                    || pago.Cuenta.Estado.Equals(Parametros.GetByClave("ESTADOCUENTA.JUICIO-CON-PROMESA")))
                        ? Parametros.GetByClave("ESTADOCUENTA.JUICIO-CON-CONVENIO")
                        : Parametros.GetByClave("ESTADOCUENTA.FIRMO-RECONOCIMIENTO"));
        }

        private static void EjecutarResultadoJudicial(Pago pago) {
            pago.Cuenta.setearEstado(Parametros.GetByClave("ESTADOCUENTA.CUENTA-CON-EMBARGO"));
        }
        #endregion resultados
    }
}