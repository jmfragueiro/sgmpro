///////////////////////////////////////////////////////////
//  CnxBaseDatos.cs
//  Implementation of the Class CnxBaseDatos
//  Generated by Enterprise Architect
//  Created on:      13-feb-2010 17:23:40
//  Original author: Fernando
///////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.OleDb;
using System.Data.SqlClient;
using scioPersistentLibrary.excepciones;

namespace scioInterfazLibrary {
    /// <summary>
    /// Clase que encapsula distintas conexiones con base de datos 
    /// a través de objetos ADO.NET. Incluye conexión con base de 
    /// datos SqlServer Express,Excell y Tablas DBF.
    /// </summary>
    public class CnxBaseDatos {
        /// <summary>
        /// Atributo que contiene la instacia de conexión con una base 
        /// de datos SQLServer. Es la clase que encapsula la comunicación 
        /// con un SQLServer Express. 
        /// </summary>
        private static SqlConnection _miCnxSql;
        /// <summary>
        /// Atributo que contiene una instancia de la clase adapter para
        /// una conexión con un SQLServer. El adapter sirve para completar
        /// los datatables necesarios.
        /// </summary>
        private static SqlDataAdapter _miAdapterSql;
        /// <summary>
        /// Atributo que almacena una conexión OLEDB genérica.
        /// </summary>
        private static OleDbConnection _miCnxOleDb;
        /// <summary>
        /// Atributo que almacena un DataAdapterOleDb que se utiliza para 
        /// cargar DataTables a partir de una conexión OLEDB genérica.
        /// </summary>
        private static OleDbDataAdapter _miAdapterOleDb;

        #region SQLServer
        /// <summary>
        /// Realiza la conexión con una base SqlServer
        /// </summary>
        public static void ConectarSql(String cnxString) {
            try {
                _miCnxSql = new SqlConnection(cnxString);
                _miCnxSql.Open();
            } catch (Exception e) {
                throw new PersistErrorException("DB-ERROR", e.ToString());
            }
        }

        /// <summary>
        /// Devuelve un DataTable que genera con la sentencia Sql pasada
        /// como parámetro
        /// </summary>
        /// <param name="sqlStr">Sentencia de consulta</param>
        public static DataTable CargaTablaSql(String sqlStr) {
            try {
                if (_miCnxSql.State == ConnectionState.Closed)
                    throw new Exception();
                DataTable tResult = new DataTable("Result");
                _miAdapterSql = new SqlDataAdapter(sqlStr, _miCnxSql);
                _miAdapterSql.Fill(tResult);
                return tResult;
            } catch (Exception e) {
                throw new PersistErrorException("DB-ERROR", e.ToString());
            }
        }

        /// <summary>
        /// Carga un DataTable suministrado con el rescultado
        /// de la consulta suministrada.
        /// </summary>
        /// <param name="sqlStr">Sentencia de consulta</param>
        /// <param name="unaTabla">DataTable a rellenar</param>
        /// <returns>DataTable resultante</returns>
        public static DataTable CargaTablaSql(String sqlStr, DataTable unaTabla) {
            try {
                if (_miCnxSql.State == ConnectionState.Closed)
                    throw new Exception();
                unaTabla.Clear();
                _miAdapterSql = new SqlDataAdapter(sqlStr, _miCnxSql);
                _miAdapterSql.Fill(unaTabla);
                return unaTabla;
            } catch (Exception e) {
                throw new PersistErrorException("DB-ERROR", e.ToString());
            }
        }
        #endregion SQLServer

        #region OLEDB
        /// <summary>
        /// Conecta a un origen OLEDB que puede ser cualquier archivo que 
        /// soporte dicha interfaz (como por ej. Excel, txt, Access, etc.).
        /// Este es un método estático y que utiliza atributos estáticos
        /// por lo que solo puede haber una conexión activa en un momento.
        /// </summary>
        /// <param name="cnxString">
        /// El string de conexión del origen OLEDB a utilizarse.
        /// </param>
        public static void ConectarOledb(String cnxString) {
            try {
                _miCnxOleDb = new OleDbConnection(cnxString);
                _miCnxOleDb.Open();
            } catch (Exception e) {
                throw new PersistErrorException("DB-ERROR", e.ToString());
            }
        }

        /// <summary>
        /// Carga un datatable desde el origen OELDB conectado en el momento
        /// y a partir de la consulta suministrada como parámetro.
        /// </summary>
        /// <param name="sqlStr">
        /// Consulta SQL que devuelve un resultado.
        /// </param>
        /// <returns>
        /// Un DataTable con todos los registros devueltos por la consulta.
        /// </returns>
        public static DataTable CargaTablaOleDb(String sqlStr) {
            try {
                if (_miCnxOleDb.State == ConnectionState.Closed)
                    throw new Exception();

                DataTable tResult = new DataTable("Result");
                _miAdapterOleDb = new OleDbDataAdapter(sqlStr, _miCnxOleDb);
                _miAdapterOleDb.Fill(tResult);
                return tResult;
            } catch (Exception e) {
                throw new PersistErrorException("DB-ERROR", e.ToString());
            }
        }

        /// <summary>
        /// Cierra el origen OLEDB abierto y enlazado a la clase al momento 
        /// de la llamada al método.
        /// </summary>
        public static void CerrarOleDb() {
            try {
                if (_miCnxOleDb.State == ConnectionState.Closed)
                    return;

                _miCnxOleDb.Close();
                _miCnxOleDb.Dispose();
                _miAdapterOleDb.Dispose();
            } catch (Exception e) {
                throw new PersistErrorException("DB-ERROR", e.ToString());
            }
        }
        #endregion Métodos OleDb   
    }
}