///////////////////////////////////////////////////////////
//  CUAbmCuenta.cs
//  Clase de implementación de CUAbmCuenta.
//  Generated by Fito
//  Created on:      08-abr-2009 11:32:54
//  Original author: Fito
///////////////////////////////////////////////////////////
using System;
using System.Drawing;
using cuAbmCuenta.Properties;
using scioBaseLibrary.excepciones;
using scioControlLibrary;
using scioParamLibrary.dominio;
using scioParamLibrary.dominio.repos;
using scioToolLibrary;
using sgmpro.dominio.configuracion;
using sgmpro.dominio.gestion;
using scioPersistentLibrary;

namespace cuAbmCuenta {
    /// <summary>
    /// Esta clase hereda de CUAbmGenerico y se encarga de gestionar la 
    /// ventana WinABMV junto con su panelABMV para la entidad Cuenta.
    /// </summary>
    public class CUAbmCuenta : CUAbmGenerico<Cuenta> {
        #region IControladorEditable Members
        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        public override PanelABMV<Cuenta> crearPanelEdicion() {
            return new PanelAbmCuenta(this);
        }

        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        public override Icon getIcono() {
            return Resources.cuentaico;
        }

        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        public override void add(params object[] parametros) {
            if (parametros[0] is Entidad)
                ObjetoEnEdicion = new Cuenta {
                    Entidad = (Entidad)parametros[0]
                };
            else if (parametros[0] is Producto)
                ObjetoEnEdicion = new Cuenta {
                    Entidad = ((Producto)parametros[0]).Entidad,
                    Producto = (Producto)parametros[0]
                };
            else if (parametros[0] is Persona)
                ObjetoEnEdicion = new Cuenta { 
                    Titular = (Persona)parametros[0] 
                };
            else
                throw new AppErrorException("ERROR-ADD-WITHOUT-MASTER", "CUENTA");
        }

        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        public override void save(params Object[] parametros) {
            // Verifica si se cambió el estado para guardar el historial
            try {
                long scn = Persistencia.Controlador.iniciarTransaccion();
                base.save(parametros);
                EstadoCuenta ec = ObjetoEnEdicion.getUltimoEstadoCuenta();
                if (ec == null || !ObjetoEnEdicion.Estado.Equals(ec.Estado)) {
                    Parametro estado = ObjetoEnEdicion.Estado;
                    ObjetoEnEdicion.Estado = null;
                    ObjetoEnEdicion.setearEstado(estado);
                }
                Persistencia.Controlador.commitTransaccion(scn);
            } catch (Exception e) {
                Persistencia.Controlador.rollbackTransaccion();
                throw new DataErrorException("DATA-SAVENOK", e.ToString());
            }
        }

        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        public override void verify(params object[] parametros) {
            if (string.IsNullOrEmpty(ObjetoEnEdicion.Descripcion))
                throw new DataErrorException("CAMPO-NOK", Mensaje.TextoValidacion("CUENTA-DESC"));

            if (string.IsNullOrEmpty(ObjetoEnEdicion.Codigo))
                throw new DataErrorException("CAMPO-NOK", Mensaje.TextoValidacion("CUENTA-CODIGO"));

            if (ObjetoEnEdicion.Titular == null)
                throw new DataErrorException("CAMPO-NOK", Mensaje.TextoValidacion("CUENTA-TITULAR"));

            if (ObjetoEnEdicion.Estado.Equals(Parametros.GetByClave("ESTADOCUENTA.ENLEGAL")) 
                && string.IsNullOrEmpty(ObjetoEnEdicion.Expediente))
                throw new DataErrorException("CAMPO-NOK", Mensaje.TextoValidacion("CUENTA-EXPEDIENTE"));
        }
        #endregion
    }
}