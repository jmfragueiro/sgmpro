///////////////////////////////////////////////////////////
//  Job.cs
//  Implementation of the Class Job
//  Generated by Enterprise Architect
//  Created on:      20-abr-2009 16:57:18
//  Original author: Fito
///////////////////////////////////////////////////////////
using System;
using System.Collections.Generic;
using System.Data;
using scioBaseLibrary;
using scioBaseLibrary.excepciones;
using scioPersistentLibrary;
using scioPersistentLibrary.acceso;
using scioSecureLibrary.dominio;
using scioToolLibrary;
using scioToolLibrary.enums;
using sgmpro.dominio.configuracion;
using sgmpro.dominio.configuracion.repos;
using scioParamLibrary.dominio.repos;
using System.Text;
using sgmpro.dominio.scheduler.repos;

namespace sgmpro.dominio.scheduler {
    /// <summary>
    ///   Esta clase representa a un trabajo (job) de generación de listas programado. 
    ///   Un trabajo de este tipo implica que, siguiendo la programación, en un momento
    ///   dado se inicia la ejecución del mismo aplicando una serie de generaciones, donde
    ///   en cada una se genera una lista de un tipo definido, según la configuración.
    ///   Esta clase es persistente.
    /// </summary>
    public class Job : EntidadIdentificada<Job> {
        /// <summary>
        ///   Nombre del Job
        /// </summary>
        public virtual string Nombre { get; set; }
        /// <summary>
        ///   Cronología de ejecución para el job.
        /// </summary>
        public virtual string Crontab { get; set; }
        /// <summary>
        ///   Descripción del Job.
        /// </summary>
        public virtual string Descripcion { get; set; }
        /// <summary>
        /// Fecha de de la primera ejecución.
        /// </summary>
        public virtual DateTime Inicio {
            get { return _inicio; }
            set { _inicio = Fechas.GetOkDate(value); }
        }
        private DateTime _inicio = Fechas.FechaNull;
        /// <summary>
        /// Fecha de la última ejecución realizada.
        /// </summary>
        public virtual DateTime Ultima {
            get { return _ultima; }
            set { _ultima = Fechas.GetOkDate(value); }
        }
        private DateTime _ultima = Fechas.FechaNull;
        /// <summary>
        /// Fecha de la siguiente ejecución programada.
        /// </summary>
        public virtual DateTime Siguiente {
            get { return _siguiente; }
            set { _siguiente = Fechas.GetOkDate(value); }
        }
        private DateTime _siguiente = Fechas.FechaNull;
        /// <summary>
        /// El Usuario al que se cargaran todas las gestiones del trabajo.
        /// </summary>
        public virtual Usuario Usuario { get; set; }
        /// <summary>
        /// Define si el Job esta activo para una próxima ejecución.
        /// </summary>
        public virtual bool Activo { get; set; }
        /// <summary>
        /// Define si el Job esta activo para una próxima ejecución.
        /// </summary>
        public virtual bool Ejecutando { get; set; }
        /// <summary>
        /// Tipos de Listas a generarse con el Job. Cuando el Job se ejecuta, 
        /// recorre la los Tipos de Listas generando Listas de las mismas, 
        /// segun la prioridad que estas tengan (a igual prioridad no hay un
        /// orden predecible).
        /// </summary>
        public virtual IList<TipoListaGestion> Listas { get; set; }
        /// <summary>
        /// Conjunto de ejecuciones del Job.
        /// </summary>
        public virtual IList<Ejecucion> Ejecuciones { get; set; }

        ///<summary>
        /// Constructor que inicializa las variables internas del objeto.
        ///</summary>
        public Job() {
            Listas = new List<TipoListaGestion>();
            Ejecuciones = new List<Ejecucion>();
        }

        /// <summary>
        /// Implementa el método que ejecuta efectivamente la generación de listas.
        /// </summary>
        public virtual void ejecutar(Ejecucion exe) {
            // Verifica si hay algun job corriendo
            if (Jobs.HayJobCorriendo())
                throw new AppErrorException("ERROR-JOBRUN-EXIST");

            Sistema.Controlador.logear("JOBRUN-INIT", ENivelMensaje.INFORMACION, Nombre);
            try {
                // Antes que nada setea al job como en ejecución
                setearEnEjecución(true);

                // Ejecuta el trabajo tipo de lista por tipo de lista.
                ejecutarTrabajo(exe);

                // Actualiza la fecha de última ejecución (y siguiente)
                finalizarTrabajo();
            } catch (Exception e) {
                Persistencia.Controlador.rollbackTransaccion();
                throw new SistemaErrorException("ERROR-EJECUTAR-GENERACION-LISTA", e.ToString());
            } finally {
                setearEnEjecución(false);
            }
        }

        /// <summary>
        /// Calcula y devuelve la siguiente ejecución para este job teniendo en cuenta 
        /// la ultima ejecución finalizada (prop Ultima) y su configuración de crontab
        /// (no guarda en la propiedad Siguiente el valor calculado, solo se retorna).
        /// </summary>
        /// <returns>
        /// La fecha de siguiente ejecucion a partir de la ultima ejecucion finalizada. 
        /// </returns>
        public virtual DateTime calcularSiguienteEjecucion() {
            return TriggerUtiles.GetSiguienteEjecucion(Crontab, Ultima);
        }

        /// <summary>
        /// Calcula y devuelve la siguiente ejecución para este job teniendo en cuenta 
        /// una fecha de utlima ejecución pasada como argumenyo y su config. de crontab
        /// (no guarda en la propiedad Siguiente el valor calculado, solo se retorna).
        /// </summary>
        /// <returns>
        /// La fecha de siguiente ejecucion a partir de la fecha de ejecucion pasada. 
        /// </returns>
        public virtual DateTime calcularSiguienteEjecucion(DateTime ultima) {
            return TriggerUtiles.GetSiguienteEjecucion(Crontab, ultima);
        }

        /// <summary>
        /// Este método establece al job actual como en ejecucion o no.
        /// </summary>
        private void setearEnEjecución(bool ejecutando) {
            string sql = "update job set job_ejecutando = ";
            sql += (ejecutando ? "1" : "0");
            sql += " where job_id = '" + Id + "'";
            Persistencia.EjecutarSqlDML(sql, Persistencia.Controlador.CadenaConexion);
            Sistema.Controlador.logear(
                "GENERICO",
                ENivelMensaje.INFORMACION,
                "Seteada ejecución de JOB:" + Nombre + " en " + ejecutando);
        }

        /// <summary>
        /// Ejecuta el trabajo tipo de lista por tipo de lista.
        /// </summary>
        private void ejecutarTrabajo(Ejecucion exe) {
            StringBuilder res = new StringBuilder("RESULTADO:");

            // Ejecuta el Job en el que se generan las listas configuradas para el mismo
            Sistema.Controlador.logear("JOBRUN-EXE-PASO", ENivelMensaje.INFORMACION, null);
            foreach (TipoListaGestion tipo in TiposListaGestion.OrdenarPorPriodidad(Listas))
                res.Append("\r\n" + tipo.generaListaGestion(Usuario));

            exe.Resultado = res.ToString();
        }

        /// <summary>
        /// Finaliza el trabajo setando valores finales y guardando el objeto.
        /// </summary>
        private void finalizarTrabajo() {
            Ultima = DateTime.Now;
            Siguiente = calcularSiguienteEjecucion();
            save();
        }

        /// <summary>
        /// Este método genera el string por defecto a mostrar en todos lados.
        /// </summary>
        public override string ToString() {
            return Nombre;
        }
    }
}