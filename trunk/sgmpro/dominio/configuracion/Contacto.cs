///////////////////////////////////////////////////////////
//  Contacto.cs
//  Implementation of the Class Contacto
//  Generated by Enterprise Architect
//  Created on:      13-abr-2009 17:23:42
//  Original author: Fito
///////////////////////////////////////////////////////////
using System;
using scioParamLibrary.dominio;
using scioPersistentLibrary.acceso;
using scioSecureLibrary.dominio;
using scioToolLibrary;

namespace sgmpro.dominio.configuracion {
    /// <summary>
    /// Esta clase representa el concepto de información de contacto con una
    /// persona, y permite unificar los datos de ubicación de distinto tipo
    /// (personal, laboral, etc.) de una persona. Esta clase es persistente.
    /// </summary>
    public class Contacto : EntidadIdentificada<Contacto> {
        /// <summary>
        /// La persona a la que pertenece el contacto. No Nulo. FK.
        /// </summary>
        public virtual Persona Persona { get; set; }
        /// <summary>
        /// El tipo de información de contacto. Parámetro. No Nulo.
        /// </summary>
        public virtual Parametro Tipo { get; set; }
        /// <summary>
        /// Descripción del contacto. No nulo.
        /// </summary>
        public virtual string Descripcion { get; set; }
        /// <summary>
        /// Si este es el contacto principal (para recibos de la persona).
        /// </summary>
        public virtual bool Principal { get; set; }
        /// <summary>
        /// Nombre de la calle de la dirección del contacto.
        /// </summary>
        public virtual string Calle { get; set; }
        /// <summary>
        /// Número de Puerta de la dirección del contacto.
        /// </summary>
        public virtual string Puerta { get; set; }
        /// <summary>
        /// Punitorios datos de la dirección del contacto.
        /// </summary>
        public virtual string PisoDepto { get; set; }
        /// <summary>
        /// Nomenclatura Catastral de la Persona.
        /// </summary>
        public virtual string IdGIS { get; set; }
        /// <summary>
        /// Provincia del contacto. Parámetro. No Nulo.
        /// </summary>
        public virtual Parametro Provincia { get; set; }
        /// <summary>
        /// Localidad del contacto. Parámetro. No Nulo.
        /// </summary>
        public virtual Parametro Localidad { get; set; }
        /// <summary>
        /// CódigPostal del contacto. No Nulo.
        /// </summary>
        public virtual string Cp { get; set; }
        /// <summary>
        /// Numero de Telefono Principal del contacto.
        /// </summary>
        public virtual string Telefono1 { get; set; }
        /// <summary>
        /// Numero de Telefono Secundario del contacto.
        /// </summary>
        public virtual string Telefono2 { get; set; }
        /// <summary>
        /// Numero del celular del contacto.
        /// </summary>
        public virtual string Celular { get; set; }
        /// <summary>
        /// Numero de Telefono Principal del contacto.
        /// </summary>
        public virtual string Fax { get; set; }
        /// <summary>
        /// El correo electrónico del contacto.
        /// </summary>
        public virtual string Email { get; set; }
        /// <summary>
        /// La fecha de alta y/o ultima modificacion del contacto. No Nulo.
        /// </summary>                
        public virtual DateTime FechaUMod {
            get { return _fechaumod; }
            set { _fechaumod = Fechas.GetOkDate(value); }
        }
        private DateTime _fechaumod = DateTime.Now;
        /// <summary>
        /// El usuario que ha marcado el contacto como verificado.
        /// </summary>
        public virtual Usuario VerificadoPor { get; set; }
        /// <summary>
        /// El origen de la información de contacto. Parámetro. No Nulo.
        /// </summary>
        public virtual Parametro Origen { get; set; }

        /// <summary>
        /// Este método genera el string por defecto a mostrar en todos lados.
        /// </summary>
        public override string ToString() {
            return string.Format("[{0}] {1}", Tipo, Descripcion);
        }
    }
}