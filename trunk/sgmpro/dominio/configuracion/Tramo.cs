///////////////////////////////////////////////////////////
//  Tramo.cs
//  Implementation of the Class Tramo
//  Generated by Enterprise Architect
//  Created on:      13-May-2009 03:54:54 p.m.
//  Original author: Fernando
///////////////////////////////////////////////////////////
using System;
using scioBaseLibrary.excepciones;
using scioPersistentLibrary.acceso;

namespace sgmpro.dominio.configuracion {
    /// <summary>
    /// Esta clase representa a un Tramo de Gestión para una Entidad del sistema.
    /// Los tramos de gestión representan espacios lógicos de tiempo ó cantidad
    /// de gestiones y que permiten establecer etapas dentro de la gestión de mora
    /// de tal forma que una cuenta sea sometida a distinto tratamiento dependiendo
    /// del tramo en el que se encuentre. Cada Entidad posee su lista de tramos y
    /// cuando una cuenta supera el limite establecido por el último Tramo, entonces
    /// sale de gestión (pasa a legal o termina como irrecuperable). Esta clase es 
    /// persistente.
    /// </summary>
    public class Tramo : EntidadIdentificada<Tramo> {
        /// <summary>
        /// La Entidad a la que pertenece (que da origen a) la cuenta. No Nulo. FK.
        /// </summary>
        public virtual Producto Producto { get; set; }
        /// <summary>
        /// El Nombre del tramo (utilizado en la aplicación). No Nulo.
        /// </summary>
        public virtual string Nombre { get; set; }
        /// <summary>
        /// El limite del tramo (días transcurridos o cantidad de gestiones). No Nulo.
        /// </summary>
        public virtual long Limite { get; set; }
        /// <summary>
        /// El interés punitorio para las cuentas del Tramo. No Nulo.
        /// </summary>
        public virtual double Punitorio { get; set; }
        /// <summary>
        /// El porcentaje de honorario sobre la deuda (cap+int) en las cuentas en este tramo.
        /// </summary>
        public virtual double Honorario { get; set; }

        /// <summary>
        /// Ver descripción en clase base.
        /// </summary>
        public override void delete() {
            if (!isAlive())
                return;

            Producto pro = Producto;
            try {
                Producto = null;
                base.delete();
            } catch (Exception e) {
                Producto = pro;
                base.undelete();
                throw new DataErrorException("ERROR-PRODUCTO", e.ToString());
            }
        }

        /// <summary>
        /// Este método genera el string por defecto a mostrar en todos lados.
        /// </summary>
        public override string ToString() {
            return Nombre;
        }
    }
}