///////////////////////////////////////////////////////////
//  Entidad.cs
//  Implementation of the Class Entidad
//  Generated by Enterprise Architect
//  Created on:      13-May-2009 03:54:54 p.m.
//  Original author: Fernando
///////////////////////////////////////////////////////////
using System;
using System.Collections.Generic;
using scioBaseLibrary.excepciones;
using scioParamLibrary.dominio;
using scioPersistentLibrary.acceso;

namespace sgmpro.dominio.configuracion {
    /// <summary>
    /// Esta clase representa a una entidad del sistema, las cuales a su vez
    /// representan a los Clientes del estudio de gestion de mora y son las
    /// que contienen a las Cuentas de morosos que se gestionan. Además, una
    /// cuenta posee _tramos de Gestión asociados (ventanas de tiempo para la
    /// gestión) y posee una cierta cantidad de _productos sobre los cuales las
    /// Cuentas poseen la deuda. Esta clase es persistente.
    /// </summary>
    public class Entidad : EntidadIdentificada<Entidad> {
        /// <summary>
        /// Código de la entidad (utilizado en la aplicación). Unico. No Nulo.
        /// </summary>
        public virtual string Codigo { get; set; }
        /// <summary>
        /// Nombre real de la empresa representada por la entidad. Unico. No Nulo.
        /// </summary>
        public virtual string Nombre { get; set; }
        /// <summary>
        /// El número de CUIT de la empresa representada por la entidad. Unico. No Nulo.
        /// </summary>
        public virtual string Cuit { get; set; }
        /// <summary>
        /// El estado de activación de la entidad. No Nulo.
        /// </summary>
        public virtual bool Activada { get; set; }
        /// <summary>
        /// Dirección de la empresa representada por la entidad.
        /// </summary>
        public virtual string Direccion { get; set; }
        /// <summary>
        /// CódigPostal de la empresa representada por la entidad.
        /// </summary>
        public virtual string Cp { get; set; }
        /// <summary>
        /// Numero de Telefono pricnipal de la empresa representada por la entidad.
        /// </summary>
        public virtual string Telefono { get; set; }
        /// <summary>
        ///  Numero de Fax secundario de la empresa representada por la entidad.
        /// </summary>
        public virtual string Fax { get; set; }
        /// <summary>
        /// El nombre del empleado de contacto asociado a la entidad. No Nulo.
        /// </summary>
        public virtual string Contacto { get; set; }
        /// <summary>
        /// El correo electrónico de la persona de contacto de la entidad.
        /// </summary>
        public virtual string Email { get; set; }
        /// <summary>
        /// Conjunto de tipos de gestión permitidos para la entidad. No Nulo. FK (List).
        /// </summary>
        public virtual IList<Parametro> TiposGestion { get; set; }
        /// <summary>
        /// Conjunto de tipos de facturación permitidos para la entidad. No Nulo. FK (List).
        /// </summary>
        public virtual IList<Parametro> TiposRecibo { get; set; }
        /// <summary>
        /// Conjunto de formas de pago permitidas para la entidad. No Nulo. FK (List).
        /// </summary>
        public virtual IList<Parametro> FormasPago { get; set; }
        /// <summary>
        /// Conjunto de productos gestionados para la entidad. No Nulo. FK (List).
        /// </summary>
        public virtual IList<Producto> Productos { get; set; }
        /// <summary>
        /// Conjunto de tipos de convenios asociados a la entidad. No Nulo. FK (List).
        /// </summary>
        public virtual IList<TipoConvenio> TiposConvenio { get; set; }

        /// <summary>
        /// Constructor que instancia los conjuntos de la clase.
        /// </summary>
        public Entidad() {
            Productos = new List<Producto>();
            TiposGestion = new List<Parametro>();
            TiposRecibo = new List<Parametro>();
            FormasPago = new List<Parametro>();
            TiposConvenio = new List<TipoConvenio>();
        }

        /// <summary>
        /// Este método se utiliza para obtener un copia de un conjunto
        /// a efectos de poder acceder a sus elementos sin tener acceso
        /// al propio conjunto.
        /// </summary>
        /// <returns>
        /// Un conjunto del tipo correcto como una copia del original. 
        /// </returns>
        public virtual IList<Producto> getProductosActivos() {
            try {
                IList<Producto> conjunto = new List<Producto>();

                foreach (Producto prod in Productos)
                    if (prod.isAlive() && prod.Activado)
                        conjunto.Add(prod);

                return conjunto;
            } catch (Exception e) {
                throw new DataErrorException("ERROR-ENTIDAD", e.ToString());
            }
        }

        /// <summary>
        /// Este método evita que se borre un objeto de la clase.
        /// </summary>
        public override void delete() {
            throw new DataErrorException("DATA-DEL-NOVALID");
        }

        /// <summary>
        /// Este método genera el string por defecto a mostrar en todos lados.
        /// </summary>
        public override string ToString() {
            return string.Format("{0} ({1})", Nombre, Cuit);
        }
    }
}