///////////////////////////////////////////////////////////
//  Estrategia.cs
//  Implementation of the Class Estrategia
//  Generated by Enterprise Architect
//  Created on:      20-abr-2009 16:57:18
//  Original author: Fernando
///////////////////////////////////////////////////////////
using System;
using System.Collections.Generic;
using scioBaseLibrary.excepciones;
using scioPersistentLibrary.acceso;
using scioToolLibrary;
using sgmpro.enums;
using sgmpro.dominio.configuracion.repos;

namespace sgmpro.dominio.configuracion {
    ///<summary>
    /// Estrategia
    ///</summary>
    public class Estrategia : EntidadIdentificada<Estrategia> {
        /// <summary>
        /// Nombre
        /// </summary>
        public virtual string Nombre { get; set; }
        /// <summary>
        /// Descripcion
        /// </summary>
        public virtual string Descripcion { get; set; }
        /// <summary>
        /// La fecha de alta del Predicado. No Nulo.
        /// </summary>                
        public virtual DateTime FechaAlta {
            get { return _fechaAlta; }
            set { _fechaAlta = Fechas.GetOkDate(value); }
        }
        private DateTime _fechaAlta = Fechas.FechaNull;
        /// <summary>
        /// Fecha de última modificación
        /// </summary>
        public virtual DateTime FechaUMod {
            get { return _fechaumod; }
            set { _fechaumod = Fechas.GetOkDate(value); }
        }
        private DateTime _fechaumod = Fechas.FechaNull;

        /// <summary>
        /// Lista de predicados
        /// </summary>
        public virtual IList<Predicado> ListaPredicados { get; set; }

        /// <summary>
        /// Constructor
        /// </summary>
        public Estrategia() {
            ListaPredicados = new List<Predicado>();
        }

        /// <summary>
        /// Devuelve verdadero si la cuenta reune las condiciones de la estrategia
        /// </summary>
        public virtual bool evaluar(Guid ctaId) {
            bool result = true;
            string conector = ETipoConector.NULL;

            // Recorre todos los predicados y verifica si cumplimenta la estrategia
            foreach (Predicado predicado in Predicados.OrdenarPorNroOrden(ListaPredicados)) {
                if (predicado.isAlive()) {
                    if (conector.Equals(ETipoConector.OR))
                        // Si el conector del predicado anterior es un OR 
                        // => realiza un or logico con el resultado anterior 
                        // (se utiliza el operador en cortocircuito asi si ya 
                        // es verdadero, ni siquiera evalua el sgte predicado)
                        result = result || predicado.evaluar(ctaId);
                    else
                        // Si el conector del predicado anterior es un AND 
                        // (o no tiene conector -NULL-) => realiza un and 
                        // logico con el resultado anterior (se utiliza el 
                        // operador en cortocircuito asi si ya es falso, ni 
                        //siquiera evalua el siguiente predicado)
                        result = result && predicado.evaluar(ctaId);

                    // Luego retiene el conector para el siguient predicado
                    conector = predicado.Conector;
                }
            }

            return result;
        }

        /// <summary>
        /// Ver descripción en clase base. En este caso al deletearse la
        /// estrategia, primero se elimina de los tipos de lista en los
        /// que ya pudiese estar. Puede lanzar una DataErrorException si 
        /// tiene problemas.
        /// </summary>
        public override void delete() {
            if (!isAlive())
                return;

            try {
                foreach (TipoListaGestion tlg in RepositorioGenerico<TipoListaGestion>.GetAll())
                    tlg.ListaEstrategias.Remove(this);
                base.delete();
            } catch (Exception e) {
                undelete();
                throw new DataErrorException("ERROR-ESTRATEGIA", e.ToString());
            }
        }

        /// <summary>
        /// Este método genera el string por defecto a mostrar en todos lados.
        /// </summary>
        public override string ToString() {
            return Nombre;
        }
    }
}