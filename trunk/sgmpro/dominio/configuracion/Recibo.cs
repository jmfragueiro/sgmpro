///////////////////////////////////////////////////////////
//  Recibo.cs
//  Implementation of the Class Recibo
//  Generated by Enterprise Architect
//  Created on:      13-May-2009 03:54:59 p.m.
//  Original author: Fernando
///////////////////////////////////////////////////////////
using System;
using scioBaseLibrary.excepciones;
using scioParamLibrary.dominio;
using scioPersistentLibrary.acceso;
using scioToolLibrary;

namespace sgmpro.dominio.configuracion {
    /// <summary>
    /// Esta clase representa a un recibo asociado a pago dentro del sistema. 
    /// Un pago puede tener varios recibos asociados (por concepto de deuda 
    /// que se cancela). Un recibo se mata solo cuando se mata el pago que lo
    /// contiene. Un recibo no puede 'reavivarse'. Esta clase es persistente.
    /// </summary>
    public class Recibo : EntidadIdentificada<Recibo> {
        /// <summary>
        /// El tipo de recibo. Parámetro. No Nulo. FK.
        /// </summary>
        public virtual Parametro Tipo { get; set; }
        /// <summary>
        /// El concepto (tipo de deuda) para el recibo.
        /// </summary>
        public virtual Parametro Concepto { get; set; }
        /// <summary>
        /// El numero de recibo. No Nulo.
        /// </summary>
        public virtual string Numero { get; set; }
        /// <summary>
        /// El importe del recibo. FK.
        /// </summary>
        public virtual double Importe { get; set; }
        /// <summary>
        /// La descripcion para el recibo.
        /// </summary>
        public virtual string Descripcion { get; set; }
        /// <summary>
        /// La fecha del recibo del pago. No Nulo.
        /// </summary>
        public virtual DateTime Fecha {
            get { return _fecha; }
            set { _fecha = Fechas.GetOkDate(value); }
        }
        private DateTime _fecha = DateTime.Now;
        /// <summary>
        /// El pago asociado al recibo. Parámetro. No Nulo. FK.
        /// </summary>
        public virtual Pago Pago { get; set; }

        /// <summary>
        /// Devuelve el total descontando el monto del IVA 
        /// (Si corresponde)
        /// </summary>
        public virtual Double getSubTotal() {
            if (Importe == 0) return 0;
            return Importe - getMontoIva();
        }

        /// <summary>
        /// Devuelve el monto del IVA, si corresponde.
        /// Corresponde en el caso de que el tipo del
        /// documento tiene el atributo valordouble >0
        /// </summary>
        /// <returns></returns>
        public virtual Double getMontoIva() {
            return Importe*Tipo.Valordouble*0.01;
        }

        /// <summary>
        /// Ver descripción en clase base. En este caso al borrarse 
        /// (logicamente) el recibo se agrega una marca de texto en 
        /// la descripcion del mismo.
        /// </summary>
        public override void delete() {
            if (!isAlive())
                return;

            Descripcion += "[ANULADO]";
            base.delete();
        }

        /// <summary>
        /// Este método evita que se desborre (o reavive) un recibo.
        /// </summary>
        public override void undelete() {
            throw new DataErrorException("DATA-UNDEL-NOK");
        }

        /// <summary>
        /// Este método genera el string por defecto a mostrar en todos lados.
        /// </summary>
        public override string ToString() {
            //////////////////////////////////////////////////////////////
            // MODIFICADO POR FITO EL 03/11/2013:                       //
            // Para que no muestre No.0 en recibos de tipo NINGNO o en  //
            // cualquie otr caso que no tenga numero.                   //
            //////////////////////////////////////////////////////////////
            return (Numero != null && !Numero.Equals("0"))
                    ? string.Format("{0} Nº {1}", Tipo, Numero)
                    : Tipo.ToString();
            //////////////////////////////////////////////////////////////
        }
    }
}