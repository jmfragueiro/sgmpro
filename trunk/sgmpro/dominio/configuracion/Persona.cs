///////////////////////////////////////////////////////////
//  Persona.cs
//  Implementation of the Class Persona
//  Generated by Enterprise Architect
//  Created on:      13-May-2009 03:54:54 p.m.
//  Original author: Fernando
///////////////////////////////////////////////////////////
using System;
using System.Collections.Generic;
using scioBaseLibrary.excepciones;
using scioParamLibrary.dominio;
using scioPersistentLibrary;
using scioPersistentLibrary.acceso;
using scioToolLibrary;
using sgmpro.dominio.configuracion.repos;
using sgmpro.dominio.gestion;
using sgmpro.dominio.gestion.repos;

namespace sgmpro.dominio.configuracion {
    /// <summary>
    /// Esta clase representa a una persona asociada a una cuenta del sistema.
    /// Las personas son los objetivos de un contacto al momento de ejecutar 
    /// una gestión y además pueden estar asociadas entre si por algun tipo de 
    /// relacion (esposo, codeudor, vecino, etc.). Una persona puede tener en
    /// el sistema varias formas de contacto (casa, trabajo, etc.). Esta clase 
    /// es persistente.
    /// </summary>
    public class Persona : EntidadIdentificada<Persona> {
        /// <summary>
        /// Nombre real de la persona. No Nulo.
        /// </summary>
        public virtual string Nombre { get; set; }
        /// <summary>
        /// El número de DNI de la persona. No Nulo.
        /// </summary>
        public virtual string DNI { get; set; }
        /// <summary>
        /// El número de CUIT de la persona.
        /// </summary>
        public virtual string Cuit { get; set; }
        /// <summary>
        /// La condición fiscal (del IVA) de la persona. Parámetro. No Nulo.
        /// </summary>
        public virtual Parametro TipoIVA { get; set; }
        /// <summary>
        /// Apellido de la persona (utilizado en la aplicación). No Nulo.
        /// </summary>
        public virtual Parametro Sexo { get; set; }
        /// <summary>
        /// El estado civil de la persona. Parámetro. No Nulo.
        /// </summary>
        public virtual Parametro EstadoCivil { get; set; }
        /// <summary>
        /// Una descripción de la profesión de la persona.
        /// </summary>
        public virtual string Profesion { get; set; }
        /// <summary>
        /// Una Descripción del trabajo actual de la persona de la persona.
        /// </summary>
        public virtual string Trabajo { get; set; }
        /// <summary>
        /// El estado económico actual de la persona. Parámetro. No Nulo.
        /// </summary>
        public virtual Parametro Economia { get; set; }
        /// <summary>
        /// Un comentario sobre la persona.
        /// </summary>
        public virtual string Comentario { get; set; }
        /// <summary>
        /// La ultima fecha de actualización de la persona.
        /// </summary>                
        public virtual DateTime FechaUMod {
            get { return _fechaumod; }
            set { _fechaumod = Fechas.GetOkDate(value); }
        }
        private DateTime _fechaumod = Fechas.FechaNull;
        /// <summary>
        /// Conjunto de contactos de la persona. No Nulo. FK (List).
        /// </summary>
        public virtual IList<Contacto> Contactos { get; set; }

        /// <summary>
        /// Constructor que instancia los conjuntos de la clase.
        /// </summary>
        public Persona() {
            Contactos = new List<Contacto>();
        }

        /// <summary>
        /// Este método se utiliza para agregar un Contacto a una persona.
        /// Se lanza una DataErrorException si tiene problemas.
        /// </summary>
        /// <param name="contacto">
        /// El Contacto a agregarse para la persona.
        /// </param>
        public virtual void agregarContacto(Contacto contacto) {
            if (contacto == null || Contactos.Contains(contacto)
                || (contacto.Persona != null && !Equals(contacto.Persona)))
                throw new DataErrorException(
                    "ERROR-NOADD-ELEMENTO",
                    (contacto == null)
                        ? "CONTACTO"
                        : contacto.ToString());

            try {
                Contactos.Add(contacto);
                contacto.Persona = this;

                if (contacto.Principal || (getContactoPrincipal() == null))
                    setContactoPrincipal(contacto);

                save();
            } catch (Exception e) {
                Contactos.Remove(contacto);
                contacto.Persona = null;
                throw new DataErrorException("ERROR-PERSONA", e.ToString());
            }
        }

        /// <summary>
        /// Este método se utiliza para obtener la lista de contactos vivos.
        /// </summary>
        /// <returns>
        /// La lista de contactos, del tipo especificado, de la persona.
        /// </returns>
        public virtual IList<Contacto> getContactosActivos() {
            try {
                IList<Contacto> conjunto = new List<Contacto>();

                foreach (Contacto contacto in Contactos)
                    if (contacto.isAlive())
                        conjunto.Add(contacto);

                return repos.Contactos.OrdenarPorFechaActDesc(conjunto);
            } catch (Exception e) {
                throw new DataErrorException("ERROR-PERSONA", e.ToString());
            }
        }

        /// <summary>
        /// Este método establece el contacto principal de la persona
        /// al contacto suministrado como parámetro. Si existiera algun
        /// contacto principal, este es desmarcado com tal para dar paso
        /// al que se envía como parámetro.
        /// </summary>
        /// <param name="contacto">
        /// El contacto a establecer como principal para la persona.
        /// </param>
        public virtual void setContactoPrincipal(Contacto contacto) {
            if (contacto == null || !Contactos.Contains(contacto)
                || contacto.Persona == null || !Equals(contacto.Persona))
                throw new DataErrorException(
                    "ERROR-NOADD-ELEMENTO",
                    (contacto == null)
                        ? "CONTACTO"
                        : contacto.ToString());
            try {
                long scn = Persistencia.Controlador.iniciarTransaccion();
                foreach (Contacto cto in Contactos) {
                    cto.Principal = false;
                    cto.save();
                }

                contacto.Principal = true;
                save();
                Persistencia.Controlador.commitTransaccion(scn);
            } catch (Exception e) {
                Persistencia.Controlador.rollbackTransaccion();
                refrescar();
                throw new DataErrorException("ERROR-PERSONA", e.ToString());
            }
        }

        /// <summary>
        /// Este método se utiliza para obtener el contacto principal.
        /// </summary>
        /// <returns>
        /// El contacto principal de la persona.
        /// </returns>
        public virtual Contacto getContactoPrincipal() {
            try {
                foreach (Contacto contacto in Contactos)
                    if (contacto.Principal)
                        return contacto;

                return null;
            } catch (Exception e) {
                throw new DataErrorException("ERROR-PERSONA", e.ToString());
            }
        }

        /// <summary>
        /// Este método se utiliza para quitar un Contacto de una persona. 
        /// Puede lanzar una DataErrorException si tiene problemas.
        /// </summary>
        /// <param name="contacto">
        /// El Contacto a quitarse de la persona.
        /// </param>
        public virtual void quitarContacto(Contacto contacto) {
            if (contacto == null)
                throw new DataErrorException("ERROR-ELEMENTO-NULO");
            if (!Contactos.Contains(contacto))
                throw new DataErrorException("ERROR-ELEMENTO-NOINLIST");
            if (contacto.Principal)
                throw new DataErrorException("ERROR-CONTACTOPPAL-NODEL", contacto.ToString());

            try {
                Contactos.Remove(contacto);
                contacto.Persona = null;
                contacto.save();
            } catch (Exception e) {
                throw new DataErrorException("ERROR-NODEL-ELEMENTO", e.ToString());
            }
        }

        /// <summary>
        /// Este método retorna la lista de cuentas asociadas a la
        /// persona, en donde esta es la titular de las mismas.
        /// </summary>
        /// <returns>
        /// La lista de cuentas de las que la persona es tituar.
        /// </returns>
        public virtual IList<Cuenta> getCuentasTitular() {
            return Cuentas.GetAliveByTitular(this);
        }

        /// <summary>
        /// Este método obtiene la lista de gestiones en las que
        /// la persona ha sido la contactada.
        /// </summary>
        /// <returns>
        /// La lista de gestiones sobre la persona.
        /// </returns>
        public virtual IList<Gestion> getGestionesContactado() {
            return Gestiones.GetByContactado(this);
        }

        /// <summary>
        /// Ver descripción en clase base.
        /// </summary>
        public override void delete() {
            throw new DataErrorException("DATA-DEL-NOVALID");
        }

        /// <summary>
        /// Este método evita que se desborre (o reavive) un objeto de la clase.
        /// </summary>
        public override void undelete() {
            throw new DataErrorException("DATA-UNDEL-NOK");
        }

        /// <summary>
        /// Este método genera el string por defecto a mostrar en todos lados.
        /// </summary>
        public override string ToString() {
            return string.Format("{0} - {1}", Nombre, DNI);
        }
    }
}