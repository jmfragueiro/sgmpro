///////////////////////////////////////////////////////////
//  TipoListaGestion.cs
//  Implementation of the Class TipoListaGestion
//  Generated by Enterprise Architect
//  Created on:      20-abr-2009 16:57:19
//  Original author: Fernando
///////////////////////////////////////////////////////////
using System;
using System.Collections.Generic;
using System.Data;
using scioBaseLibrary;
using scioBaseLibrary.excepciones;
using scioParamLibrary.dominio;
using scioParamLibrary.dominio.repos;
using scioPersistentLibrary;
using scioPersistentLibrary.acceso;
using scioSecureLibrary.dominio;
using scioToolLibrary;
using scioToolLibrary.enums;
using sgmpro.helpers;

namespace sgmpro.dominio.configuracion {
    ///<summary>
    /// Clase TipoListaGestion
    ///</summary>
    public class TipoListaGestion : EntidadIdentificada<TipoListaGestion> {
        ///<summary>
        /// Nombre
        ///</summary>
        public virtual string Nombre { get; set; }
        ///<summary>
        /// Descripción
        ///</summary>
        public virtual string Descripcion { get; set; }
        ///<summary>
        /// Tipo de Gestión
        ///</summary>
        public virtual Parametro TipoGestion { get; set; }
        ///<summary>
        /// Perfil a cual se asignarán las listas de gestión generadas
        ///</summary>
        public virtual Perfil Perfil { get; set; }
        ///<summary>
        /// Cantidad máxima de cuentas que puede contener.
        ///</summary>
        public virtual long MaxCuentas { get; set; }
        ///<summary>
        /// Prioridad de la lista (para el orden en la bandeja de entrada).
        ///</summary>
        public virtual long Prioridad { get; set; }
        ///<summary>
        /// Si la generación debe comprobar la fecha de elegibilidad
        /// de la cuenta.
        ///</summary>
        public virtual bool Elegibilidad { get; set; }
        ///<summary>
        /// Si la generación debe comprobar el estado de Pendiente 
        /// de alguna gestion de la cuenta.
        ///</summary>
        public virtual bool Pendiente { get; set; }
        ///<summary>
        /// Si la generación debe comprobar el estado de Cancelacion 
        /// total de deuda de la cuenta.
        ///</summary>
        public virtual bool Cancelacion { get; set; }
        ///<summary>
        /// Lista de Entidades
        ///</summary>
        public virtual IList<Entidad> ListaEntidades { get; set; }
        /// <summary>
        /// Lista de Estrategias
        /// </summary>
        public virtual IList<Estrategia> ListaEstrategias { get; set; }
        /// <summary>
        /// La fecha de alta del Predicado. No Nulo.
        /// </summary>                
        public virtual DateTime FechaAlta {
            get { return _fechaAlta; }
            set { _fechaAlta = Fechas.GetOkDate(value); }
        }
        private DateTime _fechaAlta = Fechas.FechaNull;

        ///<summary>
        /// Constructor de la calse que inicializa componentes internos.
        ///</summary>
        public TipoListaGestion() {
            ListaEntidades = new List<Entidad>();
            ListaEstrategias = new List<Estrategia>();
        }

        ///<summary>
        /// Devuelve una lista de gestion. Proceso principal.
        /// Devuelve null si no genera lista
        ///</summary>
        public virtual string generaListaGestion(Usuario usuario) {
            try {
                // Entonces recorre los pasos del Job para cerrar las 
                // gestiones perdiodicas que posean listas del mismo
                // tipo que la de alguno de los pasos dentro del Job
                string msj = descartaListasGestionCompatibles();

                // Crea la nueva lista de gestión, y la guarda, porque despues
                // hace referencia a la misma en los inserts 'crudos' finales
                ListaGestion nuevaLista = ProcesosGenerales.CrearYPrepararNuevaLista(this, msj);

                // Genera efectivamente la lista y retorna el resultado
                return nuevaLista.generar(usuario);
            } catch (Exception e) {
                Sistema.Controlador.logear("ERROR-GENERACION-LISTA", ENivelMensaje.ERROR, e.ToString());
                return ("ERROR [" + Nombre + "]: " + e);
            }
        }

        ///<summary>
        /// Devuelve una lista de gestion. Proceso principal.
        /// Devuelve null si no genera lista
        ///</summary>
        public virtual string descartaListasGestionCompatibles() {
            Sistema.Controlador.logear("JOBRUN-DEL-GENPER", ENivelMensaje.INFORMACION, null);
            string msj = string.Empty;

            try {
                string sql = "select lge_id as lista" +
                                "  from listagestion" +
                                " where lge_tipolista = '" + Id + "'" +
                                "   and lge_fechabaja = '" + Fechas.FechaNull + "'";
                DataTable dtlistas = Persistencia.EjecutarSqlSelect(sql, Persistencia.Controlador.CadenaConexion);
                foreach (DataRow row in dtlistas.Rows)
                    try {
                        Sistema.Controlador.logear("GENERICO", ENivelMensaje.INFORMACION, "Cerrando Lista " + row[0] + ".");
                        RepositorioGenerico<ListaGestion>.GetById((Guid)row[0]).cerrar();
                    } catch (Exception e) {
                        msj = "No pudo eliminar las gestiones de la Lista compatible:" + row[0] + ": " + e + "\r\n";
                        Sistema.Controlador.logear("GENERICO", ENivelMensaje.ERROR, msj);
                    }
            } catch (Exception e) {
                msj = "No pudo terminar con éxito el descarte de Listas de Gestión compatibles: " + e + "\r\n";
                Sistema.Controlador.logear("GENERICO", ENivelMensaje.ERROR, msj);
            } 

            return msj;
        }

        /// <summary>
        /// Este método genera el string por defecto a mostrar en todos lados.
        /// </summary>
        public override string ToString() {
            return string.Format("{0} ({1})", Nombre.ToUpper(), TipoGestion);
        }
    }
}