///////////////////////////////////////////////////////////
//  Convenio.cs
//  Implementation of the Class Convenio
//  Generated by Enterprise Architect
//  Created on:      20-abr-2009 16:57:17
//  Original author: Fernando
///////////////////////////////////////////////////////////
using System;
using System.Collections.Generic;
using scioBaseLibrary;
using scioBaseLibrary.excepciones;
using scioParamLibrary.dominio;
using scioParamLibrary.dominio.repos;
using scioPersistentLibrary;
using scioPersistentLibrary.acceso;
using scioPersistentLibrary.criterios;
using scioToolLibrary;
using sgmpro.dominio.configuracion.repos;

namespace sgmpro.dominio.configuracion {
    /// <summary>
    ///   Esta clase representa a un Convenio dentro del sistema, los que son
    ///   planes de pago que se generan a efectos de financiar el pago de una 
    ///   deuda. Esta clase es persistente.
    /// </summary>
    public class Convenio : EntidadIdentificada<Convenio> {
        private static readonly Parametro _cancelconvenio = Parametros.GetByClave("ESTADODEUDA.CANCELADACONVENIO");
        private static readonly Parametro _convenio = Parametros.GetByClave("ESTADODEUDA.CONVENIO");
        private static readonly Parametro _conveCaido = Parametros.GetByClave("ESTADOCUENTA.CON-CONVENIO-CAIDO");

        /// <summary>
        ///   La cuenta a la que pertenece el conveino. No Nulo.
        /// </summary>
        public virtual Cuenta Cuenta { get; set; }
        /// <summary>
        ///   Código del convenio (utilizado en la aplicación). No Nulo.
        /// </summary>
        public virtual TipoConvenio Tipo { get; set; }
        /// <summary>
        ///   Descripción del convenio (utilizado en la aplicación). No Nulo.
        /// </summary>
        public virtual string Descripcion { get; set; }
        /// <summary>
        ///   El total de la deuda original del convenio. No Nulo.
        /// </summary>
        public virtual double TotalOrigen {
            get { return Math.Round((_capital + _interes + _honorarios + _gastos), 2); }
        }
        /// <summary>
        ///   El importe de capital de la deuda origen. No Nulo.
        /// </summary>
        public virtual double CapitalOrigen {
            get { return _capital; }
            set { _capital = Math.Round(value, 2); }
        }
        private double _capital;
        /// <summary>
        ///   El importe de intereses de la deuda origen. No Nulo.
        /// </summary>
        public virtual double InteresOrigen {
            get { return _interes; }
            set { _interes = Math.Round(value, 2); }
        }
        private double _interes;
        /// <summary>
        ///   El importe de honorarios de la deuda origen. No Nulo.
        /// </summary>
        public virtual double HonorariosOrigen {
            get { return _honorarios; }
            set { _honorarios = Math.Round(value, 2); }
        }
        private double _honorarios;
        /// <summary>
        ///   El importe de gastos de la deuda origen. No Nulo.
        /// </summary>
        public virtual double GastosOrigen {
            get { return _gastos; }
            set { _gastos = Math.Round(value, 2); }
        }
        private double _gastos;
        /// <summary>
        ///   Valor de la quita. No Nulo.
        /// </summary>
        public virtual double Quita { get; set; }
        /// <summary>
        ///   Valor del anticipo. No Nulo.
        /// </summary>
        public virtual double Anticipo { get; set; }
        /// <summary>
        ///   Valor del gasto aplicado al anticipo. No Nulo.
        /// </summary>
        public virtual double GastosAnticipo { get; set; }
        /// <summary>
        ///   La deuda original efectivamente tomada para crear el convenio. No Nulo.
        /// </summary>
        public virtual double DeudaBase { get; set; }
        /// <summary>
        ///   La Cantidad de cuotas del tipo de convenio. No Nulo.
        /// </summary>
        public virtual long CtdadCuotas { get; set; }
        /// <summary>
        ///   El monto final del convenio. No Nulo.
        /// </summary>
        public virtual double MontoFinal { get; set; }
        /// <summary>
        ///   La fecha de inicio -primera cuota- del convenio. No Nulo.
        /// </summary>
        public virtual DateTime FechaInicio {
            get { return _fechainicio; }
            set { _fechainicio = Fechas.GetOkDate(value); }
        }
        private DateTime _fechainicio = DateTime.Now;
        /// <summary>
        ///   Si se redondearon las cuotas del convenio. No Nulo.
        /// </summary>
        public virtual bool Redondeado { get; set; }
        /// <summary>
        ///   Estado de activación del convenio. No Nulo.
        /// </summary>
        public virtual bool Activo { get; set; }
        /// <summary>
        ///   La fecha de alta del convenio. No Nulo.
        /// </summary>
        public virtual DateTime FechaAlta {
            get { return _fechaalta; }
            set { _fechaalta = Fechas.GetOkDate(value); }
        }
        private DateTime _fechaalta = Fechas.FechaNull;
        /// <summary>
        ///   Conjunto de cuotas del conveino. No Nulo. FK (List).
        /// </summary>
        public virtual IList<Deuda> Cuotas { get; set; }

        /// <summary>
        ///   Constructor que instancia los conjuntos de la clase.
        /// </summary>
        public Convenio() {
            Cuotas = new List<Deuda>();
        }

        /// <summary>
        ///   Este método se utiliza para aplicar un convenio, esto es, para
        ///   generar todas las cuotas del mismo asociadas a la cuenta pasada,
        ///   calculando sus montos y fechas de vencimiento. Este método no
        ///   hace persistente ningun cambio, dejando la decisión a quien lo 
        ///   maneje. Puede lanzar una DataErrorException si tiene problemas.
        /// </summary>
        public virtual void generarConvenio() {
            // Si tiene fecha de alta es porque ya fue generado
            if (FechaAlta != Fechas.FechaNull)
                return;

            // Realiza algunos controles para asegurar la calidad de datos
            if (FechaInicio == Fechas.FechaNull
                || Tipo == null
                || (DeudaBase - Anticipo) <= 0
                || DeudaBase <= 0
                || CtdadCuotas <= 0
                || CtdadCuotas < Tipo.MinCuotas
                || Anticipo < Tipo.ValorMinimoAnticipo
                || Quita > (Tipo.MaxQuita <= 1 ? Math.Round(InteresOrigen*Tipo.MaxQuita, 2) : Tipo.MaxQuita))
                throw new DataErrorException("ERROR-CONVENIO-DATANOK");

            try {
                // Inicializa los valores a utilizar
                Deuda d;
                object[] valor;
                string conexion = Persistencia.Controlador.CadenaConexion;
                Parametro cdCuota = Parametros.GetByClave("CONCEPTODEUDA.CONVENIO");
                Parametro ddAnticipo = Parametros.GetByClave("DETALLEDEUDA.ANTICIPO");
                Parametro ddCuota = Parametros.GetByClave("DETALLEDEUDA.CUOTA");

                // Comienza limpiando la coleccion de cuotas
                Cuotas.Clear();

                // Establece el redondeo para el total de la cuota
                int redondeo = (Redondeado) ? 0 : 2;

                // Calcula primero el valor de la cuota (constante)
                double montoRefinanciado = (DeudaBase - Anticipo);
                double tasa = (Tipo.IVAsobreTP) ? ((Tipo.TasaPura/100)*1.21) : (Tipo.TasaPura/100);
                string formulaCuota = "select (" + Tipo.FormulaCuota
                                                       .Replace("$DDO", DeudaBase.ToString())
                                                       .Replace("$CAP", CapitalOrigen.ToString())
                                                       .Replace("$INT", InteresOrigen.ToString())
                                                       .Replace("$HON", HonorariosOrigen.ToString())
                                                       .Replace("$GAS", GastosOrigen.ToString())
                                                       .Replace("$MRF", montoRefinanciado.ToString())
                                                       .Replace("$CTD", CtdadCuotas.ToString())
                                                       .Replace("$TAS", tasa.ToString())
                                                       .Replace("$GSA", GastosAnticipo.ToString())
                                                       .Replace("$ANT", Anticipo.ToString())
                                                       .Replace("$QUI", Quita.ToString())
                                                       .Replace("$SDO", "0")
                                                       .Replace("$SDC", "0")
                                                       .Replace("$CCT", "0")
                                                       .Replace("$CTA", "0")
                                                       .Replace("$MTF", "0")
                                                       .Replace(',', '.')
                                                       .Replace(';', ',') + ") as valor";
                try {
                    valor = Persistencia.EjecutarSqlOneRow(formulaCuota, conexion);
                    if (valor == null)
                        throw new Exception();
                } catch (Exception) {
                    throw new DataErrorException("ERROR-CONVENIO-TOTALCUOTA");
                }

                // Calcula, redondea y verifica el valor total de la cuota
                double totalCuota = Math.Round(Convert.ToDouble(valor[0]), redondeo);
                if (totalCuota <= 0)
                    throw new DataErrorException("ERROR-CONVENIO-CUOTACERO");
                if (totalCuota < Tipo.ValorMinimoCuota)
                    throw new DataErrorException("ERROR-CONVENIO-CUOTAMIN");

                // Luego obtiene el valor total del convenio
                MontoFinal = Math.Round((totalCuota*CtdadCuotas), 2);

                // Luego obtiene y 'parsea' las formulas para los demas componentes
                string formulaInteres = Tipo.FormulaInteres
                    .Replace("$DDO", DeudaBase.ToString())
                    .Replace("$CAP", CapitalOrigen.ToString())
                    .Replace("$INT", InteresOrigen.ToString())
                    .Replace("$HON", HonorariosOrigen.ToString())
                    .Replace("$GAS", GastosOrigen.ToString())
                    .Replace("$MRF", montoRefinanciado.ToString())
                    .Replace("$CTD", CtdadCuotas.ToString())
                    .Replace("$TAS", tasa.ToString())
                    .Replace("$GSA", GastosAnticipo.ToString())
                    .Replace("$ANT", Anticipo.ToString())
                    .Replace("$QUI", Quita.ToString())
                    .Replace("$CCT", totalCuota.ToString())
                    .Replace("$MTF", MontoFinal.ToString());
                string formulaHonorarios = Tipo.FormulaHonorarios
                    .Replace("$DDO", DeudaBase.ToString())
                    .Replace("$CAP", CapitalOrigen.ToString())
                    .Replace("$INT", InteresOrigen.ToString())
                    .Replace("$HON", HonorariosOrigen.ToString())
                    .Replace("$GAS", GastosOrigen.ToString())
                    .Replace("$MRF", montoRefinanciado.ToString())
                    .Replace("$CTD", CtdadCuotas.ToString())
                    .Replace("$TAS", tasa.ToString())
                    .Replace("$GSA", GastosAnticipo.ToString())
                    .Replace("$ANT", Anticipo.ToString())
                    .Replace("$QUI", Quita.ToString())
                    .Replace("$CCT", totalCuota.ToString())
                    .Replace("$MTF", MontoFinal.ToString());
                string formulaGastos = Tipo.FormulaGastos
                    .Replace("$DDO", DeudaBase.ToString())
                    .Replace("$CAP", CapitalOrigen.ToString())
                    .Replace("$INT", InteresOrigen.ToString())
                    .Replace("$HON", HonorariosOrigen.ToString())
                    .Replace("$GAS", GastosOrigen.ToString())
                    .Replace("$MRF", montoRefinanciado.ToString())
                    .Replace("$CTD", CtdadCuotas.ToString())
                    .Replace("$TAS", tasa.ToString())
                    .Replace("$GSA", GastosAnticipo.ToString())
                    .Replace("$ANT", Anticipo.ToString())
                    .Replace("$QUI", Quita.ToString())
                    .Replace("$CCT", totalCuota.ToString())
                    .Replace("$MTF", MontoFinal.ToString());

                // Establece el flag de si debe iniciar las cutoas 
                // desde el mes en curso o desde el mes siguiente
                int corregirFecha = 1;

                // Primero verifica si debe agregar un anticipo
                if (Anticipo > 0) {
                    // Si hay anticipo no se corrigen las fechas
                    corregirFecha = 0;

                    // Si debe agregar un anticipo verifica si debe realizar
                    // el calculo especial para el valor del capital y honor.
                    double honora = (Tipo.ReglaHA > 0)
                                        ? Math.Round(((Anticipo - GastosAnticipo)*(Tipo.ReglaHA/100)), 2)
                                        : Math.Round(GastosAnticipo, 2);
                    double capita = Math.Round((Anticipo - honora), 2);

                    // Verifica que no quede un capital o un honorario menor a cero
                    if (capita < 0 || honora < 0)
                        throw new DataErrorException("ERROR-CONVENIO-COMPANTICIPO");

                    // Ingresa la cuota anticipo para el convenio
                    d = new Deuda(Fechas.ToDiaHabil(FechaInicio), cdCuota, ddAnticipo, false, 
                                    "CONVENIO-ANTICIPO: " + Tipo, capita, 0, honora, 0, null, this, 0);
                    Cuotas.Add(d);
                }

                // Para iniciar el calcuo de cuotas iguala los montos
                // teniendo en cuenta que si quedan gastos sin cancelar 
                // con el anticipo, entonces debo quitarlo del calculo
                double saldoCapital;
                double restoGastos = GastosOrigen - Anticipo;
                double saldo = saldoCapital = montoRefinanciado;

                // Luego ingresa las cuotas calculando cada una y
                // verificando si debe agregar gastos y honorarios
                for (int i = 1; i <= CtdadCuotas; i++) {
                    double cuota, interes, honora, gastos;
                    string sql = "select";
                    sql += " (" + formulaInteres
                                        .Replace("$CTA", i.ToString())
                                        .Replace("$SDO", saldo.ToString())
                                        .Replace("$SDC", saldoCapital.ToString())
                                        .Replace(',', '.')
                                        .Replace(';', ',') + ") as inter,";
                    sql += " (" + formulaHonorarios
                                        .Replace("$CTA", i.ToString())
                                        .Replace("$SDO", saldo.ToString())
                                        .Replace("$SDC", saldoCapital.ToString())
                                        .Replace(',', '.')
                                        .Replace(';', ',') + ") as honor,";
                    sql += " (" + formulaGastos
                                        .Replace("$CTA", i.ToString())
                                        .Replace("$SDO", saldo.ToString())
                                        .Replace("$SDC", saldoCapital.ToString())
                                        .Replace(',', '.')
                                        .Replace(';', ',') + ") as gasto ";
                    object[] results;
                    try {
                        results = Persistencia.EjecutarSqlOneRow(sql, conexion);
                        if (results == null)
                            throw new Exception();
                    } catch (Exception) {
                        throw new DataErrorException("ERROR-CONVENIO-COMPCUOTA");
                    }

                    // Obtiene y redondea los componentes calculados de la cuota
                    interes = Math.Round(Convert.ToDouble(results[0]), 2);
                    honora = Math.Round(Convert.ToDouble(results[1]), 2);
                    gastos = Math.Round(Convert.ToDouble(results[2]), 2);

                    // Se asegura de que nunca de menor que cero un componente
                    interes = (interes < 0) ? 0 : interes;
                    honora = (honora < 0) ? 0 : honora;
                    gastos = (gastos < 0) ? 0 : gastos;

                    // Si todavia no cancelo los gastos lo toma en cuenta
                    if (restoGastos > 0) {
                        if (restoGastos >= totalCuota) {
                            interes = honora = gastos = 0;
                            restoGastos -= totalCuota;
                        } else {
                            double coef = restoGastos/totalCuota;
                            interes -= (interes*coef);
                            honora -= (honora*coef);
                            gastos -= (gastos*coef);
                            restoGastos = 0;
                        }
                    }

                    // Luego calcula el capital de la cuota
                    cuota = Math.Round((totalCuota - interes - honora - gastos), 2);
                    if (cuota < 0) {
                        interes = interes + cuota;
                        cuota = 0;
                    }                   

                    // Entonces crea cada cuota del convenio
                    d = new Deuda(Fechas.ToDiaHabil(FechaInicio.AddDays(30 * (i - corregirFecha))), 
                                    cdCuota, ddCuota, false, "CONVENIO-CUOTA: " + Tipo, 
                                        cuota, interes, honora, gastos, null, this, i);
                    Cuotas.Add(d);

                    // Finalemente recalcula los saldos por cuota
                    saldo -= totalCuota;
                    saldoCapital -= cuota;
                }
            } catch (Exception e) {
                Cuotas.Clear();
                FechaAlta = Fechas.FechaNull;
                throw new DataErrorException("ERROR-CONVENIO", e.ToString());
            }
        }

        /// <summary>
        ///   Este método se utiliza para obtener la deuda correspondiente a
        ///   a una cuota determinada del convenio, pasada en dicho argumento. 
        ///   Si la cuota es 0 entonces se tratará del anticipo y si no existe
        ///   tal cuota se retonra null. Puede lanzar una DataErrorException 
        ///   si tiene problemas.
        /// </summary>
        /// <returns>
        ///   La cuota del convenio asociada al numero pasado como argumento.
        /// </returns>
        public virtual Deuda getCuota(int cuota) {
            try {
                if (cuota < 0 || cuota > CtdadCuotas)
                    return null;

                foreach (Deuda cta in Cuotas)
                    if (cta.Cuota == cuota)
                        return cta;

                return null;
            } catch (Exception e) {
                throw new DataErrorException("ERROR-CONVENIO", e.ToString());
            }
        }

        /// <summary>
        /// Este método se utiliza para obtener la primer cuota del convenio
        /// la cual puede ser el anticipo (cuota 0) o, si el convenio se hizo
        /// sin anticipo, la cuota 1. Puede lanzar una DataErrorException si 
        /// tiene problemas.
        /// </summary>
        /// <returns>
        /// La cuota del convenio asociada al numero pasado como argumento.
        /// </returns>
        public virtual Deuda getPrimeraCuota() {
            try {
                Deuda dda = null;
                for (int i = 0; i <= CtdadCuotas; i++) {
                    dda = getCuota(i);
                    if (dda != null)
                        return dda;
                }
                return dda;
            } catch (Exception e) {
                throw new DataErrorException("ERROR-CONVENIO", e.ToString());
            }
        }

        /// <summary>
        ///   Este método devuelve la deuda actual, como la deuda formada
        ///   tanto por la deuda origen como por gastos, honorarios, etc,
        ///   más reciente activa de la colección de cuotas del convenio.
        ///   NOTA: refresca las cuotas antes de verificar si esta cancelada.
        /// </summary>
        /// <returns>
        ///   La deuda activa actual sin ordenar, o una lista vacia si no 
        ///   hay nada. 
        /// </returns>
        public virtual IList<Deuda> getCuotasPendientes() {
            try {
                IList<Deuda> lista = new List<Deuda>();
                foreach (Deuda cta in Cuotas) {
                    cta.refrescar();
                    if (cta.isAlive() && !cta.estaCancelada())
                        lista.Add(cta);
                }
                return lista;
            } catch (Exception e) {
                throw new DataErrorException("ERROR-CUENTA", e.ToString());
            }
        }

        /// <summary>
        ///   Este método se utiliza para obtener la deuda vencida de 
        ///   un convenio (como las cuotas que tienen saldo mayor a 0
        ///   y fecha de vencimiento anterior a hoy). Puede lanzar una 
        ///   DataErrorException si tiene problemas.
        /// </summary>
        /// <returns>
        ///   Una lista de cuotas vencidas pendientes de cancelación sin
        ///   ordenar, o una lista vacia si no hay nada. 
        /// </returns>
        public virtual IList<Deuda> getCuotasVencidas() {
            try {
                IList<Deuda> lista = new List<Deuda>();
                foreach (Deuda cta in getCuotasPendientes())
                    if (cta.FechaVencimiento.Date < DateTime.Today)
                        lista.Add(cta);
                return lista;
            } catch (Exception e) {
                throw new DataErrorException("ERROR-CONVENIO", e.ToString());
            }
        }

        /// <summary>
        ///   Este método se utiliza para obtener las cuotas canceladas
        ///   de un convenio (como las cuotas que tienen saldo igual 0).
        ///   Podría lanzar una DataErrorException si tiene problemas.
        ///   NOTA: refresca las cuotas antes de verificar si esta cancelada.
        /// </summary>
        /// <returns>
        ///   Una lista de cuotas canceladas sin ordenar, o una lista 
        ///   vacia si no hay nada. 
        /// </returns>
        public virtual IList<Deuda> getCuotasCanceladas() {
            try {
                IList<Deuda> lista = new List<Deuda>();
                foreach (Deuda cta in Cuotas) {
                    cta.refrescar();
                    if (cta.isAlive() && cta.estaCancelada())
                        lista.Add(cta);
                }
                return lista;
            } catch (Exception e) {
                throw new DataErrorException("ERROR-CONVENIO", e.ToString());
            }
        }

        /// <summary>
        ///   Este método calcula el importe de la deuda pendiente del convenio
        ///   como la suma de los importes de las cuotas pendiente. Se lanza una 
        ///   DataErrorException si tiene problemas.
        /// </summary>
        /// <returns>
        ///   El importe total de deuda vencida del convenio.
        /// </returns>
        public virtual double getMontoSaldoTotalActual() {
            try {
                double saldo = 0;
                foreach (Deuda cta in getCuotasPendientes())
                    saldo += cta.Total;
                return saldo;
            } catch (Exception e) {
                throw new DataErrorException("ERROR-CONVENIO", e.ToString());
            }
        }

        /// <summary>
        ///   Este método aplica un pago al convenio, pero a una cuota determinada
        ///   que se conoce. Lanza DataErrorException si no puede aplicar el pago.
        /// </summary>
        /// <param name = "pago">
        ///   El pago a aplicarse al convenio.
        /// </param>
        /// <param name = "cuota">
        ///   La cuota a la que debe aplicarse el pago.
        /// </param>
        /// <returns>
        ///   El resto que queda una vez aplicado el pago (si queda algo).
        /// </returns>
        public virtual double ingresarPago(Pago pago, Deuda cuota) {
            if (cuota == null)
                throw new DataErrorException("ERROR-ELEMENTO-NULO");
            if (!Cuotas.Contains(cuota))
                throw new DataErrorException("ERROR-ELEMENTO-NOINLIST");
            if (cuota.Total <= 0)
                throw new DataErrorException("ERROR-PAGO-SINDEUDA");
            if (pago == null)
                throw new DataErrorException("ERROR-PAGO-TIPO");
            if (pago.getSaldo() <= 0)
                throw new DataErrorException("ERROR-PAGO-SINIMPORTE");

            Activo = true; // Por las dudas activa el convenio
            save();
            return cuota.aplicarPago(pago); // (puede desactivar el convenio si lo cancela)                
        }

        /// <summary>
        ///   Este método obtiene el conjunto de pagos asociados al
        ///   convenio, es decir a cuotas perteneciente al mismo.
        ///   NOTA: refresca las cuotas antes de verificar si esta cancelada.
        /// </summary>
        /// <returns>
        ///   Un conjunto de pagos asociados directamente al convenio
        ///   sin ordenar, o una lista vacia si no hay nada. 
        /// </returns>
        public virtual IList<Pago> getPagos() {
            try {
                IList<Pago> lista = new List<Pago>();
                foreach (Deuda cta in Cuotas) {
                    cta.refrescar();
                    foreach (Imputacion imp in cta.Imputaciones)
                        lista.Add(imp.Pago);
                }
                return lista;
            } catch (Exception e) {
                throw new FatalErrorException("ERROR-CONVENIO", e.ToString());
            }
        }

        /// <summary>
        ///   Este método verifica el estado del convenio para determinar si
        ///   se debe caer el convenio o continua activo.
        /// </summary>
        /// <returns>
        ///   Devuelve 'true' si el convenio debe caer o false si no. 
        /// </returns>
        public virtual bool convenioDebeCaer() {
            return (getCuotasVencidas().Count > Tipo.MaxCuotasCaidas);
        }

        /// <summary>
        ///   Este método verifica si el convenio tiene algo de deuda 
        ///   y, si no es así, entonces lo cancela.
        /// </summary>
        /// <returns>
        ///   Devuelve 'true' si el convenio debe caer o false si no. 
        /// </returns>
        public virtual void verificarYCancelarReavivar() {
            if (getMontoSaldoTotalActual() <= 0)
                cancelarConvenio();
            else
                descancelarConvenio();                
        }

        /// <summary>
        ///   Este método ejecuta la cancelación de un convenio, desactivandolo 
        ///   y ejecutando el proceso delete del mismo, pero dejando un comentario
        ///   en la observacion. Ademas, se resetean los estados de todas las deudas
        ///   de la cuenta asociada y que estaban en convenio. Finalmente se verifica
        ///   si se debe cancelar la cuenta.
        /// </summary>
        public virtual void cancelarConvenio() {
            if (!isAlive())
                return;

            IList<Deuda> ddas = new List<Deuda>();
            try {
                long scn = Persistencia.Controlador.iniciarTransaccion();
                Descripcion += string.Format(
                                    " **CANCELADO** en fecha {0} por {1}",
                                    DateTime.Now,
                                    Sistema.Controlador.SecurityService.getUsuario().Nombre);
                Activo = false;
                base.delete();

                foreach (Deuda deuda in Cuenta.getDeudaEnConvenio()) {
                    ddas.Add(deuda);
                    deuda.Estado = _cancelconvenio;
                    deuda.save();
                }

                Cuenta.ConvenioActivo = null;
                Cuenta.save();
                Persistencia.Controlador.commitTransaccion(scn);
            } catch (Exception e) {
                Persistencia.Controlador.rollbackTransaccion();
                foreach (Deuda deuda in ddas)
                    deuda.refrescar();                
                Cuenta.refrescar();
                refrescar();
                throw new DataErrorException("ERROR-CONVENIO", e.ToString());
            }
        }

        /// <summary>
        ///   Este método ejecuta la baja de un convenio, desactivandolo 
        ///   y ejecutando el proceso delete del mismo.
        /// </summary>
        public virtual void bajarConvenio() {
            if (!isAlive())
                return;

            try {
                long scn = Persistencia.Controlador.iniciarTransaccion();
                Descripcion += string.Format(
                                    " **CAIDO** en fecha {0} por {1}",
                                    DateTime.Now,
                                    Sistema.Controlador.SecurityService.getUsuario().Nombre);
                Activo = false;
                if (Cuenta.ConvenioActivo.Equals(this))
                    Cuenta.ConvenioActivo = null;
                base.delete();
                Persistencia.Controlador.commitTransaccion(scn);
            } catch (Exception e) {
                Persistencia.Controlador.rollbackTransaccion();
                refrescar();
                Cuenta.refrescar();
                throw new DataErrorException("ERROR-CONVENIO", e.ToString());
            }

            try {
                // Aqui actualiza el estado de la cuenta y desvincula el convenio
                string str = "**CONVENIO CAIDO** en fecha:" + DateTime.Now.ToShortDateString();
                Cuenta.setearEstado(_conveCaido, str);
            } catch (Exception e) {
                throw new DataErrorException("ERROR-POSCAECONVE-CONVE", e.ToString());
            }
        }

        /// <summary>
        ///   Este método ejecuta la descancelación de una cuenta, verificando
        ///   que si la misma tiene el estado cancelado, entonces lo saca y la 
        ///   vuelve al estado inmediato anterior según el historial de estados 
        ///   ó a estado "en gestion" si no tiene historial.
        /// </summary>
        public virtual void descancelarConvenio() {
            if (isAlive())
                return;

            if (Cuenta.ConvenioActivo != null)
                throw new DataErrorException("ERROR-NOUNDEL-CONVE-NOACT");

            try {
                long scn = Persistencia.Controlador.iniciarTransaccion();
                Descripcion += string.Format(
                                    " **DESCANCELADO** en fecha {0} por {1}",
                                    DateTime.Now,
                                    Sistema.Controlador.SecurityService.getUsuario().Nombre);
                Activo = true;
                undelete();

                IList<Deuda> lista = Deudas.OrdenarPorFechaDesc(
                                        Deudas.GetByCriteria(true,
                                            new[] { Criterios.Igual("Cuenta", Cuenta),
                                                    Criterios.Igual("Estado", _cancelconvenio)}, null)); 

                if (lista != null && lista.Count > 0) {
                    lista[0].Estado = _convenio;
                    lista[0].save();
                }

                Cuenta.ConvenioActivo = this;
                Cuenta.descancelarCuenta();
                Cuenta.save();
                Persistencia.Controlador.commitTransaccion(scn);
            } catch (Exception e) {
                Persistencia.Controlador.rollbackTransaccion();
                Cuenta.refrescar();
                refrescar();
                throw new DataErrorException("ERROR-CONVENIO", e.ToString());
            }
        }

        /// <summary>
        /// Ver descripción en clase base. En este caso al deletearse
        /// el convenio, primero se da de baja el mismo para liberar. 
        /// Puede lanzar una DataErrorException si tiene problemas.
        /// </summary>
        public override void delete() {
            if (!isAlive())
                return;
            bajarConvenio();
        }

        /// <summary>
        ///   Este método genera el string por defecto a mostrar en todos lados.
        /// </summary>
        public override string ToString() {
            return string.Format("{0}({1})(Sdo ${2})", Tipo, FechaAlta.ToShortDateString(), getMontoSaldoTotalActual());
        }
    }
}