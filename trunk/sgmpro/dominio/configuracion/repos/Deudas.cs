///////////////////////////////////////////////////////////
//  Deudas.cs
//  Implementation of the Class Deudas
//  Generated by Enterprise Architect
//  Created on:      13-May-2009 03:55:00 p.m.
//  Original author: Fito
///////////////////////////////////////////////////////////
using System;
using System.Collections.Generic;
using scioPersistentLibrary.acceso;
using scioToolLibrary;

namespace sgmpro.dominio.configuracion.repos {
    /// <summary>
    /// Esta clase representa al Repositorio de persistencia
    /// de Nhibernate para la entidad deuda de Cta Cte 
    /// (Deuda) del sistema.
    /// </summary>
    public class Deudas : RepositorioPersistente<Deuda> {
        /// <summary>
        /// Este método ordena un conjunto de deudas según su fecha 
        /// pero en forma ascendente (primero van los mas viejos).
        /// </summary>
        /// <param name="origen">
        /// El conjunto de deudas a ordenar.
        /// </param>
        /// <returns>
        /// El conjunto de deudas ordenado por fecha (ascendente).
        /// </returns>
        public static IList<Deuda> OrdenarPorFecha(IList<Deuda> origen) {
            Deuda temp = new Deuda();
            IList<Deuda> conjunto = new List<Deuda>();

            while (conjunto.Count < origen.Count) {
                DateTime piso = DateTime.Now.AddYears(999);
                foreach (Deuda obj in origen)
                    if (!conjunto.Contains(obj))
                        if (obj.FechaVencimiento < piso) {
                            piso = obj.FechaVencimiento;
                            temp = obj;
                        }
                conjunto.Add(temp);
            }

            return conjunto;
        }

        /// <summary>
        /// Este método ordena un conjunto de deudas según su fecha 
        /// pero en forma descendente (primero van los mas nuevos).
        /// </summary>
        /// <param name="origen">
        /// El conjunto de deudas a ordenar.
        /// </param>
        /// <returns>
        /// El conjunto de deudas ordenado por fecha (descendente).
        /// </returns>
        public static IList<Deuda> OrdenarPorFechaDesc(IList<Deuda> origen) {
            IList<Deuda> conjunto = new List<Deuda>();
            Deuda temp = new Deuda();

            while (conjunto.Count < origen.Count) {
                DateTime piso = Fechas.FechaNull.AddYears(-99);
                foreach (Deuda obj in origen)
                    if (!conjunto.Contains(obj))
                        if (obj.FechaVencimiento > piso) {
                            piso = obj.FechaVencimiento;
                            temp = obj;
                        }
                conjunto.Add(temp);
            }

            return conjunto;
        }
    }
}