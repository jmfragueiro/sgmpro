///////////////////////////////////////////////////////////
//  TiposListaGestion.cs
//  Implementation of the Class TiposListaGestion
//  Generated by Enterprise Architect
//  Created on:      13-May-2009 03:55:00 p.m.
//  Original author: Fito
///////////////////////////////////////////////////////////
using System.Collections.Generic;
using scioParamLibrary.dominio;
using scioPersistentLibrary.acceso;
using scioPersistentLibrary.criterios;
using scioSecureLibrary.dominio;
using System;

namespace sgmpro.dominio.configuracion.repos {
    ///<summary>
    /// Persistencia de la clase ListaGestion
    ///</summary>
    public class TiposListaGestion : RepositorioPersistente<TipoListaGestion> {
        /// <summary>
        /// Este método devuelve un listado de tipos de listas de gestion 
        /// vivas según su cuenta si poseen un determinado perfil como salida
        /// y un determinado tipo de gestion a generar.
        /// </summary>
        /// <param name="perfil">
        /// El perfil de salida contra el cual comparar.
        /// </param>
        /// <param name="tipo">
        /// El tipo de gestion contra el cual comparar.
        /// </param>
        /// <returns>
        /// El listado de tipos de listas de gestion vivas que tienen el perfil 
        /// como salida y que generan el tipo de gestion deseado.
        /// </returns>
        public static IList<TipoListaGestion> GetAliveByPerfilTipoGestion(Perfil perfil, Parametro tipo) {
            return OrdenarPorPriodidad(GetByCriteria(
                        true,
                        new[] {
                            Criterios.Igual("Perfil", perfil),
                            Criterios.Igual("TipoGestion", tipo)
                        },
                        null));
        }

        /// <summary>
        /// Este método ordena un conjunto de tipos de lista según su prioridad 
        /// y, para igual prioridad, por fecha de alta descendente. Las prioridades 
        /// se toman como que las mayores son mas prioritarias, es decir que una 
        /// lista con prioridad 10 se evalua antes que una con prioridad 5.
        /// </summary>
        /// <param name="origen">
        /// El conjunto de tipos de lista a ordenar.
        /// </param>
        /// <returns>
        /// El conjunto de tipos de lista ordenado por prioridad.
        /// </returns>
        public static IList<TipoListaGestion> OrdenarPorPriodidad(IList<TipoListaGestion> origen) {
            IList<TipoListaGestion> conjunto = new List<TipoListaGestion>();
            TipoListaGestion temp = new TipoListaGestion();

            while (conjunto.Count < origen.Count) {
                long piso = -1;
                DateTime techo;
                DateTime tecori = techo = DateTime.Now.AddYears(-99);
                foreach (TipoListaGestion obj in origen)
                    if (!conjunto.Contains(obj)) {
                        long prio = 0;
                        try { prio = obj.Prioridad; }
                        catch { }
                        if (prio >= piso) {
                            if (prio > piso) {
                                techo = tecori;
                                piso = prio;
                            }

                            if (obj.FechaAlta > techo) {
                                techo = obj.FechaAlta;
                                temp = obj;
                            }
                        }
                    }
                conjunto.Add(temp);
            }

            return conjunto;
        }
    }
}