///////////////////////////////////////////////////////////
//  Pagos.cs
//  Implementation of the Class Pagos
//  Generated by Enterprise Architect
//  Created on:      13-May-2009 03:55:00 p.m.
//  Original author: Fito
///////////////////////////////////////////////////////////
using System;
using System.Collections.Generic;
using NHibernate;
using NHibernate.Criterion;
using NHibernate.Transform;
using scioPersistentLibrary;
using scioPersistentLibrary.acceso;
using scioPersistentLibrary.interfases;
using scioToolLibrary;

namespace sgmpro.dominio.configuracion.repos {
    /// <summary>
    /// Esta clase representa al Repositorio de persistencia
    /// de Nhibernate para la entidad Movimiento de Cta Cte 
    /// (Pago) del sistema.
    /// </summary>
    public class Pagos : RepositorioPersistente<Pago> {
        /// <summary>
        /// Este método devuelve un listado de pagos vivos según su cuenta
        /// y permite agregar algún criterio mas para la consulta y hasta un
        /// criterio de ordenamiento determinado.
        /// </summary>
        /// <param name="convenio">
        /// El convenio para el cual se desea obtener los pagos.
        /// </param>
        /// <param name="criterio">
        /// Un criterio extra para sumar a la consulta (puede ser null).
        /// </param>
        /// <param name="orden">
        /// Un orden determinado para la consulta (puede ser null).
        /// </param>  
        /// <returns>
        /// El listado de pagos de la cuenta+criterio y en el orden 
        /// requerido (o en su defecto por fecha descendente).
        /// </returns>
        public static IList<Pago> GetAliveByConvenioCriteriaOrder(
            Convenio convenio,
            IList<ICriterioConsulta> criterio,
            IList<IOrdenConsulta> orden) {
            ICriteria sql = Persistencia.Controlador.getSsp()
                .CreateCriteria(typeof(Pago))
                .Add(Restrictions.Eq("FechaBaja", Fechas.FechaNull))
                .CreateAlias("Imputaciones", "imps")
                .CreateAlias("imps.Deuda", "deuda")
                .Add(Restrictions.Eq("deuda.Convenio", convenio))
                .SetResultTransformer(new DistinctRootEntityResultTransformer());

            if (criterio != null)
                foreach (ICriterioConsulta cr in criterio)
                    sql.Add(cr.getCriterioNH());

            if (orden != null)
                foreach (IOrdenConsulta ord in orden)
                    sql.AddOrder(ord.getOrdenNH());
            else
                sql.AddOrder(Order.Desc("Fecha"));

            return sql.List<Pago>();
        }

        /// <summary>
        /// Este método ordena un conjunto de Pagos según su fecha 
        /// pero en forma ascendente (primero van los mas viejos).
        /// </summary>
        /// <param name="origen">
        /// El conjunto de Pagos a ordenar.
        /// </param>
        /// <returns>
        /// El conjunto de Pagos ordenado por fecha (ascendente).
        /// </returns>
        public static IList<Pago> OrdenarPorFecha(IList<Pago> origen) {
            Pago temp = new Pago();
            IList<Pago> conjunto = new List<Pago>();

            while (conjunto.Count < origen.Count) {
                DateTime piso = DateTime.Now.AddYears(999);
                foreach (Pago obj in origen)
                    if (!conjunto.Contains(obj))
                        if (obj.Fecha < piso) {
                            piso = obj.Fecha;
                            temp = obj;
                        }
                conjunto.Add(temp);
            }

            return conjunto;
        }
    }
}