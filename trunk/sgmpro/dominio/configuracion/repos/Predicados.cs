///////////////////////////////////////////////////////////
//  Pagos.cs
//  Implementation of the Class Pagos
//  Generated by Enterprise Architect
//  Created on:      13-May-2009 03:55:00 p.m.
//  Original author: Fito
///////////////////////////////////////////////////////////
using System;
using System.Collections.Generic;
using NHibernate;
using NHibernate.Criterion;
using NHibernate.Transform;
using scioPersistentLibrary;
using scioPersistentLibrary.acceso;
using scioPersistentLibrary.interfases;
using scioToolLibrary;

namespace sgmpro.dominio.configuracion.repos {
    /// <summary>
    /// Esta clase representa al Repositorio de persistencia
    /// de Nhibernate para la entidad Predicado del sistema.
    /// </summary>
    public class Predicados : RepositorioPersistente<Predicado> {
        /// <summary>
        /// Este método ordena un conjunto de predicados según su numero de orden
        /// y, para igual orden, por fecha de ultima modificacion descendente. Los
        /// numeros de orden se toman como que los menores son mas prioritarios.
        /// </summary>
        /// <param name="origen">
        /// El conjunto de predicados a ordenar.
        /// </param>
        /// <returns>
        /// El conjunto de predicados ordenado por numbero de orden.
        /// </returns>
        public static IList<Predicado> OrdenarPorNroOrden(IList<Predicado> origen) {
            IList<Predicado> conjunto = new List<Predicado>();
            Predicado temp = new Predicado();

            while (conjunto.Count < origen.Count) {
                long minord = 9999;
                DateTime techo;
                DateTime tecori = techo = DateTime.Now.AddYears(99);
                foreach (Predicado obj in origen)
                    if (!conjunto.Contains(obj)) {
                        long orden = obj.NroOrden;
                        if (orden <= minord) {
                            if (orden < minord) {
                                techo = tecori;
                                minord = orden;
                            }

                            if (obj.FechaUMod < techo) {
                                techo = obj.FechaUMod;
                                temp = obj;
                            }
                        }
                    }
                conjunto.Add(temp);
            }

            return conjunto;
        }
    }
}