///////////////////////////////////////////////////////////
//  Cuentas.cs
//  Implementation of the Class Cuentas
//  Generated by Enterprise Architect
//  Created on:      13-May-2009 03:55:00 p.m.
//  Original author: Fito
///////////////////////////////////////////////////////////
using System.Collections.Generic;
using scioPersistentLibrary.acceso;
using scioPersistentLibrary.criterios;
using scioPersistentLibrary.enums;
using scioPersistentLibrary.orden;
using scioSecureLibrary.dominio;
using System.Data;
using System;
using scioBaseLibrary;
using scioToolLibrary.enums;
using scioPersistentLibrary;

namespace sgmpro.dominio.configuracion.repos {
    /// <summary>
    /// Esta clase representa al Repositorio de persistencia
    /// de Nhibernate para la entidad Cuenta del sistema.
    /// </summary>
    public class Cuentas : RepositorioPersistente<Cuenta> {
        /// <summary>
        /// Este método obtiene las cuentas de una entidad con las que debe generar una lista, 
        /// para lo cual verifica que esten activadas, que no esten dadas de baja, que aún no 
        /// tengan lista asignada y que se cumplan loscriterios del Tipo de lista respecto de:
        /// Elegibilidad: que esté en fecha de elegibilidad.
        /// Cancelación: que la cuenta no esté en un estado "controlado".
        /// Pendiente: que la cuenta no posea gestiones pendientes.
        /// </summary>
        /// <param name="entidad">
        /// El ID de la entidad desde la cual obtener las cuentas.
        /// </param>
        /// <param name="elig">
        /// Elegibilidad: que esté en fecha de elegibilidad.
        /// </param>
        /// <param name="cancel">
        /// Cancelación: que la cuenta no esté en un estado "controlado".
        /// </param>
        /// <param name="pend">
        /// Pendiente: que la cuenta no posea gestiones pendientes.
        /// </param>
        /// <returns>
        /// La tabla con la lista de cuentas obtenidas segun los parámetros.
        /// </returns>
        public static DataTable ObtenerCuentasParaGeneracion(Guid entidad, bool elig, bool cancel, bool pend) {
            string sql = "select cta_id as cta, cta_gestor as gestor" +
                         "  from cuenta" +
                         " where cta_activada = 1" +
                         "   and cta_fechabaja = convert(datetime, '1753-01-01 00:00:000', 121)" +
                         "   and cta_listaasignada is null" +
                         "   and cta_entidad = '" + entidad + "'" +
                         "   and (1 = " + ((elig) ? "0" : "1") +
                         "        or cta_fechaelegible <= getdate())" +
                         "   and (1 = " + ((cancel) ? "0" : "1") +
                         "        or 1 <> (select par_valorbool " +
                         "                   from parametro " +
                         "                  where par_id = cta_estado))" +
                         "   and (1 = " + ((pend) ? "0" : "1") +
                         "        or not exists (select 1 " +
                         "                         from gestion " +
                         "                        where ges_cuenta = cta_id and ges_estado = " +
                         "                          (select par_id " +
                         "                             from parametro" +
                         "                            where par_clave = 'ESTADOGESTION.PENDIENTE')))";
            DataTable dtrows = Persistencia.EjecutarSqlSelect(sql, Persistencia.Controlador.CadenaConexion);
            Sistema.Controlador.logear( "GENERICO", ENivelMensaje.INFORMACION,
                "Cuentas a Procesar para " + entidad + ":" + dtrows.Rows.Count);
            return dtrows;
        }

        /// <summary>
        /// Este método devuelve las cuentas de una persona (como titular).
        /// </summary>
        /// <param name="titular">
        /// La persona titular de la que se quiere obtener la lista de cuentas.
        /// </param>
        /// <returns>
        /// La lista de cuentas de la persona (titular) proporcionada.
        /// </returns>
        public static IList<Cuenta> GetAliveByTitular(Persona titular) {
            return GetByCriteria(
                true,
                new[] {Criterios.Igual("Titular", titular)},
                new[] {Orden.Asc("Entidad"), Orden.Asc("Producto")});
        }

        /// <summary>
        /// Calcula la cantidad de cuentas por entidad.
        /// </summary>
        public static long CountByEntidad(Entidad entidad) {
            return (long)SelectAggByCriteria(
                             true,
                             EFuncionAgregacion.COUNT,
                             "Id",
                             new[] {Criterios.Igual("Entidad", entidad)});
        }

        /// <summary>
        /// Calcula la cantidad de cuentas por entidad.
        /// </summary>
        public static long CountByProducto(Producto producto) {
            return (long)SelectAggByCriteria(
                             true,
                             EFuncionAgregacion.COUNT,
                             "Id",
                             new[] {Criterios.Igual("Producto", producto)});
        }

        /// <summary>
        /// método que obtiene la cantidad de cuentas asignadas
        /// al usuario como cartera pra gestion.
        /// </summary>
        public static long CountByGestor(Usuario gestor) {
            return (long)SelectAggByCriteria(
                            true,
                            EFuncionAgregacion.COUNT,
                            "Id",
                            new[] {Criterios.Igual("Gestor", gestor)});
        }
    }
}