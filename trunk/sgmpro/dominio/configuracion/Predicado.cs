///////////////////////////////////////////////////////////
//  Predicado.cs
//  Implementation of the Class Predicado
//  Generated by Enterprise Architect
//  Created on:      20-abr-2009 16:57:18
//  Original author: Fernando
///////////////////////////////////////////////////////////
using System;
using scioBaseLibrary;
using scioBaseLibrary.excepciones;
using scioPersistentLibrary.acceso;
using scioToolLibrary;
using scioToolLibrary.enums;

namespace sgmpro.dominio.configuracion {
    /// <summary>
    /// Clase que contiene un predicado
    /// </summary>
    public class Predicado : EntidadIdentificada<Predicado> {
        /// <summary>
        /// Numero de orden del predicado dentro de la regla
        /// </summary>
        public virtual int NroOrden { get; set; }
        /// <summary>
        /// Descricpcion
        /// </summary>
        public virtual string Descripcion { get; set; }
        /// <summary>
        /// Selector. Puede ser positivo (true) o negativo (false)
        /// </summary>
        public virtual bool Selector { get; set; }
        /// <summary>
        /// Vocablo
        /// </summary>
        public virtual string VocabloPredicado { get; set; }
        /// <summary>
        /// Criterios de comparacion
        /// </summary>
        public virtual string Criterio { get; set; }
        /// <summary>
        /// Valor. Cuando esta propiedad esta seteada, la Variable no 
        /// </summary>
        public virtual string Valor { get; set; }
        ///<summary>
        /// Variable. Cuando esta propiedad esta seteada, el valor no
        ///</summary>
        public virtual Variable Variable { get; set; }
        /// <summary>
        /// Conectoreeee entre predicados
        /// </summary>
        public virtual string Conector { get; set; }
        /// <summary>
        /// Estrategia a la cual pertenece
        /// </summary>
        public virtual Estrategia Estrategia { get; set; }
        /// <summary>
        /// La fecha de alta del Predicado. No Nulo.
        /// </summary>                
        public virtual DateTime FechaAlta {
            get { return _fechaAlta; }
            set { _fechaAlta = Fechas.GetOkDate(value); }
        }
        private DateTime _fechaAlta = Fechas.FechaNull;
        /// <summary>
        /// Fecha de última modificación
        /// </summary>
        public virtual DateTime FechaUMod {
            get { return _fechaumod; }
            set { _fechaumod = Fechas.GetOkDate(value); }
        }
        private DateTime _fechaumod = Fechas.FechaNull;

        /// <summary>
        /// Verifica si una cuenta cumple con este predicado, realizando primero 
        /// el reemplazo de las variables del sistema, que pudiesen existir, por 
        /// sus valores correspondientes.
        /// </summary>
        public virtual bool evaluar(Guid ctaId) {
            try {
                string valor = reemplazarVariablesDeSistema((Variable != null) ? Variable.Valor : Valor);
                bool eval = VocabloFactory.Build(VocabloPredicado).Evaluar(ctaId, Criterio, valor);                
                return Selector ? eval : !eval;
            } catch (Exception e) {
                Sistema.Controlador.logear("ERROR-EVAL-PREDICADO", ENivelMensaje.ERROR
                    , "Cuenta:" + ctaId + " - Pred:" + this + "\r\n" + e);
                limpiarMemoria();
                return false;
            }
        }

        /// <summary>
        /// Este método permite reemplazar variables fijas de sistema que se 
        /// pueden utilizar en los vocablos, como por ejemplo $$_HOY_$$ para
        /// obtener la fecha actual. Para que se reconozaca ,la variable, la
        /// misma debería comenzar con '$$_' y ser un nombre reconocido por
        /// el sistema.
        /// </summary>
        /// <param name="variable">
        /// El nombre de la variable que se quiere reemplazar.
        /// </param>
        /// <returns>
        /// El valor de la variable de sistema (una vez reemplazada) o bien
        /// la propia cadena de entrada (el valor de 'variable'), si no se 
        /// reconoce el nombre que viene allí.
        /// </returns>
        public virtual string reemplazarVariablesDeSistema(string variable) {
            if (variable.Equals("$$_HOY_$$"))
                return DateTime.Now.Date.ToString();
            if (variable.Equals("$$_AYER_$$"))
                return DateTime.Now.AddDays(-1).Date.ToString();
            if (variable.Equals("$$_MANA_$$"))
                return DateTime.Now.AddDays(1).Date.ToString();

            return variable;
        }

        /// <summary>
        /// Este método intenta limpiar un poco la memoria de la generación
        /// para evitar un system.outofmemory exception que puede darse en
        /// las generaciones largas.
        /// </summary>
        public virtual void limpiarMemoria() {
            GC.Collect();
            GC.WaitForPendingFinalizers();
            Sistema.Controlador.logear(
                "GENERICO",
                ENivelMensaje.INFORMACION,
                "Punto de Control (GC Collect): Error en predicado|M:" +
                (GC.GetTotalMemory(false)/1024));
        }

        /// <summary>
        /// Ver descripción en clase base. En este caso al deletearse el
        /// predicado, primero se elimina de la estrategia. Puede lanzar 
        /// una DataErrorException si tiene problemas.
        /// </summary>
        public override void delete() {
            if (!isAlive())
                return;

            try {
                Estrategia.ListaPredicados.Remove(this);
            } catch (Exception e) {
                throw new DataErrorException("ERROR-PREDICADO", e.ToString());
            }

            try {
                base.delete();
            } catch (Exception e) {
                undelete();
                Estrategia.ListaPredicados.Add(this);
                throw new DataErrorException("ERROR-PREDICADO", e.ToString());
            }
        }

        /// <summary>
        /// Este método genera el string por defecto a mostrar en todos lados.
        /// </summary>
        public override string ToString() {
            return string.Format("({0}){1}", NroOrden, Descripcion);
        }
    }
}