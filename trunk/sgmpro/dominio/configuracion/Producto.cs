///////////////////////////////////////////////////////////
//  Producto.cs
//  Implementation of the Class Producto
//  Generated by Enterprise Architect
//  Created on:      20-abr-2009 16:57:19
//  Original author: Fernando
///////////////////////////////////////////////////////////
using System;
using System.Collections.Generic;
using scioBaseLibrary.excepciones;
using scioPersistentLibrary.acceso;
using sgmpro.dominio.configuracion.repos;
using scioPersistentLibrary.criterios;

namespace sgmpro.dominio.configuracion {
    /// <summary>
    /// Esta clase representa a un Producto para una Entidad del sistema. Los productos
    /// representan a los distintos nucleos generadores de deuda de cada entidad (como
    /// tarjetas de crédito, crédito para compra de electrodomésticos, hipotecas, etc.).
    /// Cada Cuenta de Moroso esta relacionada a un único Producto. Esta clase es persistente.
    /// </summary>
    public class Producto : EntidadIdentificada<Producto> {
        /// <summary>
        /// La Entidad a la que pertenece (que da origen a) la cuenta. No Nulo. FK.
        /// </summary>
        public virtual Entidad Entidad { get; set; }
        /// <summary>
        /// El Codigo del producto (según se usa en su origen). No Nulo.
        /// </summary>
        public virtual string Codigo { get; set; }
        /// <summary>
        /// El Nombre del producto (utilizado en la aplicación). No Nulo.
        /// </summary>
        public virtual string Nombre { get; set; }
        /// <summary>
        /// La descripción del producto (utilizado en la aplicación). No Nulo.
        /// </summary>
        public virtual string Descripcion { get; set; }
        /// <summary>
        /// Si debe actualizar la deuda al pasar su vto en las cuentas del Producto. No Nulo.
        /// </summary>
        public virtual bool Actualizar { get; set; }
        /// <summary>
        /// El estado de activación del Producto. No Nulo.
        /// </summary>
        public virtual bool Activado { get; set; }
        /// <summary>
        /// Determina si los tramos del producto son temporales (en días 
        /// transcurridos desde la 1ra gestión) -'true'-, ó si se cuentan 
        /// por cantidad de gestiones -'false'-. No Nulo.
        /// </summary>
        public virtual bool TramosTemporales { get; set; }
        /// <summary>
        /// Determina si, al momento de pagar, los gastos se incluyen en el 
        /// capital (para generar un solo recibo). No Nulo.
        /// </summary>
        public virtual bool UnificaGastos { get; set; }
        /// <summary>
        /// Formula para imputar un pago: 'G100:H20:C100:I100' quiere decir:
        /// 1)lo que hay 100% a gastos;2)de lo que queda 20% a HONORARIOS;3)
        /// de lo que queda 100% a capital;4)de lo que queda 100% a INTERES.
        /// </summary>
        public virtual string FormulaImputacion { get; set; }
        /// <summary>
        /// Determina si el producto acepta mantener varias deudas informadas -'true'- 
        /// (es deccir que al cargar una deuda informada, la misma se agrega y no pisa
        /// lo que ya habia), ó si solo permite una -'false'-. No Nulo.
        /// </summary>
        public virtual bool DeudaEnCuotas { get; set; }
        /// <summary>
        /// Conjunto de tramos de gestión asociados al producto. No Nulo. FK (List).
        /// </summary>
        public virtual IList<Tramo> Tramos { get; set; }

        /// <summary>
        /// Constructor que instancia los conjuntos de la clase.
        /// </summary>
        public Producto() {
            Tramos = new List<Tramo>();
        }

        /// <summary>
        /// Este método obtiene el tramo del producto que le corresponde
        /// a una cuenta determinada del mismo, la cual se le pasa como
        /// argumento. Si la cuenta no es de este producto entonces vuelve
        /// con null.
        /// </summary>
        /// <returns>
        /// El tramo que le corresponde a la cuenta argumento.
        /// </returns>
        public virtual Tramo getTramoCorrespondiente(Cuenta cuenta) {
            try {
                if (!cuenta.Producto.Equals(this))
                    return null;

                refrescar();

                // Si tiene un estado que dice JUICIO, entonces el Tramo es LEGAL
                if (cuenta.Estado != null && cuenta.Estado.Nombre.ToUpper().Contains("JUICIO"))
                    return RepositorioGenerico<Tramo>.GetUniqueByCriteria(true, 
                                new[] { Criterios.Igual("Nombre", "LEGAL"),
                                        Criterios.Igual("Producto", this) });                

                long cantidad = (TramosTemporales)
                                    ? cuenta.getAntiguedadDeuda()
                                    : cuenta.getCantidadGestionesRealizadas();

                foreach (Tramo tramo in Productos.OrdenarPorLimite(Tramos))
                    if (cantidad < tramo.Limite && !tramo.Nombre.Equals("LEGAL"))
                        return tramo;

                return null;
            } catch (Exception e) {
                throw new DataErrorException("ERROR-PRODUCTO-TRAMO", e.ToString());
            }
        }

        /// <summary>
        /// Ver descripción en clase base.
        /// En este caso no deja borrar un producto si tiene cuentas aociadas.
        /// </summary>
        public override void delete() {
            if (!isAlive())
                return;

            if (Cuentas.CountByProducto(this) > 0)
                throw new DataErrorException("ERROR-NODEL-PROD-CTAS");

            foreach (Tramo tramo in Tramos)
                tramo.delete();

            try {
                base.delete();
                Entidad = null;
            } catch (Exception e) {
                throw new DataErrorException("ERROR-PRODUCTO", e.ToString());
            }
        }

        /// <summary>
        /// Este método genera el string por defecto a mostrar en todos lados.
        /// </summary>
        public override string ToString() {
            return string.Format("{0}: {1}", Codigo, Nombre);
        }
    }
}