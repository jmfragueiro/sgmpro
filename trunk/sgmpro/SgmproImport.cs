///////////////////////////////////////////////////////////
//  SgmproImport.cs
//  Implementation of the Class SgmproImport
//  Generated by Enterprise Architect
//  Created on:      13-abr-2009 17:23:42
//  Original author: Fito
///////////////////////////////////////////////////////////

using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Text;
using scioBaseLibrary;
using scioBaseLibrary.excepciones;
using scioParamLibrary.dominio;
using scioParamLibrary.dominio.repos;
using scioPersistentLibrary;
using scioPersistentLibrary.acceso;
using scioPersistentLibrary.criterios;
using scioSecureLibrary.dominio;
using scioToolLibrary;
using scioToolLibrary.enums;
using sgmpro.dominio.configuracion;
using sgmpro.dominio.configuracion.repos;
using sgmpro.dominio.gestion;

namespace sgmpro {
    public class SgmproImport {
        #region constantes
        private const double _FIJO_HONORARIO = .3;
        private const string _PRESTAMO = "PR. PERSONAL";
        private const string _REFINAN = "REFINANCIACIÓN";
        private const string _CUOTAYA = "CUOTA YA";
        private const string _VISA = "VISA";
        private const string _TARJETA = "TARJETA";
        //private const string _CFA_EFECTIVO = "0052";
        private const string _CFA_MUTUAL = "4052";
        private static readonly string _cadena = SgmproSistema.Controlador.CadenaConexion;
        private static readonly Usuario _usuario = SgmproSistema.Controlador.SecurityService.getUsuario();

        private static readonly Parametro _personal = Parametros.GetByClave("TIPOCONTACTO.PERSONAL");
        private static readonly Parametro _laboral = Parametros.GetByClave("TIPOCONTACTO.LABORAL");
        private static readonly Parametro _origencto = Parametros.GetByClave("ORIGENCONTACTO.CLIENTE");

        private static readonly Parametro _conrecibopp = Parametros.GetByClave("CONCEPTODEUDA.ORIGEN");

        private static readonly Parametro _deupend = Parametros.GetByClave("ESTADODEUDA.PENDIENTE");

        private static readonly Parametro _migrado = Parametros.GetByClave("DETALLEDEUDA.MIGRADO");

        private static readonly Parametro _media = Parametros.GetByClave("ESTADOECONOMICO.MEDIA");
        private static readonly Parametro _soltero = Parametros.GetByClave("ESTADOCIVIL.SOLTERO");
        private static readonly Parametro _ivafinal = Parametros.GetByClave("CONDICIONIVA.FINAL");
        private static readonly Parametro _sexo = Parametros.GetByClave("SEXO.DESCONOCIDO");

        private static readonly Parametro _ecCancelado = Parametros.GetByClave("ESTADOCUENTA.CANCELACION-TOTAL-DE-DEUDA");
        private static readonly Parametro _ecGestion = Parametros.GetByClave("ESTADOCUENTA.CUENTA-EN-GESTION");

        private static readonly Parametro _ecDesasignada = Parametros.GetByClave("ESTADOCUENTA.CTA.-DESASIGNADA-POR-CLIENTE");

        private static readonly Parametro _ecJuicioCEmb = Parametros.GetByClave("ESTADOCUENTA.JUICIO-CON-EMBARGO");
        private static readonly Parametro _ecJuicioCDep = Parametros.GetByClave("ESTADOCUENTA.JUICIO-CON-DEPOSITO");
        private static readonly Parametro _ecPromocion = Parametros.GetByClave("ESTADOCUENTA.PROMOCION");

        private static readonly Parametro _tipLegal = Parametros.GetByClave("TIPOGESTION.LEGAL");
        private static readonly Parametro _tipBack = Parametros.GetByClave("TIPOGESTION.BACKOFFICE");

        private static readonly Parametro _gfinalizada = Parametros.GetByClave("ESTADOGESTION.FINALIZADA");
        private static readonly Parametro _resges3 = Parametros.GetByClave("RESULTADOGESTION.OTRORESULTADO");
        private static readonly Parametro _resgesPagoVerif = Parametros.GetByClave("RESULTADOGESTION.PAGOVERIFICAR");
        private static readonly Parametro _resgesPromo = Parametros.GetByClave("RESULTADOGESTION.PROMOCION");

        private static readonly Producto _prodCetro = Productos.GetByCodigo("CETROGRAL");
        private static readonly Producto _prodCetro31 = Productos.GetByCodigo("CETRO-SUC-31");
        private static readonly Producto _prodCetro35 = Productos.GetByCodigo("CETRO-SUC-35");
        private static readonly Producto _prodCetro37 = Productos.GetByCodigo("CETRO-SUC-37");
        private static readonly Producto _prodCetro38 = Productos.GetByCodigo("CETRO-SUC-38");
        private static readonly Producto _prodCetro54 = Productos.GetByCodigo("CETRO-SUC-54");

        private static readonly Producto _prodCarsa = Productos.GetByCodigo("CARSAGRAL");
        private static readonly Producto _prodCredinea = Productos.GetByCodigo("CREDINEAGRAL");
        private static readonly Producto _prodFede = Productos.GetByCodigo("CREDIARGRAL");
        private static readonly Producto _prodProvPtmo = Productos.GetByCodigo("PRTMOPERS");
        private static readonly Producto _prodProvTjta = Productos.GetByCodigo("TJTA");
        private static readonly Producto _prodProvRefin = Productos.GetByCodigo("REFIN");
        private static readonly Producto _prodProvCtaYa = Productos.GetByCodigo("CUOTAYA");
        private static readonly Producto _prodCfa052 = Productos.GetByCodigo("6");
        private static readonly Producto _prodCfa452 = Productos.GetByCodigo("8");
        private static readonly Producto _prodAccicom = Productos.GetByCodigo("ACCICOM-GRAL");

        private static readonly Entidad _entCetro = Entidades.GetByCodigo("18");
        private static readonly Entidad _entFede = Entidades.GetByCodigo("27");
        private static readonly Entidad _entCarsa = Entidades.GetByCodigo("31");
        private static readonly Entidad _entCredinea = Entidades.GetByCodigo("32");
        private static readonly Entidad _entProven = Entidades.GetByCodigo("4");
        private static readonly Entidad _entCfa = Entidades.GetByCodigo("CFASA");
        private static readonly Entidad _entAccicom = Entidades.GetByCodigo("6");

        private static readonly string _prov0 = Parametros.GetByClave("PROVINCIA.DESCONOCIDA").Id.ToString();
        private static readonly string _loca0 = Parametros.GetByClave("LOCALIDAD.DESCONOCIDA.DESCONOCIDA").Id.ToString();
        #endregion

        #region asignaciones
        /// <summary>
        /// Este método importa una cuenta, y su saldo de deuda, desde 
        /// CARSA y/o CREDINEA, generando una nueva deuda informada, y 
        /// creando los saldos asociados.
        /// </summary>
        public static void ImportarAsignacionCarsa(DataRow registro) {
            var sqls = new List<string>();

            try {
                // primero define algunas columnas obligatorias a utilizar
                string dni = registro["Documento"].ToString().Trim();
                string empresa = registro["Compania"].ToString().Trim().ToUpper();
                string codigo = registro["Ficha"].ToString().Trim().ToUpper();
                string nombre = registro["ApellidoNombres"].ToString().Trim().ToUpper();
                string cpcalle = registro["CodPos"].ToString().Trim().ToUpper();
                string locacalle = registro["Localidad"].ToString().Trim().ToUpper();
                string provcalle = registro["Provincia"].ToString().Trim().ToUpper();
                double capital = Convert.ToDouble(registro["CapitalOriginal"].ToString().Replace('.', ','));
                Guid entidadId = (empresa.Contains("CARSA") || codigo.StartsWith("S")) ? _entCarsa.Id : _entCredinea.Id;
                Guid productoId = (entidadId.Equals(_entCarsa.Id)) ? _prodCarsa.Id : _prodCredinea.Id;

                // luego define algunas columnas opcionales a utilizar
                string calle = (registro["Direccion"] != null ? registro["Direccion"].ToString().Trim().ToUpper() : "S/D");
                string labo = (registro["Empresa"] != null ? registro["Empresa"].ToString().Trim().ToUpper() : string.Empty);
                string cuitlabo = (registro["CuitEmpresa"] != null ? "(" + registro["CuitEmpresa"].ToString().Trim().ToUpper() + ")" : string.Empty);
                string callelabo = (registro["DirEmpresa"] != null ? registro["DirEmpresa"].ToString().Trim().ToUpper() : "S/D");

                // Agrega si debe un comentario
                string comentario;
                try { comentario = registro["Comentario"].ToString().Trim().ToUpper(); }
                catch { comentario = "ASIGNACION NUEVA"; }
                comentario += " " + DateTime.Now;
                
                // Verifica e inserta/actualiza la persona
                string persId = CrearPersona(dni, nombre, _ivafinal.Id.ToString(), _soltero.Id.ToString(), 
                                            _sexo.Id.ToString(), _media.Id.ToString(), comentario, sqls);

                // luego obtiene la provincia, localidad y codigo postal 
                string provId = _prov0, locaId = _loca0, codpos = "0";
                string sql = "select p.par_id as prov, p2.par_id as loca, p2.par_orden as copo";
                sql += "  from parametro p, parametro p2";
                sql += " where p.par_clave        like 'PROVINCIA%'";
                sql += "   and p.par_orden        = p2.par_valorlong";
                sql += "   and p2.par_clave       like 'LOCALIDAD%'";
                sql += "   and p2.par_orden = '" + cpcalle + "'";
                sql += "   and p2.par_nombre = '" + locacalle + "'";
                sql += "   and p.par_nombre = '" + provcalle + "'";
                object[] resulta2 = Persistencia.EjecutarSqlOneRow(sql, _cadena);                
                if (resulta2 != null) {
                    provId = resulta2[0].ToString();
                    locaId = resulta2[1].ToString();
                    codpos = resulta2[2].ToString();
                } 

                // luego verifica los telefonos personales
                string telPer1 = string.Empty, telPer2 = string.Empty, celPer = string.Empty, faxPer = string.Empty;
                if ((registro["Tip_Tel1"].ToString().Trim().ToUpper().Equals("PAR")
                      ||registro["Tip_Tel1"].ToString().Trim().ToUpper().Equals("TER"))
                    && !string.IsNullOrEmpty(registro["Tip_Tel1"].ToString().Trim()))
                    telPer1 = registro["Tel1"].ToString().Trim().ToUpper();
                if ((registro["Tip_Tel2"].ToString().Trim().ToUpper().Equals("PAR")
                      ||registro["Tip_Tel2"].ToString().Trim().ToUpper().Equals("TER"))
                    && !string.IsNullOrEmpty(registro["Tip_Tel2"].ToString().Trim()))
                    telPer2 = registro["Tel2"].ToString().Trim().ToUpper();
                if ((registro["Tip_Tel3"].ToString().Trim().ToUpper().Equals("PAR")
                      ||registro["Tip_Tel3"].ToString().Trim().ToUpper().Equals("TER"))
                    && !string.IsNullOrEmpty(registro["Tip_Tel3"].ToString().Trim()))
                    celPer = registro["Tel3"].ToString().Trim().ToUpper();
                if ((registro["Tip_Tel4"].ToString().Trim().ToUpper().Equals("PAR")
                      ||registro["Tip_Tel4"].ToString().Trim().ToUpper().Equals("TER"))
                    && !string.IsNullOrEmpty(registro["Tip_Tel4"].ToString().Trim()))
                    faxPer = registro["Tel4"].ToString().Trim().ToUpper();
                if ((registro["Tip_Tel5"].ToString().Trim().ToUpper().Equals("PAR")
                      ||registro["Tip_Tel5"].ToString().Trim().ToUpper().Equals("TER"))
                    && !string.IsNullOrEmpty(registro["Tip_Tel5"].ToString().Trim()))
                    telPer1 += "/" + registro["Tel5"].ToString().Trim().ToUpper();

                // Inserta el contacto personal
                CrearContacto(_personal.Id.ToString(), _origencto.Id.ToString(), persId, calle, provId,
                              locaId, codpos, telPer1, telPer2, celPer, faxPer, true, sqls, comentario);

                // luego busca e intenta colocar el contacto laboral
                if (!string.IsNullOrEmpty(labo)) {
                    // busca los telefonos laborales
                    string telLab1 = string.Empty, telLab2 = string.Empty, celLab = string.Empty, faxLab = string.Empty;
                    if (registro["Tip_Tel1"].ToString().Trim().ToUpper().Equals("LAB")
                        && !string.IsNullOrEmpty(registro["Tip_Tel1"].ToString().Trim()))
                        telLab1 = registro["Tel1"].ToString().Trim().ToUpper();
                    if (registro["Tip_Tel2"].ToString().Trim().ToUpper().Equals("LAB")
                        && !string.IsNullOrEmpty(registro["Tip_Tel2"].ToString().Trim()))
                        telLab2 = registro["Tel2"].ToString().Trim().ToUpper();
                    if (registro["Tip_Tel3"].ToString().Trim().ToUpper().Equals("LAB")
                        && !string.IsNullOrEmpty(registro["Tip_Tel3"].ToString().Trim()))
                        celLab = registro["Tel3"].ToString().Trim().ToUpper();
                    if (registro["Tip_Tel4"].ToString().Trim().ToUpper().Equals("LAB")
                        && !string.IsNullOrEmpty(registro["Tip_Tel4"].ToString().Trim()))
                        faxLab = registro["Tel4"].ToString().Trim().ToUpper();
                    if (registro["Tip_Tel5"].ToString().Trim().ToUpper().Equals("LAB")
                        && !string.IsNullOrEmpty(registro["Tip_Tel5"].ToString().Trim()))
                        telLab1 += "/" + registro["Tel5"].ToString().Trim().ToUpper();

                    CrearContacto(_personal.Id.ToString(), _origencto.Id.ToString(), persId, callelabo, provId,
                                  locaId, codpos, telLab1, telLab2, celLab, faxLab, true, sqls, 
                                  ("Trabajo: " + labo + "(" + cuitlabo)+")");
                }

                // crea la cuenta (u obtiene la que existe si existe)
                object[] resulta = CrearCuenta(codigo, entidadId.ToString(), productoId.ToString(), comentario, 
                                               persId, null, _ecGestion.Id.ToString(), DateTime.Now, true, sqls);
                string cuenta = resulta[0].ToString();

                // Verifica si puede ingresar la deuda y, si debe,
                // da de baja la deuda informada que existiera
                VerificarDeudaCta(resulta, productoId.ToString(), sqls);

                // luego crea la nueva deuda para cargar y la asigna
                comentario = "ASIGNACION NUEVA " + DateTime.Now;
                CrearDeuda(cuenta, DateTime.Now, capital, 0, 0, 0, capital, 0, 0, 0, comentario, sqls);

                // Ejecuta todos los inserts y updates que debe
                Persistencia.EjecutarSqlDML(sqls, _cadena);
            } catch (Exception e) {
                Sistema.Controlador.logear("IMPORTACION-ERROR-NOK", ENivelMensaje.ERROR, e.ToString());
                throw;
            }
        }

        /// <summary>
        /// Este método importa una cuenta de CETROGAR, y su solamente 
        /// sus datos de contacto, ya que laws deduas entran como las
        /// actualizaciones de los saldos asociados.
        /// </summary>
        public static void ImportarAsignacionCetro(DataRow registro) {
            var sqls = new List<string>();

            try {
                // primero define algunas columnas obligatorias a utilizar
                string dni = registro["DNI"].ToString().Trim().ToUpper().Replace("Z", "");
                string nombre = registro["RazonSocial"].ToString().Trim().ToUpper().Replace("'", "´");
                string cpcalle = registro["CP"].ToString().Trim().ToUpper();
                string locacalle = registro["Localidad"].ToString().Trim().ToUpper();

                // Define el producto a utlizar
                string producto;
                try { 
                    producto = registro["Producto"].ToString().Trim().ToUpper(); 
                    switch (producto) {
                        case "31": producto = _prodCetro31.Id.ToString(); break;
                        case "35": producto = _prodCetro35.Id.ToString(); break;
                        case "37": producto = _prodCetro37.Id.ToString(); break;
                        case "38": producto = _prodCetro38.Id.ToString(); break;
                        case "54": producto = _prodCetro54.Id.ToString(); break;
                        default: producto = _prodCetro.Id.ToString(); break;
                    }
                } catch { producto = _prodCetro.Id.ToString(); }

                // luego define algunas columnas opcionales a utilizar
                string telefono = (registro["Telefono"] != null ? registro["Telefono"].ToString().Trim().ToUpper() : string.Empty);
                string celular = (registro["Celular"] != null ? registro["Celular"].ToString().Trim().ToUpper() : string.Empty);
                string teleflabo = (registro["TelLaboral"] != null ? registro["TelLaboral"].ToString().Trim().ToUpper() : string.Empty);
                string calle = (registro["Domicilio"] != null ? registro["Domicilio"].ToString().Trim().ToUpper().Replace("'", "´") : "S/D");
                string ocupacion = (registro["Ocupacion"] != null ? registro["Ocupacion"].ToString().Trim().ToUpper().Replace("'", "´") : string.Empty);

                // Agrega si debe un comentario
                string comentario; 
                try { comentario = registro["Comentario"].ToString().Trim().ToUpper(); }
                catch { comentario = "ASIGNACION NUEVA " + DateTime.Now; }

                // Verifica e inserta/actualiza la persona                 
                string ocupa = (!string.IsNullOrEmpty(ocupacion) ? ". Ocupación: " + ocupacion : string.Empty);
                string persId = CrearPersona(dni, nombre, _ivafinal.Id.ToString(), _soltero.Id.ToString(),
                                            _sexo.Id.ToString(), _media.Id.ToString(), (comentario + ocupa), sqls);

                // luego obtiene la provincia, localidad y codigo postal 
                string sql = "select p.par_id as prov, p2.par_id as loca, p2.par_orden as copo";
                sql += "  from parametro p, parametro p2";
                sql += " where p.par_clave        like 'PROVINCIA%'";
                sql += "   and p.par_orden        = p2.par_valorlong";
                sql += "   and p2.par_clave       like 'LOCALIDAD%'";
                sql += "   and p2.par_orden = '" + cpcalle + "'";
                sql += "   and p2.par_nombre = '" + locacalle + "'";
                object[] resulta = Persistencia.EjecutarSqlOneRow(sql, _cadena);
                string provId = _prov0, locaId = _loca0, codpos = "0";
                if (resulta != null) {
                    provId = resulta[0].ToString();
                    locaId = resulta[1].ToString();
                    codpos = resulta[2].ToString();
                }

                // Inserta el contacto personal
                CrearContacto(_personal.Id.ToString(), _origencto.Id.ToString(), persId, calle, provId,
                              locaId, codpos, telefono, teleflabo, celular, string.Empty, true, sqls, comentario);

                // crea la cuenta (u obtiene la que existe si existe)
                CrearCuenta(dni, _entCetro.Id.ToString(), producto, comentario,
                            persId, null, _ecGestion.Id.ToString(), DateTime.Now, true, sqls);

                // Ejecuta todos los inserts y updates que debe
                Persistencia.EjecutarSqlDML(sqls, _cadena);
            } catch (Exception e) {
                Sistema.Controlador.logear("IMPORTACION-ERROR-NOK", ENivelMensaje.ERROR, e.ToString());
                throw;
            }
        }

        /// <summary>
        /// Este método importa una cuenta, y su saldo de deuda, desde 
        /// FEDERAR, generando una nueva deuda informada, y creando los 
        /// saldos asociados.
        /// </summary>
        public static void ImportarAsignacionFederar(DataRow registro) {
            var sqls = new List<string>();

            try {
                // primero define las columnas obligatorias a utilizar
                string codigo = registro["CUENTA"].ToString().Trim();
                string dni = registro["NDOC"].ToString().Trim();
                string nombre = registro["APELLIDO"].ToString().Trim().ToUpper() + ", " + registro["NOMBRE"].ToString().Trim().ToUpper();
                string cpcalle = registro["CPOSTAL"].ToString().Trim().ToUpper();
                string locacalle = registro["LOCALIDAD"].ToString().Trim().ToUpper();
                string provcalle = registro["PROVINCIA"].ToString().Trim().ToUpper();
                double capital = Convert.ToDouble(registro["SALDO"].ToString().Replace(',', '.'));

                // luego define las columnas opcionales a utilizar
                string calle = (registro["CALLE"] != null ? registro["CALLE"].ToString().Trim().ToUpper() : "S/D");
                string labo = (registro["LUGEMPL"] != null ? registro["LUGEMPL"].ToString().Trim().ToUpper() : string.Empty);
                string callelabo = (registro["DOMLAN"] != null ? registro["DOMLAN"].ToString().Trim().ToUpper() : string.Empty);
                string telefono = (registro["TELEFONO"] != null ? registro["TELEFONO"].ToString().Trim().ToUpper() : "S/D");
                string celular = (registro["TELCELU"] != null ? registro["TELCELU"].ToString().Trim().ToUpper() : "S/D");

                // Agrega si debe un comentario
                string comentario;
                try { comentario = registro["Comentario"].ToString().Trim().ToUpper(); }
                catch { comentario = "ASIGNACION NUEVA"; }
                comentario += " " + DateTime.Now;

                // Verifica e inserta/actualiza la persona
                string persId = CrearPersona(dni, nombre, _ivafinal.Id.ToString(), _soltero.Id.ToString(),
                                            _sexo.Id.ToString(), _media.Id.ToString(), comentario, sqls);

                // entonces obtiene los datos de localidad y provincia
                string sql = "select p.par_id as prov, p2.par_id as loca, p2.par_orden as copo";
                sql += "  from parametro p, parametro p2";
                sql += " where p.par_clave        like 'PROVINCIA%'";
                sql += "   and p.par_orden        = p2.par_valorlong";
                sql += "   and p2.par_clave       like 'LOCALIDAD%'";
                sql += "   and p2.par_orden = '" + cpcalle + "'";
                sql += "   and p2.par_nombre = '" + locacalle + "'";
                sql += "   and p.par_nombre = '" + provcalle + "'";
                object[] resulta = Persistencia.EjecutarSqlOneRow(sql, _cadena);
                string provId = _prov0, locaId = _loca0, codpos = "0";
                if (resulta != null) {
                    provId = resulta[0].ToString();
                    locaId = resulta[1].ToString();
                    codpos = resulta[2].ToString();
                }

                // Inserta el contacto personal
                CrearContacto(_personal.Id.ToString(), _origencto.Id.ToString(), persId, calle, provId,
                              locaId, codpos, telefono, string.Empty, celular, string.Empty, true, sqls, comentario);

                // Luego va por la dirección laboral
                if (!string.IsNullOrEmpty(labo)) {
                    CrearContacto(_personal.Id.ToString(), _origencto.Id.ToString(), persId, callelabo, provId,
                                  locaId, codpos, string.Empty, string.Empty, string.Empty, string.Empty, true, 
                                  sqls, ("Trabajo: " + labo));
                }

                // crea la cuenta (u obtiene la que existe si existe)
                resulta = CrearCuenta(codigo, _entFede.Id.ToString(), _prodFede.Id.ToString(), comentario,
                                      persId, null, _ecGestion.Id.ToString(), DateTime.Now, true, sqls);
                string cuenta = resulta[0].ToString();

                // Verifica si puede ingrsar la deuda y, si debe,
                // da de baja la deuda informada que existiera
                VerificarDeudaCta(resulta, _prodFede.Id.ToString(), sqls);

                // luego crea la nueva deuda para cargar y la asigna
                comentario = "ASIGNACION NUEVA " + DateTime.Now;
                CrearDeuda(cuenta, DateTime.Now, capital, 0, 0, 0, capital, 0, 0, 0, comentario, sqls);

                // Ejecuta todos los inserts y updates que debe
                Persistencia.EjecutarSqlDML(sqls, _cadena);
            } catch (Exception e) {
                Sistema.Controlador.logear("IMPORTACION-ERROR-NOK", ENivelMensaje.ERROR, e.ToString());
                throw;
            }
        }

        /// <summary>
        /// Este método importa una cuenta, y su saldo de deuda, desde 
        /// FEDERAR, generando una nueva deuda informada, y creando los 
        /// saldos asociados.
        /// </summary>
        public static void ImportarAsignacionFederar2(DataRow registro) {
            var sqls = new List<string>();

            try {
                // primero define las columnas obligatorias a utilizar
                string codigo = registro["Sucursal"].ToString().Trim() + registro["DNI"].ToString().Trim();
                string dni = registro["DNI"].ToString().Trim();
                string nombre = registro["ApellidoyNombre"].ToString().Trim().ToUpper();
                //string cpcalle = registro["CPOSTAL"].ToString().Trim().ToUpper();
                string locacalle = registro["Ciudad"].ToString().Trim().ToUpper();
                string provcalle = registro["Provincia"].ToString().Trim().ToUpper();
                double capital = Convert.ToDouble(registro["Capital"]);
                string saldo = registro["SaldoActualizado"].ToString().Trim().ToUpper();
                DateTime fechaDeuda = Convert.ToDateTime(registro["FechaUltPago"]);

                // luego define las columnas opcionales a utilizar
                string calle = (registro["Dirección"] != null ? registro["Dirección"].ToString().Trim().ToUpper() : "S/D");
                string labo = (registro["Empleador"] != null ? registro["Empleador"].ToString().Trim().ToUpper() : string.Empty);
                string callelabo = (registro["DireccionLaboral"] != null ? registro["DireccionLaboral"].ToString().Trim().ToUpper() : string.Empty);
                string telefono = (registro["TelParticular"] != null ? registro["TelParticular"].ToString().Trim().ToUpper() : "S/D");
                string celular = (registro["Celular"] != null ? registro["Celular"].ToString().Trim().ToUpper() : "S/D");

                // Agrega si debe un comentario
                string comentario;
                try { comentario = registro["Comentario"].ToString().Trim().ToUpper(); }
                catch { comentario = "ASIGNACION NUEVA"; }
                comentario += " " + DateTime.Now;

                // Verifica e inserta/actualiza la persona
                string persId = CrearPersona(dni, nombre, _ivafinal.Id.ToString(), _soltero.Id.ToString(),
                                            _sexo.Id.ToString(), _media.Id.ToString(), comentario, sqls);

                // entonces obtiene los datos de localidad y provincia
                string sql = "select p.par_id as prov, p2.par_id as loca, p2.par_orden as copo";
                sql += "  from parametro p, parametro p2";
                sql += " where p.par_clave        like 'PROVINCIA%'";
                sql += "   and p.par_orden        = p2.par_valorlong";
                sql += "   and p2.par_clave       like 'LOCALIDAD%'";
                //sql += "   and p2.par_orden = '" + cpcalle + "'";
                sql += "   and p2.par_nombre = '" + locacalle + "'";
                sql += "   and p.par_nombre = '" + provcalle + "'";
                object[] resulta = Persistencia.EjecutarSqlOneRow(sql, _cadena);
                string provId = _prov0, locaId = _loca0, codpos = "0";
                if (resulta != null) {
                    provId = resulta[0].ToString();
                    locaId = resulta[1].ToString();
                    codpos = resulta[2].ToString();
                }

                // Inserta el contacto personal
                CrearContacto(_personal.Id.ToString(), _origencto.Id.ToString(), persId, calle, provId,
                              locaId, codpos, telefono, string.Empty, celular, string.Empty, true, sqls, comentario);

                // Luego va por la dirección laboral
                if (!string.IsNullOrEmpty(labo)) {
                    CrearContacto(_personal.Id.ToString(), _origencto.Id.ToString(), persId, callelabo, provId,
                                  locaId, codpos, string.Empty, string.Empty, string.Empty, string.Empty, true,
                                  sqls, ("Trabajo: " + labo));
                }

                // crea la cuenta (u obtiene la que existe si existe)
                resulta = CrearCuenta(codigo, _entFede.Id.ToString(), _prodFede.Id.ToString(), comentario,
                                      persId, null, _ecGestion.Id.ToString(), DateTime.Now, true, sqls);
                string cuenta = resulta[0].ToString();

                // Verifica si puede ingrsar la deuda y, si debe,
                // da de baja la deuda informada que existiera
                VerificarDeudaCta(resulta, _prodFede.Id.ToString(), sqls);

                // luego crea la nueva deuda para cargar y la asigna
                comentario = "ASIGNACION NUEVA " + DateTime.Now + ". Saldo Actualizado: $" + saldo;
                CrearDeuda(cuenta, fechaDeuda, capital, 0, 0, 0, capital, 0, 0, 0, comentario, sqls);

                // Ejecuta todos los inserts y updates que debe
                Persistencia.EjecutarSqlDML(sqls, _cadena);
            } catch (Exception e) {
                Sistema.Controlador.logear("IMPORTACION-ERROR-NOK", ENivelMensaje.ERROR, e.ToString());
                throw;
            }
        }

        /// <summary>
        /// Este método importa una cuenta, y su saldo de deuda, desde 
        /// PROVENCRED, generando una nueva deuda informada, y creando 
        /// los saldos asociados.
        /// </summary>
        public static void ImportarAsignacionProvencred(DataRow registro) {
            var sqls = new List<string>();

            try {
                // establece variables iniciales a utilizarse en el proceso
                string dni = registro["Nro_Doc"].ToString().Trim();
                string fechanac = registro["fecha_nac"].ToString().Trim();
                string codigo = registro["NroCuenta"].ToString().Trim().ToUpper();
                string cliente = registro["Cliente"].ToString().Trim().ToUpper();
                string sucursal = registro["Sucursal"].ToString().Trim();
                string escenario = registro["Escenario"].ToString().Trim();
                string estado = registro["Estado"].ToString().Trim();
                string fechamov = registro["fecha_mov"].ToString().Trim();
                string impmov = registro["imp_ult_mov"].ToString().Trim().ToUpper();
                string apenom = registro["Apellido_Nombre"].ToString().Trim().ToUpper();
                string tipoprod = registro["TipoProducto"].ToString().Trim().ToUpper();
                string prod = registro["Producto"].ToString().Trim().ToUpper();
                string tipodom2 = registro["TipoDomicilio2"].ToString().Trim().ToUpper();
                string direccion1 = registro["Domicilio1"].ToString().Trim();
                string direccion2 = registro["Domicilio2"].ToString().Trim();

                // luego define las columnas opcionales a utilizar
                long atiguedad = Convert.ToInt64(registro["Dias_Atraso"].ToString());
                DateTime fechaDeuda = DateTime.Now.AddDays(-(atiguedad + 10));
                double capital = Convert.ToDouble(registro["Deuda_Vda"].ToString().Replace('.', ','));
                double honorarios = Math.Round((capital*_FIJO_HONORARIO), 2);

                // Verifica e inserta/actualiza la persona
                string comentario = "Fecha Nac:" + fechanac + "'";
                string persId = CrearPersona(dni, apenom, _ivafinal.Id.ToString(), _soltero.Id.ToString(), 
                                             _sexo.Id.ToString(), _media.Id.ToString(), comentario, sqls);

                // Verifica los datos del contacto personal
                string telPer2, celPer, fax;
                string telPer1 = telPer2 = celPer = fax = string.Empty;
                if (!string.IsNullOrEmpty(registro["Telefono1"].ToString().Trim()))
                    telPer1 = registro["Telefono1"].ToString().Trim().ToUpper();
                if (!string.IsNullOrEmpty(registro["Telefono2"].ToString().Trim()))
                    telPer2 = registro["Telefono2"].ToString().Trim().ToUpper();
                if (!string.IsNullOrEmpty(registro["Telefono3"].ToString().Trim()))
                    celPer = registro["Telefono3"].ToString().Trim().ToUpper();
                if (!string.IsNullOrEmpty(registro["Telefono4"].ToString().Trim()))
                    fax = registro["Telefono4"].ToString().Trim().ToUpper();

                // Inserta el contacto personal
                CrearContacto(_personal.Id.ToString(), _origencto.Id.ToString(), persId, direccion1, _prov0, _loca0, 
                              "0", telPer1, telPer2, celPer, fax, true, sqls, "ASIGNACION NUEVA: " + DateTime.Now);

                // Luego va con el contacto laboral
                if (!string.IsNullOrEmpty(tipodom2)) {
                    CrearContacto(_laboral.Id.ToString(), _origencto.Id.ToString(), persId, direccion2, _prov0, _loca0,
                                  "0", string.Empty, string.Empty, string.Empty, string.Empty, false, sqls, 
                                  "ASIGNACION NUEVA: " + DateTime.Now);
                }

                // luego obtiene el producto de la cuenta
                Guid productoId;
                if (tipoprod.Equals(_PRESTAMO))
                    productoId = _prodProvPtmo.Id;
                else if (tipoprod.Equals(_REFINAN))
                    productoId = _prodProvRefin.Id;
                else if (tipoprod.Equals(_CUOTAYA))
                    productoId = _prodProvCtaYa.Id;
                else if (tipoprod.Equals(_VISA) || tipoprod.Equals(_TARJETA))
                    productoId = _prodProvTjta.Id;
                else
                    throw new DataErrorException("GENERICO", "El producto [" + tipoprod + "] no existe en el Sistema para la Entidad!");

                // Agrega si debe un comentario   
                comentario = "ASIGNACION NUEVA: " + DateTime.Now
                             + "; Nro.Cte:" + cliente
                             + "; Producto:" + prod
                             + "; Sucursal:" + sucursal
                             + "; Escenario:" + escenario
                             + "; Estado:" + estado
                             + "; FechaUltMov:" + fechamov
                             + "; ImporteUltMov:" + impmov;
                try { comentario += "; " + registro["Comentario"].ToString().Trim().ToUpper(); } catch { }

                // crea la cuenta (u obtiene la que existe si existe)
                object[] resulta = CrearCuenta(codigo, _entProven.Id.ToString(), productoId.ToString(), comentario,
                                      persId, null, _ecGestion.Id.ToString(), DateTime.Now, false, sqls);
                string cuenta = resulta[0].ToString();

                // Verifica si puede ingrsar la deuda y, si debe,
                // da de baja la deuda informada que existiera
                VerificarDeudaCta(resulta, productoId.ToString(), sqls);

                // luego crea la nueva deuda para cargar y la asigna
                comentario = "ASIGNACION NUEVA: " + DateTime.Now + ". Deuda Total:" + registro["DeudaTotal"];
                CrearDeuda(cuenta, fechaDeuda, capital, 0, honorarios, 0, capital, 0, honorarios, 0, comentario, sqls);

                // Ejecuta todos los inserts y updates que debe
                Persistencia.EjecutarSqlDML(sqls, _cadena);
            } catch (Exception e) {
                Sistema.Controlador.logear("IMPORTACION-ERROR-NOK", ENivelMensaje.ERROR, e.ToString());
                throw;
            }
        }

        /// <summary>
        /// Este método importa una cuenta, y su saldo de deuda, desde 
        /// ACCICOM, generando una nueva deuda informada, y creando 
        /// los saldos asociados.
        /// </summary>
        public static void ImportarAsignacionAccicom(DataRow registro) {
            var sqls = new List<string>();

            try {
                // establece variables iniciales a utilizarse en el proceso
                string codigo = registro["NROCARPETA"].ToString().Trim().ToUpper();

                string dni = registro["DOCDEUDOR"].ToString().Trim();
                string apenom = registro["NOMBREDEUDOR"].ToString().Trim().ToUpper();
                string cuil = registro["CUILDEUDOR"].ToString().Trim();
                string fmora = registro["FMORA"].ToString().Trim();
                string monto= registro["MONTOORIGEN"].ToString().Trim();

                string ref1 = registro["REF1"].ToString().Trim().ToUpper();
                string ref2 = registro["REF2"].ToString().Trim();
                string ref3 = registro["REF3"].ToString().Trim();
                string telcodeudor = registro["TELEFONOS_CODEUDOR"].ToString().Trim();

                string direccion1 = registro["DIRECCDEUDOR"].ToString().Trim();
                string dirnro1 = registro["NRODIRDEUDOR"].ToString().Trim();
                string dirpiso1 = registro["PISODEUDOR"].ToString().Trim();
                string dirdepto1 = registro["NRODEPTODEUDOR"].ToString().Trim();
                string dirloca1 = registro["PARTIDODEUDOR"].ToString().Trim().Replace("CAPITAL", "POSADAS");
                string dircp1 = registro["CODPOSTALDEUDOR"].ToString().Trim();
                string dirprov1 = registro["PROVINCIADEUDOR"].ToString().Trim();
                string dirtel1 = registro["TELEFONOS_DEUDOR"].ToString().Trim();                
                string dircel1 = registro["CELULARES_DEUDOR"].ToString().Trim();

                string empresa = registro["EMPRESAEDOR"].ToString().Trim();
                string direccion2 = registro["DIRECCEDOR"].ToString().Trim();
                string dirnro2 = registro["NRODIREDOR"].ToString().Trim();
                string dirpiso2 = registro["PISOEDOR"].ToString().Trim();
                string dirdepto2 = registro["NRODEPTOEDOR"].ToString().Trim();
                string dirloca2 = registro["LOCALEDOR"].ToString().Trim();
                string dircp2 = registro["CODPOSTALEDOR"].ToString().Trim();
                string dirprov2 = registro["PCIAEDOR"].ToString().Trim();
                string dirtel2 = registro["TELEFONOEDOR"].ToString().Trim();

                // luego define las columnas opcionales a utilizar
                DateTime fechaDeuda = Convert.ToDateTime(registro["FECHAPAGARE"]);
                double capital = Convert.ToDouble(registro["IMPORTEPAGARE"].ToString().Replace('.', ','));

                // Verifica e inserta/actualiza la persona
                string comentario = "Cuil:" + (!string.IsNullOrEmpty(cuil) ? cuil : "S/D") + ".";
                string persId = CrearPersona(dni, apenom, _ivafinal.Id.ToString(), _soltero.Id.ToString(),
                                             _sexo.Id.ToString(), _media.Id.ToString(), comentario, sqls);

                // Inserta el contacto personal
                string sql = "select p.par_id as prov, p2.par_id as loca, p2.par_orden as copo";
                sql += "  from parametro p, parametro p2";
                sql += " where p.par_clave        like 'PROVINCIA%'";
                sql += "   and p.par_orden        = p2.par_valorlong";
                sql += "   and p2.par_clave       like 'LOCALIDAD%'";
                sql += "   and p2.par_orden = '" + dircp2 + "'";
                sql += "   and p2.par_nombre = '" + dirloca2 + "'";
                sql += "   and p.par_nombre = '" + dirprov2 + "'";
                object[] resulta = Persistencia.EjecutarSqlOneRow(sql, _cadena);
                string provId = _prov0, locaId = _loca0, codpos = "0";
                if (resulta != null) {
                    provId = resulta[0].ToString();
                    locaId = resulta[1].ToString();
                    codpos = resulta[2].ToString();
                }
                direccion1 += " " + dirnro1 + " " + dirpiso1 + " " + dirdepto1;
                CrearContacto(_personal.Id.ToString(), _origencto.Id.ToString(), persId, direccion1.Trim(), provId, locaId,
                              codpos, dirtel1, "CODDR:" + telcodeudor, dircel1, string.Empty, true, sqls, 
                              "ASIGNACION NUEVA: " + DateTime.Now);

                // Luego va con el contacto laboral
                if (!string.IsNullOrEmpty(direccion2)) {
                    sql = "select p.par_id as prov, p2.par_id as loca, p2.par_orden as copo";
                    sql += "  from parametro p, parametro p2";
                    sql += " where p.par_clave        like 'PROVINCIA%'";
                    sql += "   and p.par_orden        = p2.par_valorlong";
                    sql += "   and p2.par_clave       like 'LOCALIDAD%'";
                    sql += "   and p2.par_orden = '" + dircp1 + "'";
                    sql += "   and p2.par_nombre = '" + dirloca1 + "'";
                    sql += "   and p.par_nombre = '" + dirprov1 + "'";
                    resulta = Persistencia.EjecutarSqlOneRow(sql, _cadena);
                    provId = _prov0;
                    locaId = _loca0; 
                    codpos = "0";
                    if (resulta != null) {
                        provId = resulta[0].ToString();
                        locaId = resulta[1].ToString();
                        codpos = resulta[2].ToString();
                    }
                    direccion2 += " " + dirnro2 + " " + dirpiso2 + " " + dirdepto2;
                    CrearContacto(_laboral.Id.ToString(), _origencto.Id.ToString(), persId, direccion2.Trim(), provId, 
                                  locaId, codpos, dirtel2, string.Empty, string.Empty, string.Empty, false, sqls,
                                  (!string.IsNullOrEmpty(empresa) ? "Empresa: " + empresa + ". " : "ASIGNACION NUEVA: " + DateTime.Now));
                }

                // Agrega si debe un comentario   
                comentario = "; Fecha Mora:" + fmora
                             + ";\r\n Monto Orig:" + monto
                             + ";\r\n Ref1:" + ref1
                             + ";\r\n Ref2:" + ref2
                             + ";\r\n Ref3:" + ref3;
                try { comentario += "; " + registro["Comentario"].ToString().Trim().ToUpper(); }
                catch { }

                // crea la cuenta (u obtiene la que existe si existe)
                resulta = CrearCuenta(codigo, _entAccicom.Id.ToString(), _prodAccicom.Id.ToString(), comentario,
                                      persId, null, _ecGestion.Id.ToString(), DateTime.Now, false, sqls);
                string cuenta = resulta[0].ToString();

                // Verifica si puede ingrsar la deuda y, si debe,
                // da de baja la deuda informada que existiera
                VerificarDeudaCta(resulta, _prodAccicom.Id.ToString(), sqls);

                // luego crea la nueva deuda para cargar y la asigna
                comentario = "ASIGNACION NUEVA: " + DateTime.Now;
                CrearDeuda(cuenta, fechaDeuda, capital, 0, 0, 0, capital, 0, 0, 0, comentario, sqls);

                // Ejecuta todos los inserts y updates que debe
                Persistencia.EjecutarSqlDML(sqls, _cadena);
            } catch (Exception e) {
                Sistema.Controlador.logear("IMPORTACION-ERROR-NOK", ENivelMensaje.ERROR, e.ToString());
                throw;
            }
        }

        /// <summary>
        /// Este método importa una cuenta, y su saldo de deuda, desde 
        /// CARSA y/o CREDINEA, generando una nueva deuda informada, y 
        /// creando los saldos asociados.
        /// </summary>
        public static void ImportarAsignacionCfa(DataRow registro) {
            var sqls = new List<string>();

            try {
                // primero define algunas columnas obligatorias a utilizar
                string dni = registro["NroDocumento"].ToString().Trim().Substring(4);
                string nombre = registro["Titular"].ToString().Trim().ToUpper();
                string cpcalle = registro["CPostal"].ToString().Trim().ToUpper();
                string locacalle = registro["Localidad"].ToString().Trim().ToUpper();
                string coment = registro["Profesion"] != null ? "Prof.:" + registro["Profesion"].ToString().Trim().ToUpper() : string.Empty;
                string estudio = registro["Estudio"].ToString().Trim().ToUpper().Remove(4);
                string codigo = registro["NroCredito"].ToString().Trim().ToUpper();
                Guid productoId = (estudio.Equals(_CFA_MUTUAL)) ? _prodCfa452.Id : _prodCfa052.Id;
                DateTime fechaDeuda = Convert.ToDateTime(registro["FechaVto"]);
                double capital = Convert.ToDouble(registro["MontoaReclamarJudic"].ToString().Replace('.', ','));
                string calle = (registro["DomicilioParticular"] != null
                                    ? registro["DomicilioParticular"].ToString().Trim().ToUpper()
                                    : "S/D") + ". " + (registro["Barrio-Colonia"] != null
                                                           ? registro["Barrio-Colonia"].ToString().Trim().ToUpper()
                                                           : string.Empty);

                // luego define algunas columnas opcionales a utilizar
                string labo = (registro["NombredelEmpleo"] != null ? registro["NombredelEmpleo"].ToString().Trim().ToUpper() : string.Empty);
                string coment2 = (registro["RelacLab"] != null ? "Relac.Lab.:" + registro["RelacLab"].ToString().Trim().ToUpper() : string.Empty);
                string cplab = registro["CPLab"].ToString().Trim().ToUpper();
                string localab = registro["LocalidadLab"].ToString().Trim().ToUpper();
                string callelabo = (registro["Domiciliolaboral"] != null
                                        ? registro["Domiciliolaboral"].ToString().Trim().ToUpper()
                                        : "S/D") + ". " + (registro["Barrio-ColLab"] != null
                                                               ? registro["Barrio-ColLab"].ToString().Trim().ToUpper()
                                                               : string.Empty);
                // Agrega si debe un comentario
                string comentario;
                try { comentario = registro["Comentario"].ToString().Trim().ToUpper(); }
                catch { comentario = "ASIGNACION NUEVA"; }
                comentario += " " + DateTime.Now;

                // Verifica e inserta/actualiza la persona
                string persId = CrearPersona(dni, nombre, _ivafinal.Id.ToString(), _soltero.Id.ToString(),
                                             _sexo.Id.ToString(), _media.Id.ToString(), (comentario + ". " + coment), sqls);

                // luego obtiene la provincia, localidad y codigo postal 
                string provId = _prov0, locaId = _loca0, codpos = "0";
                string sql = "select p.par_id as prov, p2.par_id as loca, p2.par_orden as copo";
                sql += "  from parametro p, parametro p2";
                sql += " where p.par_clave        like 'PROVINCIA%'";
                sql += "   and p.par_orden        = p2.par_valorlong";
                sql += "   and p2.par_clave       like 'LOCALIDAD%'";
                sql += "   and p2.par_orden = '" + cpcalle + "'";
                sql += "   and p2.par_nombre = '" + locacalle + "'";
                object[] resulta = Persistencia.EjecutarSqlOneRow(sql, _cadena);
                if (resulta != null) {
                    provId = resulta[0].ToString();
                    locaId = resulta[1].ToString();
                    codpos = resulta[2].ToString();
                }

                // luego verifica los telefonos personales
                string telPer1 = string.Empty, telPer2 = string.Empty, celPer = string.Empty, faxPer = string.Empty;
                if (!string.IsNullOrEmpty(registro["TelTitular"].ToString().Trim()) &&
                    !registro["TelTitular"].ToString().Trim().Equals("0"))
                    telPer1 = registro["TelTitular"].ToString().Trim().ToUpper();
                if (!string.IsNullOrEmpty(registro["TelRefer1"].ToString().Trim()) &&
                    !registro["TelRefer1"].ToString().Trim().Equals("0"))
                    telPer2 = registro["TelRefer1"].ToString().Trim().ToUpper();
                if (!string.IsNullOrEmpty(registro["Referencia1"].ToString().Trim()))
                    coment += " Ref.Tel.2:" + registro["Referencia1"].ToString().Trim().ToUpper();
                if (!string.IsNullOrEmpty(registro["TelRefer2"].ToString().Trim()) &&
                    !registro["TelRefer2"].ToString().Trim().Equals("0"))
                    faxPer = registro["TelRefer2"].ToString().Trim().ToUpper();
                if (!string.IsNullOrEmpty(registro["Referencia2"].ToString().Trim()))
                    coment += " Ref.TelFax:" + registro["Referencia2"].ToString().Trim().ToUpper();
                if (!string.IsNullOrEmpty(registro["TelRefer3"].ToString().Trim()) &&
                    !registro["TelRefer3"].ToString().Trim().Equals("0"))
                    coment += " Otro Tel:" + registro["TelRefer3"].ToString().Trim().ToUpper();
                if (!string.IsNullOrEmpty(registro["Referencia3"].ToString().Trim()))
                    coment += " Ref.Otro:" + registro["Referencia3"].ToString().Trim().ToUpper();
                if (!string.IsNullOrEmpty(registro["TelCelular"].ToString().Trim()) &&
                    !registro["TelCelular"].ToString().Trim().Equals("0"))
                    celPer = registro["TelCelular"].ToString().Trim().ToUpper();

                // Inserta el contacto personal
                CrearContacto(_personal.Id.ToString(), _origencto.Id.ToString(), persId, calle, provId, locaId,
                              codpos, telPer1, telPer2, celPer, faxPer, true, sqls, coment);

                // Luego va con el contacto laboral
                if (!string.IsNullOrEmpty(labo)) {
                    // luego obtiene la provincia, localidad y codigo postal laboral
                    sql = "select p.par_id as prov, p2.par_id as loca, p2.par_orden as copo";
                    sql += "  from parametro p, parametro p2";
                    sql += " where p.par_clave        like 'PROVINCIA%'";
                    sql += "   and p.par_orden        = p2.par_valorlong";
                    sql += "   and p2.par_clave       like 'LOCALIDAD%'";
                    sql += "   and p2.par_orden = '" + cplab + "'";
                    sql += "   and p2.par_nombre = '" + localab + "'";
                    resulta = Persistencia.EjecutarSqlOneRow(sql, _cadena);
                    if (resulta != null) {
                        provId = resulta[0].ToString();
                        locaId = resulta[1].ToString();
                        codpos = resulta[2].ToString();
                    }

                    // luego verifica los telefonos laborales
                    string telLab1 = string.Empty;
                    if (!string.IsNullOrEmpty(registro["TelLaboral"].ToString().Trim()) &&
                        !registro["TelLaboral"].ToString().Trim().Equals("0"))
                        telLab1 = registro["TelLaboral"].ToString().Trim().ToUpper();

                    CrearContacto(_laboral.Id.ToString(), _origencto.Id.ToString(), persId, callelabo, provId, locaId,
                                  codpos, telLab1, string.Empty, string.Empty, string.Empty, false, sqls,
                                  "ASIGNACION NUEVA: " + DateTime.Now + ". Trabajo:" + labo + " " + coment2);
                }

                // crea la cuenta (u obtiene la que existe si existe)
                resulta = CrearCuenta(codigo, _entCfa.Id.ToString(), productoId.ToString(), comentario,
                                      persId, null, _ecGestion.Id.ToString(), DateTime.Now, false, sqls);
                string cuenta = resulta[0].ToString();

                // Verifica si puede ingrsar la deuda y, si debe,
                // da de baja la deuda informada que existiera
                VerificarDeudaCta(resulta, productoId.ToString(), sqls);

                // luego crea la nueva deuda para cargar y la asigna
                comentario = "ASIGNACION NUEVA " + DateTime.Now;
                CrearDeuda(cuenta, fechaDeuda, capital, 0, 0, 0, capital, 0, 0, 0, comentario, sqls);

                // Ejecuta todos los inserts y updates que debe
                Persistencia.EjecutarSqlDML(sqls, _cadena);
            } catch (Exception e) {
                Sistema.Controlador.logear("IMPORTACION-ERROR-NOK", ENivelMensaje.ERROR, e.ToString());
                throw;
            }
        }

        /// <summary>
        /// Este método importa una cuenta, y su saldo de deuda, desde 
        /// GENERICA, generando una nueva deuda informada, y creando 
        /// los saldos asociados.
        /// </summary>
        public static void ImportarAsignacionGenerica(DataRow registro) {
            var sqls = new List<string>();

            try {
                // establece variables iniciales a utilizarse en el proceso
                string dni = (registro["NroDocumento"] == null) ? null : registro["NroDocumento"].ToString().Trim();
                string codigo = (registro["NroCuenta"] == null) ? null : registro["NroCuenta"].ToString().Trim().ToUpper();
                long atiguedad = (registro["DiasMora"] == null) ? 0 : Convert.ToInt64(registro["DiasMora"].ToString());
                string producto = registro["Producto"].ToString().Trim();
                string entidad = registro["Entidad"].ToString().Trim();
                double capital = (registro["CapitalMora"] == null) ? 0 : Convert.ToDouble(registro["CapitalMora"].ToString().Replace('.', ','));
                double interes = (registro["InteresMora"] == null) ? 0 : Convert.ToDouble(registro["InteresMora"].ToString().Replace('.', ','));
                double honorarios = (registro["HonorarioMora"] == null) ? 0 : Convert.ToDouble(registro["HonorarioMora"].ToString().Replace('.', ','));
                double gastos = (registro["GastosMora"] == null) ? 0 : Convert.ToDouble(registro["GastosMora"].ToString().Replace('.', ','));
                string apenom = (registro["Apellido"] == null) ? null : registro["Apellido"].ToString().Trim().ToUpper() + ", "
                                      + ((registro["Nombre"] == null) ? null : registro["Nombre"].ToString().Trim().ToUpper());
                DateTime fechaDeuda;
                try {
                    fechaDeuda = Convert.ToDateTime(registro["FechaDeuda"].ToString());
                } catch (Exception) {
                    fechaDeuda = DateTime.Now.AddDays(-(atiguedad + 15));
                }
                string calle = (!string.IsNullOrEmpty(registro["Calle"].ToString().Trim())
                                    ? registro["Calle"].ToString().Trim().ToUpper() + " "
                                    : string.Empty)
                               + (!string.IsNullOrEmpty(registro["Dto"].ToString().Trim())
                                      ? registro["Dto"].ToString().Trim().ToUpper() + " "
                                      : string.Empty)
                               + (!string.IsNullOrEmpty(registro["Nro"].ToString().Trim())
                                      ? registro["Nro"].ToString().Trim().ToUpper() + " "
                                      : string.Empty)
                               + (!string.IsNullOrEmpty(registro["Piso"].ToString().Trim())
                                      ? registro["Piso"].ToString().Trim().ToUpper()
                                      : string.Empty);
                string callelabo = (!string.IsNullOrEmpty(registro["CalleLaboral"].ToString().Trim())
                                        ? registro["CalleLaboral"].ToString().Trim().ToUpper() + " "
                                        : string.Empty)
                                   + (!string.IsNullOrEmpty(registro["DtoLaboral"].ToString().Trim())
                                          ? registro["DtoLaboral"].ToString().Trim().ToUpper() + " "
                                          : string.Empty)
                                   + (!string.IsNullOrEmpty(registro["NroLaboral"].ToString().Trim())
                                          ? registro["NroLaboral"].ToString().Trim().ToUpper() + " "
                                          : string.Empty)
                                   + (!string.IsNullOrEmpty(registro["PisoLaboral"].ToString().Trim())
                                          ? registro["PisoLaboral"].ToString().Trim().ToUpper()
                                          : string.Empty);

                // Agrega si debe un comentario
                string comentario;
                try { comentario = registro["Comentario"].ToString().Trim().ToUpper(); }
                catch { comentario = "ASIGNACION NUEVA"; }
                comentario += " " + DateTime.Now;

                // Verifica e inserta/actualiza la persona
                string persId = CrearPersona(dni, apenom, _ivafinal.Id.ToString(), _soltero.Id.ToString(),
                                             _sexo.Id.ToString(), _media.Id.ToString(), comentario, sqls);

                // Luego va con la localidad y provincia
                string provId = _prov0, locaId = _loca0, codpos = "0";
                string sql = "select p.par_id as prov, p2.par_id as loca, p2.par_orden as copo";
                sql += "  from parametro p, parametro p2";
                sql += " where p.par_clave   like 'PROVINCIA%'";
                sql += "   and p.par_nombre  = '" + registro["Provincia"].ToString().Trim() + "'";
                sql += "   and p.par_orden   = p2.par_valorlong";
                sql += "   and p2.par_clave  like 'LOCALIDAD%'";
                sql += "   and p2.par_nombre = '" + registro["Localidad"].ToString().Trim() + "'";
                object[] resulta = Persistencia.EjecutarSqlOneRow(sql, _cadena);
                if (resulta != null) {
                    provId = resulta[0].ToString();
                    locaId = resulta[1].ToString();
                    codpos = resulta[2].ToString();
                }

                // Luego va con los telefonos
                string telPer1 = string.Empty, telPer2 = string.Empty, celPer = string.Empty;
                if (!string.IsNullOrEmpty(registro["Telefono"].ToString().Trim()))
                    telPer1 = registro["Telefono"].ToString().Trim().ToUpper();
                if (!string.IsNullOrEmpty(registro["Telefono2"].ToString().Trim()))
                    telPer2 = registro["Telefono2"].ToString().Trim().ToUpper();
                if (!string.IsNullOrEmpty(registro["Celular"].ToString().Trim()))
                    celPer = registro["Celular"].ToString().Trim().ToUpper();

                // Inserta el contacto personal
                CrearContacto(_personal.Id.ToString(), _origencto.Id.ToString(), persId, calle, provId, locaId,
                              codpos, telPer1, telPer2, celPer, string.Empty, true, sqls, comentario);

                // Luego va con la localidad y provincia laboral
                if (!string.IsNullOrEmpty(registro["CalleLaboral"].ToString().Trim())) {
                    sql = "select p.par_id as prov, p2.par_id as loca, p2.par_orden as copo";
                    sql += "  from parametro p, parametro p2";
                    sql += " where p.par_clave   like 'PROVINCIA%'";
                    sql += "   and p.par_nombre  = '" + registro["ProvinciaLaboral"].ToString().Trim() + "'";
                    sql += "   and p.par_orden   = p2.par_valorlong";
                    sql += "   and p2.par_clave  like 'LOCALIDAD%'";
                    sql += "   and p2.par_nombre = '" + registro["LocalidadLaboral"].ToString().Trim() + "'";
                    resulta = Persistencia.EjecutarSqlOneRow(sql, _cadena);
                    if (resulta != null) {
                        provId = resulta[0].ToString();
                        locaId = resulta[1].ToString();
                        codpos = resulta[2].ToString();
                    }

                    // Luego va con los telefonos laborales
                    string telLab1 = string.Empty, telLab2 = string.Empty, celLab = string.Empty;
                    if (!string.IsNullOrEmpty(registro["TelefonoLaboral"].ToString().Trim()))
                        telLab1 = registro["TelefonoLaboral"].ToString().Trim().ToUpper();
                    if (!string.IsNullOrEmpty(registro["TelefonoLaboral2"].ToString().Trim()))
                        telLab2 = registro["TelefonoLaboral2"].ToString().Trim().ToUpper();
                    if (!string.IsNullOrEmpty(registro["CelularLaboral"].ToString().Trim()))
                        celLab = registro["CelularLaboral"].ToString().Trim().ToUpper();

                    CrearContacto(_laboral.Id.ToString(), _origencto.Id.ToString(), persId, callelabo, provId, locaId,
                                  codpos, telLab1, telLab2, celLab, string.Empty, false, sqls, comentario);
                }

                // luego obtiene la entidad y el producto de la cuenta
                Guid productoId = Productos.GetByCodigo(producto).Id;
                Guid entidadId = Entidades.GetByCodigo(entidad).Id;

                // crea la cuenta (u obtiene la que existe si existe)
                resulta = CrearCuenta(codigo, entidadId.ToString(), productoId.ToString(), comentario,
                                      persId, null, _ecGestion.Id.ToString(), DateTime.Now, false, sqls);
                string cuenta = resulta[0].ToString();

                // Verifica si puede ingrsar la deuda y, si debe,
                // da de baja la deuda informada que existiera
                VerificarDeudaCta(resulta, productoId.ToString(), sqls);

                // luego crea la nueva deuda para cargar y la asigna
                comentario = "ASIGNACION NUEVA " + DateTime.Now;
                CrearDeuda(cuenta, fechaDeuda, capital, interes, honorarios, gastos, capital, 
                            interes, honorarios, gastos, comentario, sqls);

                // Ejecuta todos los inserts y updates que debe
                Persistencia.EjecutarSqlDML(sqls, _cadena);
            } catch (Exception e) {
                Sistema.Controlador.logear("IMPORTACION-ERROR-NOK", ENivelMensaje.ERROR, e.ToString());
                throw;
            }
        }
        #endregion

        #region novedades
        /// <summary>
        /// Este método importa una actualizacion de saldo de cuentas de 
        /// CARSA y/o CREDINEA, dando de baja la deuda informada actual,
        /// generando una nueva deuda informada, y modificando el saldo 
        /// actualizado.
        /// </summary>
        public static void ImportarSaldoCarsa(DataRow registro) {
            var sqls = new List<string>();

            try {
                // primero obtiene la entidad de la cuenta
                string strent = registro["Compania"].ToString().Trim().ToUpper();
                string ficha = registro["Ficha"].ToString().Trim().ToUpper();
                Guid entidadId = (strent.Contains("CARSA") || ficha.StartsWith("S")) ? _entCarsa.Id : _entCredinea.Id;
                DateTime fecha = Convert.ToDateTime(registro["FechaMora"]);
                double capital = Convert.ToDouble(registro["SdoCapital"].ToString().Replace('.', ','));
                double interes = Convert.ToDouble(registro["SdoInteres"].ToString().Replace('.', ','));
                double gastos = Convert.ToDouble(registro["GastosEmpresa"].ToString().Replace('.', ','));
                double honorarios = Convert.ToDouble(registro["SdoHonorario"].ToString().Replace('.', ','));
                //honorarios += Math.Round(((1 + (_iva.Valordouble / 100)) * honorarios));

                // luego verifica si la cuenta ya existe cargada (por codigo)   
                string sql = "SELECT [cta_id] as cta, [cta_producto] as prod, [cta_convenioactivo] as conv, [cta_activada] as activ, 1 as existe";
                sql += "  FROM [sgmpro].[dbo].[Cuenta]";
                sql += " WHERE [cta_codigo]    = '" + ficha + "'";
                sql += "   AND [cta_entidad]   = '" + entidadId + "'";
                sql += "   AND [cta_fechabaja] = convert(datetime, '1753-01-01 00:00:000', 121)";
                sql += " ORDER BY [cta_fechaasignacion] DESC";
                object[] resulta = Persistencia.EjecutarSqlOneRow(sql, _cadena);

                // si no existe entonces sale (ni intenta cargar la deuda)
                // pero si existe extrae los datos principales del select 
                if (resulta == null)
                    throw new DataErrorException("GENERICO", "La cuenta no existe en el Sistema!");
                string cuentaId = resulta[0].ToString();
                string prodId = resulta[1].ToString();
                int activa = Convert.ToInt32(resulta[3]);

                // si la cuenta estaba desactivada entonces la activa
                if (activa == 0) {
                    sql = "UPDATE [sgmpro].[dbo].[Cuenta]";
                    sql += "   SET [cta_activada] = 1";
                    sql += "        ,[cta_estado] = '" + _ecGestion.Id + "'";
                    sql += "        ,[cta_descripcion] = 'CUENTA REACTIVADA POR IMPORTACION DE SALDO'";
                    sql += " WHERE [cta_id] = '" + cuentaId + "'";
                    sqls.Add(sql);
                }

                // Verifica si puede ingresar la deuda y, si debe,
                // da de baja la deuda informada que existiera
                VerificarDeudaCta(resulta, prodId, sqls);

                // luego crea la nueva deuda para cargar y la asigna
                string comentario = "ACTUALIZACION DE SALDOS: " + DateTime.Now;
                CrearDeuda(cuentaId, fecha, capital, interes, honorarios, gastos, capital, interes, honorarios, gastos, comentario, sqls);
                
                Persistencia.EjecutarSqlDML(sqls, _cadena);
            } catch (Exception e) {
                throw new DataErrorException("GENERICO", e.ToString());
            }
        }

        /// <summary>
        /// Este método importa una actualizacion de saldo de cuentas de 
        /// CETRO, dando de baja la deuda informada actual, generando una 
        /// nueva deuda informada, y modificando el saldo actualizado.
        /// </summary>
        public static void ImportarSaldoCetro(DataRow registro) {
            var sqls = new List<string>();

            try {
                // primero obtiene la entidad de la cuenta
                string ficha = registro["DNI"].ToString().Trim().ToUpper().Replace("Z", "");
                DateTime fecha = Convert.ToDateTime(registro["UltPago"]);
                double saldo = Convert.ToDouble(registro["SAct"].ToString().Replace('.', ','));
                double capital = Convert.ToDouble(registro["SCapital"].ToString().Replace('.', ','));
                double interes = Math.Round((saldo - capital), 2);
                double honorarios = Math.Round(((capital + interes) * _FIJO_HONORARIO), 2);

                // luego verifica si la cuenta ya existe cargada (por codigo)   
                string sql = "SELECT [cta_id] as cta, [cta_producto] as produ, [cta_convenioactivo] as conv, [cta_activada] as activ, 1 as existe";
                sql += "  FROM [sgmpro].[dbo].[Cuenta]";
                sql += " WHERE [cta_codigo]    = '" + ficha + "'";
                sql += "   AND [cta_entidad]   = '" + _entCetro.Id + "'";
                sql += "   AND [cta_fechabaja] = convert(datetime, '1753-01-01 00:00:000', 121)";
                sql += " ORDER BY [cta_fechaasignacion] DESC";
                object[] resulta = Persistencia.EjecutarSqlOneRow(sql, _cadena);

                // si no existe entonces sale (ni intenta cargar la deuda)
                // pero si existe extrae los datos principales del select 
                if (resulta == null)
                    throw new DataErrorException("GENERICO", "La cuenta no existe en el Sistema!");
                string cuentaId = resulta[0].ToString();
                string prodId = resulta[1].ToString();
                int activa = Convert.ToInt32(resulta[3]);

                // si la cuenta estaba desactivada entonces la activa
                if (activa == 0) {
                    sql = "UPDATE [sgmpro].[dbo].[Cuenta]";
                    sql += "   SET [cta_activada] = 1";
                    sql += "        ,[cta_estado] = '" + _ecGestion.Id + "'";
                    sql += "        ,[cta_descripcion] = 'CUENTA REACTIVADA POR IMPORTACION DE SALDO'";
                    sql += " WHERE [cta_id] = '" + cuentaId + "'";
                    sqls.Add(sql);
                }

                // Verifica si puede ingresar la deuda y, si debe,
                // da de baja la deuda informada que existiera
                VerificarDeudaCta(resulta, prodId, sqls);

                // luego crea la nueva deuda para cargar y la asigna
                string comentario = "ACTUALIZACION DE SALDOS: " + DateTime.Now;
                CrearDeuda(cuentaId, fecha, capital, interes, honorarios, 0, capital, interes, honorarios, 0, comentario, sqls);
                
                Persistencia.EjecutarSqlDML(sqls, _cadena);
            } catch (Exception e) {
                throw new DataErrorException("GENERICO", e.ToString());
            }
        }

        /// <summary>
        /// Este método importa una actualizacion de saldo de cuentas de 
        /// PROVENCRED, dando de baja la deuda informada actual, generando una 
        /// nueva deuda informada, y modificando el saldo actualizado.
        /// </summary>
        public static void ImportarSaldoProvencred(DataRow registro) {
            var sqls = new List<string>();

            try {
            // primero obtiene la entidad de la cuenta
            string ficha = registro["NroCuenta"].ToString().Trim().ToUpper();
            string tipoprod = registro["TipoProducto"].ToString().Trim().ToUpper();
            string cliente = registro["Cliente"].ToString().Trim().ToUpper();
            string sucursal = registro["Sucursal"].ToString().Trim();
            string escenario = registro["Escenario"].ToString().Trim();
            string estado = registro["Estado"].ToString().Trim();
            string fechamov = registro["fecha_mov"].ToString().Trim();
            string impmov = registro["imp_ult_mov"].ToString().Trim().ToUpper();
            string prod = registro["Producto"].ToString().Trim().ToUpper();
            long atiguedad = Convert.ToInt64(registro["Dias_Atraso"].ToString());
            DateTime fecha = DateTime.Now.AddDays(-atiguedad);
            double capital = Convert.ToDouble(registro["Deuda_Vda"].ToString().Replace('.', ','));
            double honorarios = Math.Round((capital*_FIJO_HONORARIO), 2);

            // luego obtiene el producto de la cuenta
            Guid productoId;
            if (tipoprod.Equals(_PRESTAMO))
                productoId = _prodProvPtmo.Id;
            else if (tipoprod.Equals(_REFINAN))
                productoId = _prodProvRefin.Id;
            else if (tipoprod.Equals(_CUOTAYA))
                productoId = _prodProvCtaYa.Id;
            else if (tipoprod.Equals(_VISA) || tipoprod.Equals(_TARJETA))
                productoId = _prodProvTjta.Id;
            else
                throw new DataErrorException("GENERICO", "El producto [" + tipoprod + "] no existe en el Sistema para la Entidad!");


            // luego verifica si la cuenta ya existe cargada (por codigo)   
            string sql = "SELECT [cta_id] as cta, [cta_producto] as produ, [cta_convenioactivo] as conv, [cta_activada] as activ, 1 as existe";
            sql += "  FROM [sgmpro].[dbo].[Cuenta]";
            sql += " WHERE [cta_codigo]    = '" + ficha + "'";
            sql += "   AND [cta_entidad]   = '" + _entProven.Id + "'";
            sql += "   AND [cta_producto]  = '" + productoId + "'";
            sql += "   AND [cta_fechabaja] = convert(datetime, '1753-01-01 00:00:000', 121)";
            sql += " ORDER BY [cta_fechaasignacion] DESC";
            object[] resulta = Persistencia.EjecutarSqlOneRow(sql, _cadena);

            // si no existe la cuenta => sale (ni intenta cargar la deuda)
            if (resulta == null)
                throw new DataErrorException("GENERICO", "La cuenta no existe en el Sistema!");

            // si existe la cuenta primero baja la deuda informada actual
            // si no se permiten cuotas externas (esto es para ver bien!)
            string cuentaId = resulta[0].ToString();

            // si la cuenta estaba desactivada entonces la activa
            sql = "UPDATE [sgmpro].[dbo].[Cuenta]";
            sql += "  SET [cta_activada] = 1";
            sql += " WHERE [cta_id] = '" + cuentaId + "'";
            sqls.Add(sql);

            // Verifica si puede ingresar la deuda y, si debe,
            // da de baja la deuda informada que existiera
            VerificarDeudaCta(resulta, productoId.ToString(), sqls);

            // luego crea la nueva deuda para cargar y la asigna
            string comentario = "ACTUALIZACION DE SALDOS: " + DateTime.Now
                                   + "; Nro.Cte:" + cliente
                                   + "; Producto:" + prod
                                   + "; Sucursal:" + sucursal
                                   + "; Escenario:" + escenario
                                   + "; Estado:" + estado
                                   + "; FechaUMov:" + fechamov
                                   + "; ImporteUMov:" + impmov;
            CrearDeuda(cuentaId, fecha, capital, 0, honorarios, 0, capital, 0, honorarios, 0, comentario, sqls);

            Persistencia.EjecutarSqlDML(sqls, _cadena);
            } catch (Exception e) {
                throw new DataErrorException("GENERICO", e.ToString());
            }
        }

        /// <summary>
        /// Este método importa una actualizacion de saldo de cuentas de 
        /// GENERICO, dando de baja la deuda informada actual, generando una 
        /// nueva deuda informada, y modificando el saldo actualizado.
        /// </summary>
        public static void ImportarSaldoGenerico(DataRow registro) {
            var sqls = new List<string>();

            try {
            // primero obtiene la entidad de la cuenta
            string entidad = registro["Entidad"].ToString().Trim().ToUpper();            
            string prod = registro["Producto"].ToString().Trim().ToUpper();
            string ficha = registro["NroCuenta"].ToString().Trim().ToUpper();
            DateTime fecha = Convert.ToDateTime(registro["FechaDeuda"]);
            double capital = Convert.ToDouble(registro["Capital"].ToString().Replace('.', ','));
            double interes = Convert.ToDouble(registro["Interes"].ToString().Replace('.', ','));
            double honorarios = Convert.ToDouble(registro["Honorarios"].ToString().Replace('.', ','));
            double gastos = Convert.ToDouble(registro["Gastos"].ToString().Replace('.', ','));

            // luego verifica si la cuenta ya existe cargada (por codigo)   
            string sql = "SELECT [cta_id] as cta, [cta_producto] as produ, [cta_convenioactivo] as conv, [cta_activada] as activ, 1 as existe";
            sql += "  FROM [sgmpro].[dbo].[Cuenta]";
            sql += " WHERE [cta_codigo]    = '" + ficha + "'";
            sql += "   AND [cta_entidad]   = (select ent_id from entidad where ent_codigo = '" + entidad + "')";
            sql += "   AND [cta_producto]  = (select pro_id from producto where pro_entidad = '" + entidad + "' and pro_codigo = " + prod + "')";
            sql += "   AND [cta_fechabaja] = convert(datetime, '1753-01-01 00:00:000', 121)";
            sql += " ORDER BY [cta_fechaasignacion] DESC";
            object[] resulta = Persistencia.EjecutarSqlOneRow(sql, _cadena);

            // si no existe la cuenta => sale (ni intenta cargar la deuda)
            if (resulta == null)
                throw new DataErrorException("GENERICO", "La cuenta no existe en el Sistema!");
            string cuentaId = resulta[0].ToString();
            string prodId = resulta[1].ToString();
            int activa = Convert.ToInt32(resulta[3]);

            // si la cuenta estaba desactivada entonces la activa
            if (activa == 0) {
                sql = "UPDATE [sgmpro].[dbo].[Cuenta]";
                sql += "   SET [cta_activada] = 1";
                sql += "        ,[cta_estado] = '" + _ecGestion.Id + "'";
                sql += "        ,[cta_descripcion] = 'CUENTA REACTIVADA POR IMPORTACION DE SALDO'";
                sql += " WHERE [cta_id] = '" + cuentaId + "'";
                sqls.Add(sql);
            }

            // Verifica si puede ingresar la deuda y, si debe,
            // da de baja la deuda informada que existiera
            VerificarDeudaCta(resulta, prodId, sqls);

            // luego crea la nueva deuda para cargar y la asigna
            string comentario = "ACTUALIZACION DE SALDOS: " + DateTime.Now;
            CrearDeuda(cuentaId, fecha, capital, interes, honorarios, gastos, capital, interes, honorarios, gastos, comentario, sqls);

            Persistencia.EjecutarSqlDML(sqls, _cadena);
            } catch (Exception e) {
                throw new DataErrorException("GENERICO", e.ToString());
            }
        }

        /// <summary>
        /// Este método importa novedades de pagos para cuentas de CARSA
        /// y/o CREDINEA, actualizando ademas los saldos asociados a las
        /// mismas.
        /// </summary>
        public static void ImportarNovedadesPagoCarsa(DataRow registro) {
            // luego obtiene otros datos del registro
            const string observacion = "OBSERV: ";
            string mensaje = observacion;
            int pto = Convert.ToInt32(registro["NroPtoVta"].ToString().Trim());
            bool hayPlanVigente = registro["PlanVigente"].ToString().Trim().Equals("SI");
            string ficha = registro["NroFicha"].ToString().Trim().ToUpper();
            string expte = registro["ExpedNro"].ToString().Trim().ToUpper();
            string recibo = registro["NroRecibo"].ToString().Trim().ToUpper();
            int strent = Convert.ToInt32(registro["CodCom"].ToString().Trim());
            Guid entidadId = (strent == 4 || ficha.StartsWith("S")) ? _entCarsa.Id : _entCredinea.Id;

            double capital = Convert.ToDouble(registro["Capital"].ToString().Replace('.', ','));
            double interes = Convert.ToDouble(registro["Intereses"].ToString().Replace('.', ','));
            double gastos = Convert.ToDouble(registro["Gastos"].ToString().Replace('.', ','));
            double subtotal = Convert.ToDouble(registro["SubTotalEmpresa"].ToString().Replace('.', ','));
            double honorario = subtotal - capital - interes - gastos;

            // primero verifica el punto de venta que recibio el pago
            // para asegurarse de no tomar los pagos recibidos en A&A            
            if (pto == 706 || pto == 957)
                throw new DataErrorException("GENERICO", "El pago fue cobrado en el Estudio (ya computado)!");

            // Hace un tratamiento especial con las fechas por las dudas
            DateTime fechapago = Fechas.FechaNull;
            DateTime fechaimp = Fechas.FechaNull;
            try { fechapago = Convert.ToDateTime(registro["Fecha"]);} catch {}
            try { fechaimp = Convert.ToDateTime(registro["FechaImputacion"]);} catch {}

            // luego verifica el tipo de pago para no tomar anulaciones
            // y/o devoluciones (por hora no hacer nada es estos casos?)            
            string tipo = registro["CpteDGI"].ToString().Trim().ToUpper();
            if (tipo.Contains("ANULA") || tipo.Contains("DEVOLU"))
                throw new DataErrorException("GENERICO", "El tipo de pago es Devolucion ó Anulacion: valores no admitidos!");            

            // luego verifica si la cuenta ya existe cargada (por codigo)   
            string sql = "SELECT [cta_id] as cta, [cta_estado] as edo, [cta_activada] as act, [cta_convenioactivo] as conv";
            sql += "  FROM [sgmpro].[dbo].[Cuenta]";
            sql += " WHERE [cta_codigo]    = '" + ficha + "'";
            sql += "   AND [cta_entidad]   = '" + entidadId + "'";
            sql += "   AND [cta_fechabaja] = convert(datetime, '1753-01-01 00:00:000', 121)";
            sql += " ORDER BY [cta_fechaasignacion] DESC";
            object[] resulta = Persistencia.EjecutarSqlOneRow(sql, _cadena);

            // si no existe la cuenta => sale (ni intenta cargar la deuda)
            if (resulta == null)
                throw new DataErrorException("GENERICO", "La Cuenta no existe en el Sistema -o se encuentra dada de baja-!");

            // obtiene la cuenta para seguir con el resto
            Cuenta cuenta = Cuentas.GetById(((Guid)resulta[0]));

            // si existe pero esta cancelada entonces ni intenta cargar el pago
            if (cuenta.Estado.Equals(_ecCancelado))
                throw new DataErrorException("GENERICO", "La Cuenta tiene estado de Cancelación Total de Deuda!");

            // si existe pero esta cancelada entonces ni intenta cargar el pago
            if (cuenta.getMontoSaldoTotalActual() <= 0)
                throw new DataErrorException("GENERICO", "La Cuenta no tiene Deuda cancelable!");

            // si existe pero esta desasignada entonces no intenta cargar el pago
            if (cuenta.Estado.Equals(_ecDesasignada))
                mensaje += "Al ingreso del Pago la Cuenta se encuentra Desasignada!\r\n";

            // si existe pero no esta activa entonces no intenta cargar el pago
            if (resulta[2].ToString().Equals("0"))
                mensaje += "Al ingreso del Pago la Cuenta NO se encuentra Activa!\r\n";

            // si el pago es por plan pero la cuenta no tiene un plan entonces no carga el pago
            if (cuenta.ConvenioActivo == null && hayPlanVigente)
                mensaje += "Se ingresa un Pago marcado como de Convenio y la Cuenta no posee Convenio Activo!\r\n";

            // si el pago no es por plan y la cuenta si tiene un plan entonces no carga el pago
            if (cuenta.ConvenioActivo != null && !hayPlanVigente)
                mensaje += "Se ingresa un Pago que NO es de Convenio y la Cuenta posee un Convenio Activo!\r\n";

            // obtiene los datos necesarios para ingresar el pago
            if (cuenta.getMontoSaldoConvenio() <= 0 && hayPlanVigente && mensaje.Equals(observacion))
                mensaje += "Se ingresa un Pago marcado como de Convenio y la Cuenta NO posee saldo de Convenio!\r\n";

            // genera un mensaje descriptivo
            string desc = "Cuenta=" + cuenta +
                          " - Fecha=" + (fechapago == Fechas.FechaNull ? "S/D" : fechapago.Date.ToString()) +
                          " - Fecha Imp.=" + (fechaimp == Fechas.FechaNull ? "S/D" : fechaimp.Date.ToString()) +
                          " - Capital=$" + capital +
                          " - Interes=$" + interes +
                          " - Honor=$" + honorario +
                          " - Gastos=$" + gastos +
                          " - Total=$" + subtotal +
                          " - Expte=" + expte +
                          " - Recibo=" + recibo +
                          " - Sucursal=" + pto +
                          " - Tiene Convenio=" + (hayPlanVigente ? "SI" : "NO") +
                          (mensaje.Equals(observacion) ? string.Empty : " - " + mensaje);

            // si todavia no hay problemas entonces obtiene la deuda mas vieja (sea de plan o comun)
            //Deuda deuda = null;
            //if (mensaje.Equals(observacion))
            //    try {
            //        deuda = hayPlanVigente
            //                    ? (Deudas.OrdenarPorFecha(cuenta.ConvenioActivo.getCuotasPendientes()))[0]
            //                    : (Deudas.OrdenarPorFecha(cuenta.getDeudaInformada()))[0];
            //        if (deuda == null)
            //            throw new DataErrorException("GENERICO", "Deuda es NULL");
            //    } catch (Exception e) {
            //        Sistema.Controlador.logear("GENERICO", ENivelMensaje.INFORMACION, "Error al importar Pago [" + desc + "]:" + e);
            //        mensaje += hayPlanVigente
            //                    ? "No puede determinarse la Cuota del Convenio a cancelar!\r\n"
            //                    : "No puede determinarse la Deuda Informada a cancelar!\r\n";
            //    }

            //// Verifica los montos en caso de ser un plan, porque si hay mucha 
            //// diferencia, entonces solo agrega una gestion y termina el proceso
            //if ((hayPlanVigente 
            //    && (deuda != null) 
            //    && (Math.Abs(deuda.Total-subtotal) > Deuda.TOPE_DIFERENCIA_MONTO)) 
            //    || (!mensaje.Equals(observacion))) {
            Gestion gestion = new Gestion { Cuenta = cuenta,
                                            Tipo = _tipBack,
                                            Contactado = cuenta.Titular,
                                            Contacto = cuenta.Titular.getContactoPrincipal(),
                                            Estado = _gfinalizada,
                                            FechaInicio = DateTime.Now,
                                            FechaCierre = DateTime.Now,
                                            FechaUMod = DateTime.Now,
                                            Resultado = _resgesPagoVerif,
                                            ResultadoDesc = ("PAGO EN SUCURSAL PARA VERIFICAR: " + desc)};
            cuenta.agregarGestion(gestion);
            //return;
            //}

            //// si esta todos bien entonces genera el pago a ingresar
            //if (deuda != null)
            //    deuda.impactarPagoSucursal(capital, interes, honorario, gastos, fechapago,
            //        string.Format("Imputación hecha por importación de Pagos en Sucursal (usuario {1}): {0}", desc,
            //            Sistema.Controlador.SecurityService.getUsuario().Nombre));
        }

        /// <summary>
        /// Este método importa novedades de pagos para cuentas de CARSA
        /// y/o CREDINEA, actualizando ademas los saldos asociados a las
        /// mismas.
        /// </summary>
        public static void ImportarPromoCarsaJubilados(DataRow registro) {
            // luego obtiene otros datos del registro
            const string observacion = "OBSERV: ";
            string mensaje = observacion;
            string ficha = registro["Ficha"].ToString().Trim().ToUpper();
            string promoa = registro["PromoA"].ToString().Trim().ToUpper();
            string promob = registro["PromoB"].ToString().Trim().ToUpper();
            string promobcuota = registro["MontoCuota"].ToString().Trim().ToUpper();
            Guid entidadId = (ficha.StartsWith("S")) ? _entCarsa.Id : _entCredinea.Id;

            // Hace un tratamiento especial con las fechas por las dudas
            DateTime fechamora = Fechas.FechaNull;
            try { fechamora = Convert.ToDateTime(registro["FechaMora"]); } catch { }

            // luego verifica si la cuenta ya existe cargada (por codigo)   
            string sql = "SELECT [cta_id] as cta, [cta_estado] as edo, [cta_activada] as act, [cta_convenioactivo] as conv";
            sql += "  FROM [sgmpro].[dbo].[Cuenta]";
            sql += " WHERE [cta_codigo]    = '" + ficha + "'";
            sql += "   AND [cta_entidad]   = '" + entidadId + "'";
            sql += "   AND [cta_fechabaja] = convert(datetime, '1753-01-01 00:00:000', 121)";
            sql += " ORDER BY [cta_fechaasignacion] DESC";
            object[] resulta = Persistencia.EjecutarSqlOneRow(sql, _cadena);

            // si no existe la cuenta => sale (ni intenta cargar la deuda)
            if (resulta == null)
                throw new DataErrorException("GENERICO", "La Cuenta no existe en el Sistema -o se encuentra dada de baja-!");

            // obtiene la cuenta para seguir con el resto
            Cuenta cuenta = Cuentas.GetById(((Guid)resulta[0]));

            // si existe pero esta cancelada entonces ni intenta cargar el pago
            if (cuenta.Estado.Equals(_ecCancelado))
                throw new DataErrorException("GENERICO", "La Cuenta tiene estado de Cancelación Total de Deuda!");

            // si existe pero esta cancelada entonces ni intenta cargar el pago
            if (cuenta.getMontoSaldoTotalActual() <= 0)
                throw new DataErrorException("GENERICO", "La Cuenta no tiene Deuda cancelable!");

            // si existe pero esta desasignada entonces no intenta cargar el pago
            if (cuenta.Estado.Equals(_ecDesasignada))
                mensaje += "Al ingreso de la Promo la Cuenta se encuentra Desasignada!\r\n";

            // si existe pero no esta activa entonces no intenta cargar el pago
            if (resulta[2].ToString().Equals("0"))
                mensaje += "Al ingreso de la Promo la Cuenta NO se encuentra Activa!\r\n";

            // genera un mensaje descriptivo
            string desc = "Cuenta=" + cuenta +
                          " - Fecha Mora=" + (fechamora == Fechas.FechaNull ? "S/D" : fechamora.Date.ToString()) +
                          " - Opcion A: TOTAL = $" + promoa +
                          " - Opcion B: TOTAL = $" + promob + " EN 3 CUOTAS = $" + promobcuota +
                          (mensaje.Equals(observacion) ? string.Empty : " - " + mensaje);

            Gestion gestion = new Gestion {
                Cuenta = cuenta,
                Tipo = _tipBack,
                Contactado = cuenta.Titular,
                Contacto = cuenta.Titular.getContactoPrincipal(),
                Estado = _gfinalizada,
                FechaInicio = DateTime.Now,
                FechaCierre = DateTime.Now,
                FechaUMod = DateTime.Now,
                Resultado = _resgesPromo,
                ResultadoDesc = ("***PROMOCION CARSA JUBILADOS: " + desc)
            };
            cuenta.agregarGestion(gestion);
            cuenta.setearEstado(_ecPromocion);
        }

        /// <summary>
        /// Este método importa novedades de pagos para cuentas de CARSA
        /// y/o CREDINEA, actualizando ademas los saldos asociados a las
        /// mismas.
        /// </summary>
        public static void ImportarPromoCarsaMega(DataRow registro) {
            // luego obtiene otros datos del registro
            const string observacion = "OBSERV: ";
            string mensaje = observacion;
            string ficha = registro["Ficha"].ToString().Trim().ToUpper();
            string promoa = registro["PromoA"].ToString().Trim().ToUpper();
            string promob = registro["PromoB"].ToString().Trim().ToUpper();
            string promobcuota = registro["MontoCuota"].ToString().Trim().ToUpper();
            Guid entidadId = (ficha.StartsWith("S")) ? _entCarsa.Id : _entCredinea.Id;

            // Hace un tratamiento especial con las fechas por las dudas
            DateTime fechamora = Fechas.FechaNull;
            try { fechamora = Convert.ToDateTime(registro["FechaMora"]); }
            catch { }

            // luego verifica si la cuenta ya existe cargada (por codigo)   
            string sql = "SELECT [cta_id] as cta, [cta_estado] as edo, [cta_activada] as act, [cta_convenioactivo] as conv";
            sql += "  FROM [sgmpro].[dbo].[Cuenta]";
            sql += " WHERE [cta_codigo]    = '" + ficha + "'";
            sql += "   AND [cta_entidad]   = '" + entidadId + "'";
            sql += "   AND [cta_fechabaja] = convert(datetime, '1753-01-01 00:00:000', 121)";
            sql += " ORDER BY [cta_fechaasignacion] DESC";
            object[] resulta = Persistencia.EjecutarSqlOneRow(sql, _cadena);

            // si no existe la cuenta => sale (ni intenta cargar la deuda)
            if (resulta == null)
                throw new DataErrorException("GENERICO", "La Cuenta no existe en el Sistema -o se encuentra dada de baja-!");

            // obtiene la cuenta para seguir con el resto
            Cuenta cuenta = Cuentas.GetById(((Guid)resulta[0]));

            // si existe pero esta cancelada entonces ni intenta cargar el pago
            if (cuenta.Estado.Equals(_ecCancelado))
                throw new DataErrorException("GENERICO", "La Cuenta tiene estado de Cancelación Total de Deuda!");

            // si existe pero esta cancelada entonces ni intenta cargar el pago
            if (cuenta.getMontoSaldoTotalActual() <= 0)
                throw new DataErrorException("GENERICO", "La Cuenta no tiene Deuda cancelable!");

            // si existe pero esta desasignada entonces no intenta cargar el pago
            if (cuenta.Estado.Equals(_ecDesasignada))
                mensaje += "Al ingreso de la Promo la Cuenta se encuentra Desasignada!\r\n";

            // si existe pero no esta activa entonces no intenta cargar el pago
            if (resulta[2].ToString().Equals("0"))
                mensaje += "Al ingreso de la Promo la Cuenta NO se encuentra Activa!\r\n";

            // genera un mensaje descriptivo
            string desc = "Cuenta=" + cuenta +
                          " - Fecha Mora=" + (fechamora == Fechas.FechaNull ? "S/D" : fechamora.Date.ToString()) +
                          " - Opcion A: TOTAL = $" + promoa +
                          " - Opcion B: TOTAL = $" + promob + " EN 3 CUOTAS = $" + promobcuota +
                          (mensaje.Equals(observacion) ? string.Empty : " - " + mensaje);

            Gestion gestion = new Gestion {
                Cuenta = cuenta,
                Tipo = _tipBack,
                Contactado = cuenta.Titular,
                Contacto = cuenta.Titular.getContactoPrincipal(),
                Estado = _gfinalizada,
                FechaInicio = DateTime.Now,
                FechaCierre = DateTime.Now,
                FechaUMod = DateTime.Now,
                Resultado = _resgesPromo,
                ResultadoDesc = ("***PROMOCION CARSA ACTIVOS: " + desc)
            };
            cuenta.agregarGestion(gestion);
            cuenta.setearEstado(_ecPromocion);
        }

        /// <summary>
        /// Este método importa novedades de pagos para cuentas de CARSA
        /// y/o CREDINEA, actualizando ademas los saldos asociados a las
        /// mismas.
        /// </summary>
        public static void ImportarPromoCarsaGral(DataRow registro) {
            // luego obtiene otros datos del registro
            const string observacion = "OBSERV: ";
            string mensaje = observacion;
            string ficha = registro["Ficha"].ToString().Trim().ToUpper();
            string promoa = Math.Round(Convert.ToDouble(registro["Promo1"].ToString().Replace('.', ',')), 2).ToString().Trim().ToUpper();
            string promob = Math.Round(Convert.ToDouble(registro["Promo2"].ToString().Replace('.', ',')), 2).ToString().Trim().ToUpper();
            string promobcuota = Math.Round(Convert.ToDouble(registro["MontoCuota"].ToString().Replace('.', ',')), 2).ToString().Trim().ToUpper();
            string bonif = registro["Bonificacion"].ToString().Trim().ToUpper();
            Guid entidadId = (ficha.StartsWith("S")) ? _entCarsa.Id : _entCredinea.Id;

            // Hace un tratamiento especial con las fechas por las dudas
            DateTime fechamora = Fechas.FechaNull;
            try { fechamora = Convert.ToDateTime(registro["FechaMora"]); }
            catch { }

            // luego verifica si la cuenta ya existe cargada (por codigo)   
            string sql = "SELECT [cta_id] as cta, [cta_estado] as edo, [cta_activada] as act, [cta_convenioactivo] as conv";
            sql += "  FROM [sgmpro].[dbo].[Cuenta]";
            sql += " WHERE [cta_codigo]    = '" + ficha + "'";
            sql += "   AND [cta_entidad]   = '" + entidadId + "'";
            sql += "   AND [cta_fechabaja] = convert(datetime, '1753-01-01 00:00:000', 121)";
            sql += " ORDER BY [cta_fechaasignacion] DESC";
            object[] resulta = Persistencia.EjecutarSqlOneRow(sql, _cadena);

            // si no existe la cuenta => sale (ni intenta cargar la deuda)
            if (resulta == null)
                throw new DataErrorException("GENERICO", "La Cuenta no existe en el Sistema -o se encuentra dada de baja-!");

            // obtiene la cuenta para seguir con el resto
            Cuenta cuenta = Cuentas.GetById(((Guid)resulta[0]));

            // si existe pero esta cancelada entonces ni intenta cargar el pago
            if (cuenta.Estado.Equals(_ecCancelado))
                throw new DataErrorException("GENERICO", "La Cuenta tiene estado de Cancelación Total de Deuda!");

            // si existe pero esta cancelada entonces ni intenta cargar el pago
            if (cuenta.getMontoSaldoTotalActual() <= 0)
                throw new DataErrorException("GENERICO", "La Cuenta no tiene Deuda cancelable!");

            // si existe pero esta desasignada entonces no intenta cargar el pago
            if (cuenta.Estado.Equals(_ecDesasignada))
                mensaje += "Al ingreso de la Promo la Cuenta se encuentra Desasignada!\r\n";

            // si existe pero no esta activa entonces no intenta cargar el pago
            if (resulta[2].ToString().Equals("0"))
                mensaje += "Al ingreso de la Promo la Cuenta NO se encuentra Activa!\r\n";

            // genera un mensaje descriptivo
            string desc = "Cuenta=" + cuenta +
                          "\r\n - Fecha Mora=" + (fechamora == Fechas.FechaNull ? "S/D" : fechamora.Date.ToString("dd/MM/yyyy")) +
                          "\r\n - Opcion 1 (1 pago, 100% bonif.interes): TOTAL = $" + promoa +
                          "\r\n - Opcion 2 (3 pagos, " + bonif + "% bonif.interes): TOTAL = $" + promob + " EN 3 CUOTAS = $" + promobcuota +
                          (mensaje.Equals(observacion) ? string.Empty : "\r\n - " + mensaje);

            Gestion gestion = new Gestion {
                Cuenta = cuenta,
                Tipo = _tipBack,
                Contactado = cuenta.Titular,
                Contacto = cuenta.Titular.getContactoPrincipal(),
                Estado = _gfinalizada,
                FechaInicio = DateTime.Now,
                FechaCierre = DateTime.Now,
                FechaUMod = DateTime.Now,
                Resultado = _resgesPromo,
                ResultadoDesc = ("*** PROMOCION CARSA: " + desc)
            };
            cuenta.agregarGestion(gestion);
            cuenta.setearEstado(_ecPromocion);
        }

        /// <summary>
        /// Este método importa una actualizacion de saldo de cuentas de 
        /// ACCICOM, dando de baja la deuda informada actual, generando 
        /// una nueva deuda informada, y modificando el saldo actualizado.
        /// </summary>
        public static void ImportarSaldoAccicom(DataRow registro) {
            var sqls = new List<string>();

            try {
                // primero obtiene la entidad de la cuenta
                string ficha = registro["PRESTAMO"].ToString().Trim().ToUpper();
                Guid entidadId = _entAccicom.Id;
                DateTime fecha = Convert.ToDateTime(registro["AtrasodesdecuotaconVto"]);
                double capital = Convert.ToDouble(registro["SaldoCapitalalmomentoatraso_Impostiivo"].ToString().Replace('.', ','));
                const double interes = 0;
                const double gastos = 0;
                const double honorarios = 0;

                // luego verifica si la cuenta ya existe cargada (por codigo)   
                string sql = "SELECT [cta_id] as cta, [cta_producto] as prod, [cta_convenioactivo] as conv, [cta_activada] as activ, 1 as existe";
                sql += "  FROM [sgmpro].[dbo].[Cuenta]";
                sql += " WHERE [cta_codigo]    = '" + ficha + "'";
                sql += "   AND [cta_entidad]   = '" + entidadId + "'";
                sql += "   AND [cta_fechabaja] = convert(datetime, '1753-01-01 00:00:000', 121)";
                sql += " ORDER BY [cta_fechaasignacion] DESC";
                object[] resulta = Persistencia.EjecutarSqlOneRow(sql, _cadena);

                // si no existe entonces sale (ni intenta cargar la deuda)
                // pero si existe extrae los datos principales del select 
                if (resulta == null)
                    throw new DataErrorException("GENERICO", "La cuenta no existe en el Sistema!");
                string cuentaId = resulta[0].ToString();
                string prodId = resulta[1].ToString();
                int activa = Convert.ToInt32(resulta[3]);

                // si la cuenta estaba desactivada entonces la activa
                if (activa == 0) {
                    sql = "UPDATE [sgmpro].[dbo].[Cuenta]";
                    sql += "   SET [cta_activada] = 1";
                    sql += "        ,[cta_estado] = '" + _ecGestion.Id + "'";
                    sql += "        ,[cta_descripcion] = 'CUENTA REACTIVADA POR IMPORTACION DE SALDO'";
                    sql += " WHERE [cta_id] = '" + cuentaId + "'";
                    sqls.Add(sql);
                }

                // Verifica si puede ingresar la deuda y, si debe,
                // da de baja la deuda informada que existiera
                VerificarDeudaCta(resulta, prodId, sqls);

                // luego crea la nueva deuda para cargar y la asigna
                string comentario = "ACTUALIZACION DE SALDOS: " + DateTime.Now;
                CrearDeuda(cuentaId, fecha, capital, interes, honorarios, gastos, capital, interes, honorarios, gastos, comentario, sqls);

                Persistencia.EjecutarSqlDML(sqls, _cadena);
            } catch (Exception e) {
                throw new DataErrorException("GENERICO", e.ToString());
            }
        }
        #endregion

        #region otras
        /// <summary>
        /// Importa las gestiones recibidas desde el Lex Doctor.
        /// Como en el archivo exportado del Lex son 6 registros por
        /// cada cuenta
        /// </summary>
        public static void ImportarGestionesLegales(ArrayList registro) {
            try {
                // Obtiene la segunda fila, la cual tiene el nº de expendiente
                String strReg = registro[1].ToString();
                // Extrae el nº de expediente
                String nroExp = strReg.Substring(
                    strReg.IndexOf("Exp:") + 4,
                    strReg.Length - (strReg.IndexOf("Exp:") + 4));
                // Limpia de espacios
                nroExp = nroExp.Trim();

                // Verifica si existe una cuenta con ese nº de exp.
                if (nroExp == String.Empty)
                    return;
                var unSBuilder = new StringBuilder();
                unSBuilder.Append("select c.cta_id from Cuenta c ");
                unSBuilder.Append(String.Format("where c.cta_expediente = '{0}' ", nroExp));
                object[] resulta2 = Persistencia.EjecutarSqlOneRow(
                    unSBuilder.ToString(),
                    Persistencia.Controlador.CadenaConexion);
                if (resulta2 == null)
                    return;
                string ctaId = resulta2[0].ToString();

                // Arma la lista de gestiones realizadas en el Legales
                strReg = registro[4].ToString();
                // Extrae las gestiones registradas tamaño fijo 5, separados por |
                strReg = strReg.Remove(0, 17);
                char[] delimitador = {'|'};
                string[] gestiones = strReg.Split(delimitador);
                var ultGestLeg = new Parametro();

                // Recorre el array de gestiones legales y verifica si tienen los estados
                // CON EMBARGO o CON DEPOSITO
                foreach (string t in gestiones) {
                    // Si encuentra el estado CON EMBARGO almacena en la variable ultGestLeg. 
                    // a menos que ya tenga cargada el estado CON DEPOS. JUD
                    ultGestLeg = (t.Trim().Equals(_ecJuicioCEmb.Nombre) && !ultGestLeg.Equals(_ecJuicioCDep.Nombre))
                                     ? _ecJuicioCEmb
                                     : ultGestLeg;
                    // Si encuentra CON DEPOSITO JUD lo guarda.
                    ultGestLeg = (t.Trim().Equals(_ecJuicioCDep.Nombre)) ? _ecJuicioCDep : ultGestLeg;
                }

                // Si ultGestLeg no tiene nada, es porque esa cuenta no tiene gestiones
                // legales en estado CON EMBARGO o DEPOSITO JUDICIAL. En ese caso retorna.
                if (String.IsNullOrEmpty(ultGestLeg.Nombre))
                    return;

                //---- Obtiene todas las gestiones legales para la cuenta tratada ---//
                // Arma el string de consulta
                unSBuilder = new StringBuilder();
                unSBuilder.Append("select * from Gestion where ");
                unSBuilder.Append(String.Format("ges_cuenta = '{0}' ", ctaId));
                unSBuilder.Append(String.Format(" and ges_tipo = '{0}' ", _tipLegal.Id));
                unSBuilder.Append(String.Format(" and ges_resultadodesc = '{0}'", ultGestLeg.Nombre));
                // Tira la consulta 
                resulta2 = Persistencia.EjecutarSqlOneRow(
                    unSBuilder.ToString(), Persistencia.Controlador.CadenaConexion);
                // Si la consulta no devuelve nada, significa que la ultima gestion
                // del Lex, todavia no fue registrada en el sgmpro. Si encuentra, significa
                // que ya esta cargada y retorna.
                if (resulta2 != null)
                    return;

                //----- Inserta la nueva gestion Legal -----//
                // Crea un nuevo ID para la gestion
                Guid gestion = Guid.NewGuid();

                // Arma el string del INSERT SQL.

                unSBuilder = new StringBuilder();
                unSBuilder.Append("BEGIN TRANSACTION ");

                unSBuilder.Append(
                    "INSERT INTO [sgmpro].[dbo].[Gestion]"
                    + "([ges_id]"
                    + ",[ges_tipo]"
                    + ",[ges_estado]"
                    + ",[ges_fechainicio]"
                    + ",[ges_resultado]"
                    //+ ",[ges_resultadofecha]"
                    + ",[ges_fechacierre]"
                    + ",[ges_resultadodesc]"
                    + ",[ges_fechaumod]"
                    + ",[ges_fechabaja]"
                    + ",[ges_cuenta]"
                    + ",[ges_usuario]) "
                    + "VALUES"
                    + String.Format("('{0}'", gestion)
                    + String.Format(",'{0}'", _tipLegal.Id)
                    + String.Format(",'{0}'", _gfinalizada.Id)
                    + String.Format(",'{0}'", Fechas.GetOkDate(DateTime.Now))
                    + String.Format(",'{0}'", _resges3.Id)
                    //+ ",'" + Fechas.GetOkDate(DateTime.Today) + "'"
                    + String.Format(",'{0}'", Fechas.GetOkDate(DateTime.Now))
                    + String.Format(",'{0}'", ultGestLeg)
                    + String.Format(",'{0}'", Fechas.GetOkDate(DateTime.Now))
                    + String.Format(",'{0}'", Fechas.GetOkDate(DateTime.MinValue))
                    + String.Format(",'{0}'", ctaId)
                    + String.Format(",'{0}') ", _usuario.Id));
                //Persistencia.EjecutarSqlDML(sqlIns, _cadena);

                //---- Actualiza el estado de la cuenta -----//
                // Arma la setencia sql
                unSBuilder.Append("Update Cuenta ");
                unSBuilder.Append(String.Format("set cta_estado = '{0}' ", ultGestLeg.Id));
                unSBuilder.Append(String.Format(" where cta_id = '{0}' ", ctaId));

                unSBuilder.Append("COMMIT TRANSACTION");
                // Ejecuta el update
                Persistencia.EjecutarSqlDML(unSBuilder.ToString(), _cadena);

                Sistema.Controlador.logear("GENERICO", ENivelMensaje.ERROR, "IMP.OK GES:" + gestion);
            } catch {
                Sistema.Controlador.logear("GENERICO", ENivelMensaje.DEBUG, "Error en la actualización de Legales");
            }
        }

        /// <summary>
        /// Este método desasigna una cuenta de cualquier entidad.
        /// </summary>
        public static void ImportarDesasignacion(DataRow registro) {
            string ficha = registro["Ficha"].ToString().Trim().ToUpper();
            foreach (Cuenta c in RepositorioGenerico<Cuenta>.GetByCriteria(
                true, new[] {Criterios.Igual("Codigo", ficha)}, null)) {
                c.Estado = _ecDesasignada;
                c.Activada = false;
                c.Descripcion += " DESASIG.MASIVA["+ Sistema.Controlador.SecurityService.getUsuario()+ ":"+ DateTime.Now+ "]";
                c.save();
            }
        }

        /// <summary>
        /// Metodos helpers para crear cosas
        /// </summary>
        public static string CrearPersona(string dni, string nombre, string iva, string estado,
                                          string sexo, string clase, string desc, List<string> sqls) {
            string persona;

            // verifica si la persona ya existe cargada (por DNI o deudor)
            string sql = "select p.prs_id as person";
            sql += "  from persona p";
            sql += " where p.prs_dni = '" + dni + "'";
            object[] resulta = Persistencia.EjecutarSqlOneRow(sql, _cadena);

            // si no existe la persona entonces inserta la misma, pero
            // si ya existe entonces la reactiva y actualiza (por las dudas)
            if (resulta == null) {
                persona = Guid.NewGuid().ToString();
                string insert = "INSERT INTO [sgmpro].[dbo].[Persona]"
                                + "([prs_id]"
                                + ",[prs_nombre]"
                                + ",[prs_dni]"
                                + ",[prs_tipoiva]"
                                + ",[prs_estadocivil]"
                                + ",[prs_sexo]"
                                + ",[prs_economia]"
                                + ",[prs_comentario]"
                                + ",[prs_fechaumod]"
                                + ",[prs_fechabaja])"
                                + "VALUES"
                                + "('" + persona + "'"
                                + ",'" + nombre + "'"
                                + ",'" + dni + "'"
                                + ",'" + iva + "'"
                                + ",'" + estado + "'"
                                + ",'" + sexo + "'"
                                + ",'" + clase + "'"
                                + ",'" + desc + "'"
                                + ",'" + DateTime.Now + "'"
                                + ",'" + Fechas.FechaNull + "')";
                sqls.Add(insert);
            } else {
                persona = resulta[0].ToString();
                string update = "UPDATE [sgmpro].[dbo].[Persona]"
                                + "   SET [prs_fechabaja] = convert(datetime, '1753-01-01 00:00:000', 121)"
                                + "      ,[prs_fechaumod] = getdate()"
                                + " WHERE [prs_id]    = '" + persona + "'";
                sqls.Add(update);
            }

            return persona;
        }

        public static string CrearContacto(string tipo, string origen, string persona, string direccion, string provincia, 
                                           string localidad, string codpos, string telper1, string telper2, string celular, 
                                           string fax, bool verPpal, List<string> sqls, string descripcion) {
            // Verifica si el contacto existe y es principal y verificado
            // en cuyo caso no hace nada y devuelve el id del contacto encontrado
            string sql = "select c.con_verificadopor as verif, c.con_tipo as tipo, c.con_id as contact";
            sql += "  from contacto c";
            sql += " where c.con_persona   = '" + persona + "'";
            sql += "   and c.con_principal = 1";
            sql += "   and c.con_fechabaja = convert(datetime, '1753-01-01 00:00:00.000', 121)";
            object[] resulta = Persistencia.EjecutarSqlOneRow(sql, _cadena);
            if (resulta != null
                && resulta[0] != null && resulta[0].ToString() != string.Empty
                && resulta[1] != null && resulta[1].ToString() == tipo) {
                return resulta[2].ToString();
            }

            // Sino, sigue e inserta el contacto y verifica si debe marcar 
            // el contacto a crearse como el contacto principal de la persona
            string contacto = Guid.NewGuid().ToString();
            string insert = "INSERT INTO [sgmpro].[dbo].[Contacto]"
                            + "([con_id]"
                            + ",[con_tipo]"
                            + ",[con_descripcion]"
                            + ",[con_principal]"
                            + ",[con_calle]"
                            + ",[con_provincia]"
                            + ",[con_localidad]"
                            + ",[con_cp]"
                            + ",[con_telefono1]"
                            + ",[con_telefono2]"
                            + ",[con_celular]"
                            + ",[con_fax]"
                            + ",[con_fechaumod]"
                            + ",[con_fechabaja]"
                            + ",[con_origen]"
                            + ",[con_persona]) "
                            + "VALUES"
                            + "('" + contacto + "'"
                            + ",'" + tipo + "'"
                            + ",'" + descripcion + "'"
                            + "," + ((resulta == null && verPpal) ? "1" : "0")
                            + ",'" + direccion + "'"
                            + ",'" + provincia + "'"
                            + ",'" + localidad + "'"
                            + ",'" + codpos + "'"
                            + ",'" + telper1 + "'"
                            + ",'" + telper2 + "'"
                            + ",'" + celular + "'"
                            + ",'" + fax + "'"
                            + ",'" + DateTime.Now + "'"
                            + ",'" + Fechas.FechaNull + "'"
                            + ",'" + origen + "'"
                            + ",'" + persona + "')";
            sqls.Add(insert);

            return contacto;
        }

        public static object[] CrearCuenta(string codigo, string entidad, string producto, string desc, string titular, 
                                           string garante, string estado, DateTime fechaAsignacion, bool reasignar, List<string> sqls) {

            // verifica si la cuenta ya existe cargada (por codigo+producto+entidad)   
            string sql = "SELECT [cta_id] as cta, [cta_activada] as activ, ";
            sql += " [cta_fechabaja] as fecbaja, [cta_convenioactivo] as conv, 1 as existe";
            sql += "  FROM [sgmpro].[dbo].[Cuenta]";
            sql += " WHERE [cta_codigo]    = '" + codigo + "'";
            sql += "   AND [cta_producto]  = '" + producto + "'"; 
            sql += "   AND [cta_entidad]   = '" + entidad + "'";
            object[] resulta = Persistencia.EjecutarSqlOneRow(sql, _cadena);

            // Si no existe entonces continua con la carga de la cuenta
            // pero si existe entonces unicamente toma el id para despues
            if (resulta == null || resulta[0] == null) {
                resulta = new object[] { Guid.NewGuid(), 1, Fechas.FechaNull, null, 0 };

                sql = "INSERT INTO [sgmpro].[dbo].[Cuenta]"
                      + "([cta_id]"
                      + ",[cta_entidad]"
                      + ",[cta_producto]"
                      + ",[cta_codigo]"
                      + ",[cta_descripcion]"
                      + ",[cta_titular]"
                      + ",[cta_garante]"
                      + ",[cta_estado]"
                      + ",[cta_activada]"
                      + ",[cta_vigencia]"
                      + ",[cta_fechaelegible]"
                      + ",[cta_fechaalta]"
                      + ",[cta_fechaasignacion]"
                      + ",[cta_fechabaja])"
                      + "VALUES"
                      + "('" + resulta[0] + "'"
                      + ",'" + entidad + "'"
                      + ",'" + producto + "'"
                      + ",'" + codigo + "'"
                      + ",'" + desc.Substring(0, (desc.Length > 255 ? 255 : desc.Length)) + "'"
                      + ",'" + titular + "'"
                      + ((garante != null) ? ",'" + garante + "'" : ", null")
                      + ",'" + estado + "'"
                      + ",1"
                      + ",0"
                      + ",'" + Fechas.FechaNull + "'"
                      + ",'" + DateTime.Now + "'"
                      + ",'" + DateTime.Now + "'"
                      + ",'" + Fechas.FechaNull + "')";
                sqls.Add(sql);
                return resulta;
            } 

            // Si la cuenta existe pero dada de baja entonces lanza error
            if (Convert.ToDateTime(resulta[2]) != Fechas.FechaNull) {
                throw new DataErrorException("GENERICO", "La cuenta existe, pero se encuentra dada de baja!");
            }

            // Si la cuenta existe pero no se encuentra activa entonces lanza error
            //if (Convert.ToInt32(resulta[1]) == 0) 
            //  throw new DataErrorException("GENERICO", "La cuenta no se encuentra activada!");

            // PEDIDO DE NATALIA 10/01/2012 *************************
            // Si la cta. esta inactiva, se reactiva si vino de nuevo
            // en la asignación (por pedido,las cuentas se desactivan
            // antes de comenzar un proceso de asignación, asi quedan 
            // solo las que efectivamente fueron asignadas nuevamente
            if (Convert.ToInt32(resulta[1]) == 0) {
                sql = "UPDATE [sgmpro].[dbo].[Cuenta]";
                sql += "  SET [cta_activada] = 1";
                sql += "  ,[cta_descripcion] = substring(('REASIGNADA:'+convert(varchar, getdate(), 110)+'. '+[cta_descripcion]), 0, 255)";
                sql += "  ,[cta_estado] = '" + _ecGestion.Id + "'";
                sql += " WHERE [cta_id] = '" + resulta[0] + "'";
                sqls.Add(sql);
            }
            // ******************************************************         

            if (!reasignar && Convert.ToInt32(resulta[1]) == 1)
                throw new DataErrorException("GENERICO", "La Cuenta ya existe y se encuentra activa, pruebe actualizar saldo!");

            return resulta;
        }

        public static void VerificarDeudaCta(object[] parametros, string producto, List<string> sqls) {
            string cuentaId = parametros[0].ToString();
            bool enConvenio = (parametros[3] is Guid);
            bool cuentaExiste = ((int)parametros[4] == 1);

            // si existe la cuenta primero verifica que no este en convenio, ya que
            // en ese caso no se toma la deuda nueva (porque prevalece el convenio)
            // pero si no hay convenio verifica si se admite la deuda en cuotas, en 
            // cuyo caso solo carga la nueva deuda (ya q' si no admite deuda en cta
            // => primero baja la deuda informada actual -esto es para ver bien!!-)
            if (cuentaExiste) {
                if (enConvenio)
                    throw new DataErrorException("GENERICO", "La Cuenta posee Convenio y no admite nuevas Deudas!");

                string sql = "SELECT [pro_deudaencuotas] as cuotas";
                sql += "  FROM [sgmpro].[dbo].[Producto]";
                sql += " WHERE [pro_id]    = '" + producto + "'";
                sql += "   AND [pro_fechabaja] = convert(datetime, '1753-01-01 00:00:000', 121)";
                object[] resulta = Persistencia.EjecutarSqlOneRow(sql, _cadena);
                if (resulta != null && !((bool)resulta[0])) {
                    sql = "UPDATE [sgmpro].[dbo].[Deuda]";
                    sql += "   SET [deu_fechabaja] = getdate()";
                    sql += " WHERE [deu_cuenta]    = '" + cuentaId + "'";
                    sql += "   AND [deu_informada] = 1";
                    sql += "   AND [deu_fechabaja] = convert(datetime, '1753-01-01 00:00:000', 121)";
                    sqls.Add(sql);
                }
            }            
        }

        public static string CrearDeuda(string cuenta, DateTime fecha, double capital, double interes, double honorarios, double gastos,
                                      double capitalo, double intereso, double honoroso, double gastoso, string obs, List<string> sqls) {
            string deuda = Guid.NewGuid().ToString();

            // luego crea la nueva deuda para cargar y la asigna
            string sql = "INSERT INTO [sgmpro].[dbo].[Deuda]"
                  + "([deu_id]"
                  + ",[deu_cuenta]"
                  + ",[deu_fechavto]"
                  + ",[deu_capital]"
                  + ",[deu_interes]"
                  + ",[deu_gastos]"
                  + ",[deu_honorarios]"
                  + ",[deu_capitalo]"
                  + ",[deu_intereso]"
                  + ",[deu_gastoso]"
                  + ",[deu_honoro]"
                  + ",[deu_concepto]"
                  + ",[deu_detalle]"
                  + ",[deu_estado]"
                  + ",[deu_descripcion]"
                  + ",[deu_informada]"
                  + ",[deu_fechaalta]"
                  + ",[deu_fechabaja])"
                  + "VALUES"
                  + "('" + deuda + "'"
                  + ",'" + cuenta + "'"
                  + ",'" + fecha + "'"
                  + "," + capital.ToString().Replace(",", ".")
                  + "," + interes.ToString().Replace(",", ".")
                  + "," + gastos.ToString().Replace(",", ".")
                  + "," + honorarios.ToString().Replace(",", ".")
                  + "," + capitalo.ToString().Replace(",", ".")
                  + "," + intereso.ToString().Replace(",", ".")
                  + "," + gastoso.ToString().Replace(",", ".")
                  + "," + honoroso.ToString().Replace(",", ".")
                  + ",'" + _conrecibopp.Id + "'"
                  + ",'" + _migrado.Id + "'"
                  + ",'" + _deupend.Id + "'"
                  + ",'" + obs + "'"
                  + ",1"
                  + ",'" + DateTime.Now + "'"
                  + ",'" + Fechas.FechaNull + "')";
            sqls.Add(sql);

            return deuda;
        }
        #endregion
    }
}