///////////////////////////////////////////////////////////
//  SgmproSistema.cs
//  Implementation of the Class SgmproSistema
//  Generated by Enterprise Architect
//  Created on:      13-abr-2009 17:23:42
//  Original author: Fito
///////////////////////////////////////////////////////////
using System;
using scioBaseLibrary;
using scioBaseLibrary.helpers;
using scioBaseLibrary.interfases;
using scioLoggingLibrary.interfases;
using scioPersistentLibrary;
using scioSecureLibrary.interfases;
using scioToolLibrary;
using scioToolLibrary.enums;
using sgmpro.Properties;
using sgmpro.helpers;

namespace sgmpro {
    /// <summary>
    /// Esta clase es la implementación para Sgmpro de la interface IControladorSistema, la cual 
    /// es base de los sistemas en nuestro 'proto-framework'. La librería scioBaseLibrary posee 
    /// una implementación de clase que ya implementa dicha interfaz, llamada 'Sistema' y que ya 
    /// tiene todos los métodos creados con funcionalidad por defecto, así que aquí solo hay que: 
    /// a) heredar 'Sistema' e implementar un patron singleton en esta propia clase (para evitar 
    /// problemas; y b) cambiar lo que sea necesario y/o especifico. Se supone que es esta clase
    /// la que debería arrancar desde el punto de entrada a la aplicación.
    /// </summary>
    public class SgmproSistema : Sistema {
        // Implementa el patrón Singleton para evitar problemas
        private SgmproSistema() { }
        public new static IControladorSistema Controlador {
            get { return (_sistema ?? (_sistema = new SgmproSistema())); }
        }

        /// <summary>
        /// Implementa el Método de la Interfaz. 
        /// </summary>
        public override void ejecutarProcesosBatch() {
            Sistema.Controlador.logear("SISTEMA-JOBRUN-INIT", ENivelMensaje.INFORMACION, null);
            try {
                ProcesosGenerales.VerificarYActualizarSaldos();
                Sistema.Controlador.logear("SISTEMA-JOBRUN-OK", ENivelMensaje.INFORMACION, "ProcesosGenerales.VerificarYActualizarSaldos");
                CUCaller.CallCU("cuGenerarJobs.CURunJob", this, null);
                Sistema.Controlador.logear("SISTEMA-JOBRUN-OK", ENivelMensaje.INFORMACION, "cuGenerarJobs.CURunJob");
            } catch (Exception e) {
                Sistema.Controlador.logear("SISTEMA-JOBRUN-ERROR", ENivelMensaje.ERROR, e.ToString());
            }
            Sistema.Controlador.logear("SISTEMA-JOBRUN-END", ENivelMensaje.INFORMACION, null);
        }

        /// <summary>
        /// Implementa el Método de la Interfaz.
        /// </summary>
        public override void iniciarParametros() {
            _nombre = Settings.Default.Nombre;
            _titulo = Settings.Default.Titulo;
            _version = Settings.Default.Version;
            _conexion = Settings.Default.Conexion;
            _lastuser = Settings.Default.LastUser;
            _database = Settings.Default.Database;
        }

        /// <summary>
        /// Implementa el Método de la Interfaz.
        /// </summary>
        public override void iniciarPersistencia() {
            // Inicializa las clases helpers de acceso a datos a utilizarse
            EsquemaRelacional.Helper = new SgmproRelacional();
            //EsquemaORM.Helper = new SgmproORM(); // COMENTAR PARA NO CREAR EL ESQUEMA DESDE CERO!!!

            // Establece las propiedades básicas del ORM a utilizarse
            Persistencia.Controlador.setearPropiedad("connection.provider", "NHibernate.Connection.DriverConnectionProvider");
            Persistencia.Controlador.setearPropiedad("connection.driver_class", "NHibernate.Driver.SqlClientDriver");
            Persistencia.Controlador.setearPropiedad("current_session_context_class", "thread_static");
            Persistencia.Controlador.setearPropiedad("dialect", "NHibernate.Dialect.MsSql2005Dialect");
            Persistencia.Controlador.setearPropiedad("show_sql", "false");
            Persistencia.Controlador.setearPropiedad("proxyfactory.factory_class", "NHibernate.ByteCode.Castle.ProxyFactoryFactory, NHibernate.ByteCode.Castle");
            Persistencia.Controlador.setearPropiedad("connection.connection_string", _conexion);

            // Incluye librerias con definiciones de objetos relacionales
            Persistencia.Controlador.incluirLibreria("scioPersistentLibrary");
            Persistencia.Controlador.incluirLibreria("scioParamLibrary");
            Persistencia.Controlador.incluirLibreria("scioSecureLibrary");
            Persistencia.Controlador.incluirLibreria("scioControlLibrary");
            Persistencia.Controlador.incluirLibreria("sgmpro");

            // Establece valores basicos del mecanismo de persistencia
            Persistencia.Controlador.Nombre = _database;
            Persistencia.Controlador.CadenaConexion = _conexion;

            // Inicia una sesion contra el mecanismo de persistencia
            Persistencia.Controlador.crearSsp();
        }
    }
}