///////////////////////////////////////////////////////////
//  ProcesoGeneracion.cs
//  Implementation of the Class ProcesoGeneracion
//  Generated by Enterprise Architect
//  Created on:      20-abr-2009 16:57:19
//  Original author: Fernando
///////////////////////////////////////////////////////////using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using scioPersistentLibrary;
using scioBaseLibrary;
using sgmpro.dominio.configuracion;
using scioToolLibrary.enums;
using scioBaseLibrary.excepciones;
using System;
using scioParamLibrary.dominio;
using scioParamLibrary.dominio.repos;
using scioToolLibrary;
using scioSecureLibrary.dominio;

namespace sgmpro.helpers {
    ///<summary>
    /// Esta clase contiene una serie de métodos helpers asociados a un proceso de
    /// generación de listas y para ser utilizados en tal caso. Se encarga asi de
    /// las estructuras internas utilizadas durante el proceso actuando como una
    /// capa de abstracción para el mismo.
    ///</summary>
    public class ProcesosGenerales {
        private static readonly Parametro _creada = Parametros.GetByClave("ESTADOGESTION.CREADA");
        private static readonly Parametro _asignada = Parametros.GetByClave("ESTADOGESTION.ASIGNADA");
        private static readonly Parametro _finalizada = Parametros.GetByClave("ESTADOGESTION.FINALIZADA");

        /// <summary>
        /// Este método descarta todas las gestiones no asignadas de una lista determinada.
        /// </summary>
        public static string DescartarGestiones(ListaGestion lista) {
            Sistema.Controlador.logear("JOBRUN-DEL-GES-LISTA", ENivelMensaje.INFORMACION, lista.ToString());
            
            string sql = "delete from gestion" +
                         " where ges_usuario is null" +
                         "   and ges_estado    = '" + _creada.Id + "'" +
                         "   and ges_lista     = '" + lista.Id + "'";
            long res = Persistencia.EjecutarSqlDML(sql, Persistencia.Controlador.CadenaConexion);
            Sistema.Controlador.logear("GENERICO",ENivelMensaje.INFORMACION,
                        "Descarto " + res + " gestiones creadas de Lista: " + lista.ToString());
            
            sql = "delete from gestion" +
                  " where ges_estado    = '" + _asignada.Id + "'" +
                  "   and ges_resultado is null" +
                  "   and ges_resultadodesc is null" +
                  "   and ges_fechainicio = '" + Fechas.FechaNull + "'" +
                  "   and ges_lista     = '" + lista.Id + "'";
            long res2 = Persistencia.EjecutarSqlDML(sql, Persistencia.Controlador.CadenaConexion);
            Sistema.Controlador.logear("GENERICO",ENivelMensaje.INFORMACION,
                        "Descarto " + res2 + " gestiones asignadas de Lista: " + lista.ToString());
            
            sql = "update cuenta" +
                  "   set cta_listaasignada = null" +
                  " where cta_listaasignada = '" + lista.Id + "'" +
                  "   and not exists (select 1 " +
                  "                     from gestion " +
                  "                    where ges_cuenta = cta_id " +
                  "                      and ges_estado <> '" + _finalizada.Id + "'" +
                  "                      and ges_fechabaja = '" + Fechas.FechaNull + "'" +
                  "                      and ges_lista  = '" + lista.Id + "')";
            long res3 = Persistencia.EjecutarSqlDML(sql, Persistencia.Controlador.CadenaConexion);
            Sistema.Controlador.logear("GENERICO", ENivelMensaje.INFORMACION,
                        "Desasocio " + res3 + " Cuentas asignadas a la Lista: " + lista.ToString());

            return (" **DESCARTADA** (eliminó " + res + "/" + res2 + " gestiones y actualizó " + res3 + " cuentas)");
        }

        /// <summary>
        /// Este método borra todos los registros de la tabla temporal del proceso
        /// de generaciónde listas, de manera de que, por ejemplo, se encuentre limpia
        /// para iniciar unnuevo proceso.
        /// </summary>
        public static void LimpiarTemporal() {
            const string sql = "delete from tempgenlis";
            long res = Persistencia.EjecutarSqlDML(sql, Persistencia.Controlador.CadenaConexion);
            Sistema.Controlador.logear("GENERICO", ENivelMensaje.INFORMACION, "Eliminados " + res + "regs. temporales.");
        }

        /// <summary>
        /// Este método inserta una gestion en la tabla temporal del proceso
        /// de generación de listas. Esta tabla guarda las gestiones generadas
        /// durante un proceso, las cuales sond escargadas al finalizar el mismo
        /// a la tabla Gestión.
        /// </summary>
        public static void InsertarTemporal(string cuentaId, ListaGestion lg, long orden, string gestor, Parametro tipoGestion) {
            try {
                string sql = "insert into tempgenlis ";
                sql += "(tgl_orden,tgl_tipo,tgl_estado,tgl_cuenta,tgl_lista,tgl_fechaalta,tgl_gestor)";
                sql += " values (" + orden + ", '";
                sql += tipoGestion.Id + "', '" + (gestor.Equals("null") ? _creada.Id : _asignada.Id) + "', '";
                sql += cuentaId + "', '" + lg.Id + "', getdate(), " + gestor + ")";
                long res = Persistencia.EjecutarSqlDML(sql, Persistencia.Controlador.CadenaConexion);
                if (res < 1)
                    throw new AppErrorException("ERROR-INSERT-GESTION-TEMP", cuentaId);
            } catch (Exception e) {
                Sistema.Controlador.logear("ERROR-GENERACION-GESTION", ENivelMensaje.ERROR, e.ToString());
            }
        }

        /// <summary>
        /// Este método intenta limpiar un poco la memoria de la generación
        /// para evitar un system.outofmemory exception que puede darse en
        /// las generaciones largas.
        /// </summary>
        public static void LimpiarMemoria(string comentario) {
            GC.Collect();
            GC.WaitForPendingFinalizers();
            Sistema.Controlador.logear(
                "GENERICO",
                ENivelMensaje.INFORMACION,
                "Punto de Control (GC Collect): " + comentario
                + "|M:" + (GC.GetTotalMemory(false) / 1024));
        }

        /// <summary>
        /// Este método crea una nueva lista de gestión, asignando el nombre
        /// y la fecha de creación. Además graba la lista, por lo que se debe
        /// tener en cuenta si debe estar dentro de una transacción o no la 
        /// llamada al mismo.
        /// </summary>
        /// <returns>
        /// La lista de gestión recien creada y guardada, vacía.
        /// </returns>
        public static ListaGestion CrearYPrepararNuevaLista(TipoListaGestion tlg, string mensaje)
        {
            ListaGestion lg = new ListaGestion {
                TipoLista = tlg,
                Descripcion = "RESULTADO:" + mensaje,
                FchCreacion = Fechas.GetOkDate(DateTime.Now),
                Nombre = string.Format("{0}-{1:yyMMddHHmmss}", tlg.Nombre.Replace(" ", "").Substring(0, 10), DateTime.Now)
            };
            lg.save();
            return lg;
        }

        /// <summary>
        /// Este método asienta efectivamente las gestiones generadas pasándolas desde
        /// la tabla temporal a la tabla gestión (de ese modo recién ahora quedan como 
        /// gestiones efectivas). Ademas marca cuentas como "acaparadas" por la lista.
        /// SE AGREGO:establece el usuario gestor tanto a la cuenta como a la gestion.
        /// </summary>
        public static void AsentarGestiones(ListaGestion lista, Usuario usuario) {
            Sistema.Controlador.logear("GESPER-ASENTADA", ENivelMensaje.INFORMACION, null);
            string sql = "update cuenta";
            sql += "    set cta_listaasignada = '" + lista.Id + "'";
            sql += (usuario == null) ? string.Empty : " , cta_gestor = '" + usuario.Id + "'";
            sql += "  where cta_id in (select tgl_cuenta from tempgenlis)";
            long res = Persistencia.EjecutarSqlDML(sql, Persistencia.Controlador.CadenaConexion);
            Sistema.Controlador.logear(
                "GENERICO",
                ENivelMensaje.INFORMACION,
                "Se marcaron " + res + " cuentas " +
                ((usuario == null) ? "sin asignar gestor" : "y se asignaron al gestor " + usuario));

            sql = "insert into gestion";
            sql += "      (ges_id, ges_tipo, ges_estado, ges_fechaumod, ges_cuenta, ges_lista, ges_usuario,";
            sql += "      ges_resultadofecha, ges_fechainicio, ges_fechacierre, ges_fechabaja, ges_fechaanulacion)";
            sql += "select newid(), tgl_tipo, tgl_estado, tgl_fechaalta, tgl_cuenta, tgl_lista, tgl_gestor,";
            sql += "       convert(datetime, '1753-01-01 00:00:000', 121), convert(datetime, '1753-01-01 00:00:000', 121),";
            sql += "       convert(datetime, '1753-01-01 00:00:000', 121), convert(datetime, '1753-01-01 00:00:000', 121),";
            sql += "       convert(datetime, '1753-01-01 00:00:000', 121)";
            sql += "  from tempgenlis";
            res = Persistencia.EjecutarSqlDML(sql, Persistencia.Controlador.CadenaConexion);
            Sistema.Controlador.logear(
                "GENERICO",
                ENivelMensaje.INFORMACION,
                "Se asentaron " + res + " gestiones");
        }

        /// <summary>
        /// Este método verifica si el sistema está en modo generación y de ser
        /// así, ejecuta la actualizacion de saldos para todas las cuentas activas.
        /// </summary>
        public static void VerificarYActualizarSaldos() {
            // Primeramente ejecuta la actualizacion de saldos
            // (solamente si se esta en modo generacion de listas)
            if (Sistema.Controlador.getNivelEjecucion() == ENivelMensaje.BATCH) {
                Sistema.Controlador.logear("ACTUALIZA-SALDOS", ENivelMensaje.INFORMACION, null);
                Persistencia.EjecutarSqlDML("exec dbo.sgmpro_actualiza_saldos", Persistencia.Controlador.CadenaConexion);
                Sistema.Controlador.logear("ACTUALIZA-SALDOS-FIN", ENivelMensaje.INFORMACION, null);
            }
        }
    }
}
