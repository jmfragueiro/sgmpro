///////////////////////////////////////////////////////////
//  IControladorSeguridad.cs
//  Implementation of the Interface IControladorSeguridad
//  Generated by Enterprise Architect
//  Created on:      15-Abr-2009 07:11:10 p.m.
//  Original author: Fito
///////////////////////////////////////////////////////////
using scioSecureLibrary.dominio;
using scioSecureLibrary.enums;

namespace scioSecureLibrary.interfases {
    /// <summary>
    /// Esta interfase es la que representa el comportamiento deseable 
    /// de una clase que implemente y controle l servicio de seguridad
    /// de un Sistema completo, el cual debe encargarse, para ello, de 
    /// brindar fcs de gestion de usuario, roles, permisos y manejo de
    /// sesiones. Tambien se ingcluye la verificación de permisos.
    /// </summary>
    public interface IControladorSeguridad {
        /// <summary>
        /// Este método inicia una sesión de usuario dentro del sistema
        /// (para lo cual crea el objeto Sesion si debe) a partir de los 
        /// datos de conexión pasados. Lanza una SecurityErrorException si 
        /// no puede iniciar la sesión o una SesionErrorException si ya 
        /// hay una sesion activa.
        /// </summary>
        /// <param name="user">
        /// El nombre del usuario que intenta el inicio de sesión.
        /// </param>
        /// <param name="pass">
        /// La contraseña del usuario que intenta el inicio de sesión.
        /// </param>
        void iniciarSesion(string user, string pass);

        /// <summary>
        /// Este método establece si existe una sesión activa actualmente
        /// dentro del sistema.
        /// </summary>
        /// <returns>
        /// Retorna 'true' si existe una sesion activa, o si no 'false'
        /// </returns>
        bool haySesionActiva();

        /// <summary>
        /// Este método devuelve el nombre del usuario de la sesión actual
        /// del sistema. 
        /// </summary>
        /// <returns>
        /// Retorna el nombre del usuario de la sesión actual o 'NINGUNO'.
        /// </returns>
        Sesion getSesion();

        /// <summary>
        /// Este método devuelve el usuario de la sesión actual del sistema. 
        /// </summary>
        /// <returns>
        /// Retorna el usuario de la sesión actual ó null si no hay usuario.
        /// </returns>
        Usuario getUsuario();

        /// <summary>
        /// Este método cierra la sesión de usuario actual del sistema 
        /// Si no hay una sesión creada o activa, solo logea un mensaje
        /// ó, si no puede cerrar la sesión, lanza SesionErrorException.
        /// </summary>
        void terminarSesion();

        /// <summary>
        /// Este método verifica si el usuario actualmente conectado posee un 
        /// permiso determinado. Lanza una SecurityErrorException si no consigue 
        /// determinar un recurso válido a partir de la cadena pasada como argumento.
        /// </summary>
        /// <param name="recurso">
        /// La cadena con la que se establece el recurso a verificar.
        /// </param>
        /// <param name="tipo">
        /// El tipo de permiso a verificar para el recurso determinado.
        /// </param>
        /// <returns>
        /// Retorna 'true' si el usuario posee el permiso o si no 'false'.
        /// </returns>
        bool usuarioActualPoseePermiso(string recurso, ETipoPermiso tipo);

        /// <summary>
        /// Este método verifica si un usuario cualquiera posee un permiso 
        /// determinado. Lanza una SecurityErrorException si no consigue 
        /// determinar un recurso válido a partir de la cadena pasada como 
        /// argumento.
        /// </summary>
        /// <param name="usuario">
        /// El usuario del que se desea verificar el permiso.
        /// </param>
        /// <param name="recurso">
        /// La cadena con la que se establece el recurso a verificar.
        /// </param>
        /// <param name="tipo">
        /// El tipo de permiso a verificar para el recurso determinado.
        /// </param>
        /// <returns>
        /// Retorna 'true' si el usuario posee el permiso o si no 'false'.
        /// </returns>
        bool usuarioPoseePermiso(Usuario usuario, string recurso, ETipoPermiso tipo);
    }
}