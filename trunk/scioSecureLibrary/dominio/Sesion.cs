///////////////////////////////////////////////////////////
//  Sesion.cs
//  Implementation of the Class Sesion
//  Generated by Enterprise Architect
//  Created on:      13-abr-2009 17:23:42
//  Original author: Fito
///////////////////////////////////////////////////////////
using System;
using scioPersistentLibrary.acceso;
using scioSecureLibrary.dominio.repos;
using scioSecureLibrary.excepciones;
using scioToolLibrary;

namespace scioSecureLibrary.dominio {
    /// <summary>
    /// Esta clase representa el concepto de una sesión de usuario
    /// creada contra la base de datos del sistema. Permite hacer
    /// un seguimiento de las operaciones que realiza un usuario y
    /// determinar/verificar los permisos y accesos que éste posee.
    /// Esta clase es persistente.
    /// </summary>
    public class Sesion : EntidadIdentificada<Sesion> {
        private DateTime _fechaCambio = Fechas.FechaNull;
        private int _activo;

        /// <summary>
        /// El usuario asociado a la sesión (apunta a un Usuario). No Nulo. FK.
        /// </summary>
        public virtual Usuario Usuario { get; protected set; }
        /// <summary>
        /// La cantidad de gestiones realizadas durante la sesión. No Nulo.
        /// </summary>
        public virtual int Gestiones { get; protected set; }
        /// <summary>
        /// El tiempo acumulado total de actividad durante la sesión en segundos. No Nulo.
        /// </summary>
        public virtual long TiempoActivo { get; protected set; }
        /// <summary>
        /// El tiempo acumulado total de inactividad durante la sesión en segundos.
        /// </summary>
        public virtual long TiempoInactivo { get; protected set; }
        /// <summary>
        /// El momento -datetime- de logon de la sesión (cuando se ejecuta logon()).
        /// </summary>
        public virtual DateTime FechaLogon { get { return _fechalogon; } set { _fechalogon = Fechas.GetOkDate(value); } }
        private DateTime _fechalogon = Fechas.FechaNull;
        /// <summary>
        /// El momento -datetime- de logoff de la sesión (cuando se ejecuta logoff()).
        /// </summary>
        public virtual DateTime FechaLogoff { get { return _fechalogoff; } set { _fechalogoff = Fechas.GetOkDate(value); } }
        private DateTime _fechalogoff = Fechas.FechaNull;

        /// <summary>
        /// Este método es el que inicia una sesión del usuario contra la 
        /// base de datos. Para ello verifica la existencia del usuario y
        /// verifica que el password sea el enviado utilizando NHibernate. 
        /// el password será oportunamente tratado (encriptada) al acceder
        /// a la base de datos. Si tiene problemas de conexión a la base
        /// lanza una DBErrorException, si no puede iniciar sesión por error
        /// de usuario,contraseña o activación lanza una SecurityErrorException.
        /// </summary>
        /// <param name="user">
        /// El nombre del usuario para el que se conectará la sesión.
        /// </param>
        /// <param name="pass">
        /// El password del usuario que intenta la conexión (como texto 
        /// limpio que será posterioriemnte encriptado para comparar).
        /// </param>
        public virtual void logon(string user, string pass) {
            if (user == null || pass == null)
                throw new SesionErrorException("SESION-DATA-ERROR");

            Usuario = Usuarios.GetByNombrePass(user, pass);

            if (Usuario == null)
                throw new SesionErrorException("SESION-DATA-ERROR");

            if (!Usuario.Activado)
                throw new SesionErrorException("USER-STATE-ERROR", Usuario.ToString());

            try {                
                FechaLogon = DateTime.Now;
                iniciarInactividad();
                save();
            } catch (Exception e) {
                FechaLogon = Fechas.FechaNull;
                throw new SesionErrorException("SESION-INIT-ERROR", e.ToString());
            }
        }

        /// <summary>
        /// Este método cambia al estado de actividad de la sesion.
        /// </summary>
        public virtual void iniciarActividad() {
            if (_fechaCambio == Fechas.FechaNull)
                _fechaCambio = DateTime.Now;

            if (_activo <= 0) {
                _activo = 0;
                TiempoInactivo += (DateTime.Now - _fechaCambio).Seconds;
                _fechaCambio = DateTime.Now;
            }

            _activo++;            
        }

        /// <summary>
        /// Este método cambia al estado de inactividad de la sesion.
        /// </summary>
        public virtual void iniciarInactividad() {
            if (_fechaCambio == Fechas.FechaNull)
                _fechaCambio = DateTime.Now;

            _activo--;

            if (_activo <= 0) {
                _activo = 0;
                TiempoActivo += (DateTime.Now - _fechaCambio).Seconds;
                _fechaCambio = DateTime.Now; 
            }                       
        }

        /// <summary>
        /// Este método cierra una nueva gestión realizada y actualiza los
        /// contadores para la sesion actual.       
        /// </summary>
        public virtual void cerrarGestion() {
            Gestiones++;
            save();
        }

        /// <summary>
        /// Este método cierra una sesión de usuario activa. Si tiene 
        /// problemas de conexión a la base lanza una DBErrorException, 
        /// si no encuentra la sesión lanza una SesionErrorException.
        /// </summary>
        public virtual void logoff() {
            try {
                FechaLogoff = DateTime.Now;

                if (_activo > 0)
                    TiempoActivo += (DateTime.Now - _fechaCambio).Seconds;
                else
                    TiempoInactivo += (DateTime.Now - _fechaCambio).Seconds;

                _activo = 0;
                _fechaCambio = DateTime.Now;
                save();
            } catch (Exception e) {
                FechaLogoff = Fechas.FechaNull;
                throw new SesionErrorException("SESION-ERROR", e.ToString());
            }
        }

        /// <summary>
        /// Este método genera el string por defecto a mostrar en todos lados.
        /// </summary>
        public override string ToString() {
            return string.Format("{0} (LogOn:{1})", Usuario, FechaLogon);
        }
    }
}