///////////////////////////////////////////////////////////
//  Usuarios.cs
//  Implementation of the Class Usuarios
//  Generated by Enterprise Architect
//  Created on:      13-abr-2009 17:23:42
//  Original author: Fito
///////////////////////////////////////////////////////////
using System.Collections.Generic;
using scioPersistentLibrary.acceso;
using scioPersistentLibrary.criterios;
using scioToolLibrary;

namespace scioSecureLibrary.dominio.repos {
    /// <summary>
    /// Esta clase representa al Repositorio de persistencia
    /// de Nhibernate para la entidad Usuario del sistema.
    /// </summary>
    public class Usuarios : RepositorioPersistente<Usuario> {
        /// <summary>
        /// Este método devuelve un Usuario según su nombre y clave.
        /// </summary>
        /// <param name="nombre">
        /// El nombre del usuario.
        /// </param>
        /// <param name="pass">
        /// La clave del usuario.
        /// </param>
        /// <returns>
        /// El usuario que coincide con el nombre y clave.
        /// </returns>
        public static Usuario GetByNombrePass(string nombre, string pass) {
            return GetUniqueByCriteria(
                true,
                new[] {Criterios.Igual("Nombre", nombre), Criterios.Igual("Password", MiniCrypto.Encriptar(pass))});
        }

        /// <summary>
        /// Este método devuelve a todos los usuarios vivos que poseen
        /// un rol determinado. Devuelve la lista ordenada por nombre
        /// de usuario.
        /// </summary>
        /// <param name="rol">
        /// El rol del que se busca la lista de usuarios.
        /// </param>
        /// <returns>
        /// La lista de usuarios que poseen el rol (ordenados por nombre).
        /// </returns>
        public static IList<Usuario> GetAliveByRol(Rol rol) {
            IList<Usuario> lista = new List<Usuario>();

            foreach (Usuario user in GetAliveAll())
                if (user.Roles.Contains(rol))
                    lista.Add(user);

            return OrdenarPorNombre(lista);
        }

        /// <summary>
        /// Este método devuelve a todos los usuarios vivos que poseen
        /// un perfil determinado. Devuelve la lista ordenada por nombre
        /// de usuario.
        /// </summary>
        /// <param name="perfil">
        /// El perfil del que se busca la lista de usuarios.
        /// </param>
        /// <returns>
        /// La lista de usuarios que poseen el perfil (ordenados por nombre).
        /// </returns>
        public static IList<Usuario> GetAliveByPerfil(Perfil perfil) {
            IList<Usuario> lista = new List<Usuario>();

            foreach (Usuario user in GetAliveAll())
                if (user.Perfiles.Contains(perfil))
                    lista.Add(user);

            return OrdenarPorNombre(lista);
        }

        /// <summary>
        /// Este método ordena una lista de usuarios según su nombre 
        /// pero en forma ascendente (primero van los mas viejos).
        /// </summary>
        /// <param name="origen">
        /// El conjunto de deudas a ordenar.
        /// </param>
        /// <returns>
        /// El conjunto de deudas ordenado por fecha (ascendente).
        /// </returns>
        public static IList<Usuario> OrdenarPorNombre(IList<Usuario> origen) {
            Usuario temp = new Usuario();
            IList<Usuario> conjunto = new List<Usuario>();

            while (conjunto.Count < origen.Count) {
                string piso = "zzzzzzzz";
                foreach (Usuario obj in origen)
                    if (!conjunto.Contains(obj))
                        if (obj.Nombre.CompareTo(piso) < 0) {
                            piso = obj.Nombre;
                            temp = obj;
                        }
                conjunto.Add(temp);
            }

            return conjunto;
        }
    }
}