///////////////////////////////////////////////////////////
//  Rol.cs
//  Implementation of the Class Rol
//  Generated by Enterprise Architect
//  Created on:      08-abr-2009 11:32:54
//  Original author: Fito
///////////////////////////////////////////////////////////
using System;
using System.Collections.Generic;
using scioPersistentLibrary.acceso;
using scioSecureLibrary.excepciones;

namespace scioSecureLibrary.dominio {
    /// <summary>
    /// Esta clase representa a un rol del sistema, los cuales son grupos
    /// lógicos que asocian a usuarios con permisos de acceso y uso a los
    /// recursos del sistema. De esta forma, los permisos se asocian a un 
    /// rol y lo susuarios que se agregan al rol poseen todos los permisos
    /// asociados a éste. Esta clase es persistente.
    /// </summary>
    public class Rol : EntidadIdentificada<Rol> {
        /// <summary>
        /// Nombre de rol (utilizado en la aplicación). Unico. No Nulo.
        /// </summary>
        public virtual string Nombre { get; set; }
        /// <summary>
        /// Una descripcion textual para el rol.
        /// </summary>
        public virtual string Descripcion { get; set; }
        /// <summary>
        /// El estado de activación del usuario (puede ó no iniciar sesión). No Nulo.
        /// </summary>
        public virtual bool Activado { get; set; }
        /// <summary>
        /// Conjunto de Permisos agregados al rol. No Nulo. FK (List).
        /// </summary>
        public virtual IList<Permiso> Permisos { get { return _permisos; } set { _permisos = value; } }
        private IList<Permiso> _permisos;
        /// <summary>
        /// Conjunto de Permisos agregados al rol. No Nulo. FK (List).
        /// </summary>
        public virtual IList<Rol> Roles { get { return _roles; } set { _roles = value; } }
        private IList<Rol> _roles;

        /// <summary>
        /// Constructor que instancia los conjuntos de usuarios y permisos.
        /// </summary>
        public Rol() {
            _permisos = new List<Permiso>();
            _roles = new List<Rol>();
        }

        /// <summary>
        /// Este método se utiliza para agregar un elemento al rol, 
        /// en este caso un Usuario. Como son los usuarios los que
        /// contienen la lista de roles que poseen, aquí el método 
        /// se efectiviza pasando el propio rol al método agregarRol 
        /// del propio usuario (de la clase Usuario). No captura las
        /// Excepciones.
        /// </summary>
        /// <param name="usuario">
        /// El elemento (usuario) a agregarse al rol.
        /// </param>
        public virtual void agregarUsuario(Usuario usuario) {
            usuario.agregarRol(this);
        }

        /// <summary>
        /// Este método se utiliza para quitar un usuario al rol. 
        /// Como son los usuarios los que contienen la lista de 
        /// roles que poseen, aquí el método se efectiviza pasando 
        /// el propio rol al método quitarRol() del propio usuario.
        /// No captura la excepciones.
        /// </summary>
        /// <param name="usuario">
        /// El elemento (usuario) a quitarse del rol.
        /// </param>
        public virtual void quitarUsuario(Usuario usuario) {
            usuario.quitarRol(this);
        }

        /// <summary>
        /// Este método se utiliza para agregar un elemento al rol, 
        /// en este caso un Rol. De esta forma todos los permisos
        /// asignados al rol agregado pasan también a formar parte 
        /// del rol al que se agrega. Lanza una AppErrorException 
        /// si tiene problemas.
        /// </summary>
        /// <param name="rol">
        /// El elemento (rol) a agregarse al rol.
        /// </param>
        public virtual void agregarRol(Rol rol) {
            if (rol == null || Equals(rol) || _roles.Contains(rol))
                throw new SecurityErrorException("ERROR-NOADD-ELEMENTO", (rol == null) ? "ROL" : rol.ToString());

            try {
                _roles.Add(rol);
                save();
            } catch (Exception e) {
                _roles.Remove(rol);
                throw new SecurityErrorException("ERROR-ROL", e.ToString());
            }
        }

        /// <summary>
        /// Este método se utiliza para desagregar un rol al rol.
        /// Puede lanzar una AppErrorException si tiene problemas.
        /// </summary>
        /// <param name="rol">
        /// El elemento (rol) a quitarse del rol.
        /// </param>
        public virtual void quitarRol(Rol rol) {
            if (rol == null || Equals(rol) || !Roles.Contains(rol))
                throw new SecurityErrorException("ERROR-NODEL-ELEMENTO", (rol == null) ? "ROL" : rol.ToString());

            try {
                _roles.Remove(rol);
                save();
            } catch (Exception e) {
                _roles.Add(rol);
                throw new SecurityErrorException("ERROR-ROL", e.ToString());
            }
        }

        /// <summary>
        /// Este método se utiliza para agregar un permiso al rol.
        /// Puede lanzar una AppErrorException si tiene problemas.
        /// </summary>
        /// <param name="permiso">
        /// El permiso a agregarse al rol.
        /// </param>
        public virtual void agregarPermiso(Permiso permiso) {
            if (permiso == null || _permisos.Contains(permiso))
                throw new SecurityErrorException(
                    "ERROR-NOADD-ELEMENTO", (permiso == null) ? "PERMISO" : permiso.ToString());

            try {
                _permisos.Add(permiso);
                save();
            } catch (Exception e) {
                _permisos.Remove(permiso);
                throw new SecurityErrorException("ERROR-ROL", e.ToString());
            }
        }

        /// <summary>
        /// Este método se utiliza para quitar un permiso al rol.
        /// Puede lanzar una AppErrorException si tiene problemas.
        /// </summary>
        /// <param name="permiso">
        /// El permiso a quitarse del rol.
        /// </param>
        public virtual void quitarPermiso(Permiso permiso) {
            if (permiso != null || !_permisos.Contains(permiso))
                throw new SecurityErrorException(
                    "ERROR-NODEL-ELEMENTO",
                    (permiso == null) ? "PERMISO" : permiso.ToString());

            try {
                _permisos.Remove(permiso);
                save();
            } catch (Exception e) {
                _permisos.Add(permiso);
                throw new SecurityErrorException("ERROR-ROL", e.ToString());
            }
        }

        /// <summary>
        /// Este método verifica si el Rol contiene un determinado
        /// permiso o si alguno de los roles que se ageragron al rol
        /// lo contiene (asociado a un recurso y de un tipo definido).
        /// </summary>
        /// <param name="permiso">
        /// El permiso a verificarse dentro del rol (o sus roles agregados).
        /// </param>
        /// <returns>
        /// Retorna 'true' si el rol contiene al permiso ó si no retorna 'false'.
        /// </returns>
        public virtual bool contienePermiso(Permiso permiso) {
            try {
                foreach (Permiso p in _permisos)
                    if (p.Equals(permiso))
                        return true;
                foreach (Rol r in _roles)
                    if (r.contienePermiso(permiso))
                        return true;
                return false;
            } catch (Exception e) {
                throw new SecurityErrorException("ERROR-ROL", e.ToString());
            }
        }

        /// <summary>
        /// Este método genera el string por defecto a mostrar en todos lados.
        /// </summary>
        public override string ToString() {
            return Nombre;
        }
    }
}