///////////////////////////////////////////////////////////
//  Usuario.cs
//  Implementation of the Class Usuario
//  Generated by Enterprise Architect
//  Created on:      08-abr-2009 11:32:55
//  Original author: Fito
///////////////////////////////////////////////////////////
using System;
using System.Collections.Generic;
using scioParamLibrary.dominio;
using scioParamLibrary.dominio.repos;
using scioPersistentLibrary.acceso;
using scioSecureLibrary.dominio.repos;
using scioSecureLibrary.enums;
using scioSecureLibrary.excepciones;
using scioToolLibrary;

namespace scioSecureLibrary.dominio {
    /// <summary>
    /// Esta clase representa a un usuario del sistema y contiene, 
    /// además de los datos propios del usuario, una interface para
    /// administrar los roles y los perfiles que se asignan al mismo.
    /// El password de un usuarios e guarda encriptado dentro de la 
    /// base para maximizar al seguridad. Esta clase es persistente.
    /// </summary>
    public class Usuario : EntidadIdentificada<Usuario> {
        /// <summary>
        /// Nombre de usuario (utilizado en la aplicación). Unico. No Nulo.
        /// </summary>
        public virtual string Nombre { get; set; }
        /// <summary>
        /// Nombre real del empleado asociado al usuario. No Nulo.
        /// </summary>
        public virtual string Empleado { get; set; }
        /// <summary>
        /// Contraseña (password) para inicio de sesión. No Nulo.
        /// </summary>
        public virtual string Password {
            get { return _password; }
            set { _password = value; }
        }
        private string _password;
        /// <summary>
        /// El número de legajo del empleado asociado al usuario. Unico. No Nulo.
        /// </summary>
        public virtual long Legajo { get; set; }
        /// <summary>
        /// El estado de activación del usuario (puede ó no iniciar sesión). No Nulo.
        /// </summary>
        public virtual bool Activado { get; set; }
        /// <summary>
        /// La fecha de alta del contacto. No Nulo.
        /// </summary>                
        public virtual DateTime FechaUMod {
            get { return _fechaumod; }
            set { _fechaumod = Fechas.GetOkDate(value); }
        }
        private DateTime _fechaumod = DateTime.Now;
        /// <summary>
        /// Conjunto de roles asociados al usuario. No Nulo. FK (List).
        /// </summary>
        public virtual IList<Rol> Roles {
            get { return _roles; }
            set { _roles = value; }
        }
        private IList<Rol> _roles;
        /// <summary>
        /// Conjunto de perfiles asociados al usuario. No Nulo. FK (List).
        /// </summary>
        public virtual IList<Perfil> Perfiles {
            get { return _perfiles; }
            set { _perfiles = value; }
        }
        private IList<Perfil> _perfiles;

        /// <summary>
        /// Constructor que instancia los conjuntos de roles y perifles.
        /// </summary>
        public Usuario() {
            _roles = new List<Rol>();
            _perfiles = new List<Perfil>();
        }

        /// <summary>
        /// Este método establece la contraseña del usuario de forma
        /// encriptada, de manera de asegurar la inviolabilidad de la
        /// misma. Debe utilizarse para setear la contraseña porque 
        /// el set de la propiedad Password no hace nada (es decir que
        /// guarda la contraseña en forma 'limpia'). Utiliza la clase 
        /// helper MiniCrypto.
        /// </summary>
        /// <param name="pass">
        /// La contraseña en formato de cadena legible.
        /// </param>
        public virtual void setCryptPassword(string pass) {
            _password = MiniCrypto.Encriptar(pass);
        }

        /// <summary>
        /// Este método se utiliza para agregar un rol al usuario.
        /// Puede lanzar una AppErrorException si tiene problemas.
        /// </summary>
        /// <param name="rol">
        /// El rol a agregarse al usuario.
        /// </param>
        public virtual void agregarRol(Rol rol) {
            if (rol == null || _roles.Contains(rol))
                throw new SecurityErrorException(
                    "ERROR-NOADD-ELEMENTO",
                    (rol == null) ? "ROL" : rol.ToString());

            try {
                _roles.Add(rol);
                save();
            } catch (Exception e) {
                _roles.Remove(rol);
                throw new SecurityErrorException("ERROR-USUARIO", e.ToString());
            }
        }

        /// <summary>
        /// Este método se utiliza para quitar un rol al usuario.
        /// Puede lanzar una AppErrorException si tiene problemas.
        /// </summary>
        /// <param name="rol">
        /// El rol a quitarse al usuario.
        /// </param>
        public virtual void quitarRol(Rol rol) {
            if (rol == null || !_roles.Contains(rol))
                throw new SecurityErrorException(
                    "ERROR-NODEL-ELEMENTO",
                    (rol == null) ? "ROL" : rol.ToString());

            try {
                _roles.Remove(rol);
                save();
            } catch (Exception e) {
                _roles.Add(rol);
                throw new SecurityErrorException("ERROR-USUARIO", e.ToString());
            }
        }

        /// <summary>
        /// Este método se utiliza para agregar un perfil al usuario.
        /// Puede lanzar una AppErrorException si tiene problemas.
        /// </summary>
        /// <param name="perfil">
        /// El perfil a agergarse al usuario.
        /// </param>
        public virtual void agregarPerfil(Perfil perfil) {
            if (perfil == null || _perfiles.Contains(perfil))
                throw new SecurityErrorException(
                    "ERROR-NOADD-ELEMENTO",
                    (perfil == null) ? "PERFIL" : perfil.ToString());

            try {
                _perfiles.Add(perfil);
                save();
            } catch (Exception e) {
                _perfiles.Remove(perfil);
                throw new SecurityErrorException("ERROR-USUARIO", e.ToString());
            }
        }

        /// <summary>
        /// Este método se utiliza para quitar un perfil al usuario.
        /// Puede lanzar una AppErrorException si tiene problemas.
        /// </summary>
        /// <param name="perfil">
        /// El perfil a quitarse al usuario.
        /// </param>
        public virtual void quitarPerfil(Perfil perfil) {
            if (perfil == null || !_perfiles.Contains(perfil))
                throw new SecurityErrorException(
                    "ERROR-NODEL-ELEMENTO",
                    (perfil == null) ? "PERFIL" : perfil.ToString());

            try {
                _perfiles.Remove(perfil);
                save();
            } catch (Exception e) {
                _perfiles.Add(perfil);
                throw new SecurityErrorException("ERROR-USUARIO", e.ToString());
            }
        }

        /// <summary>
        /// Este método verifica si el usuario posee un permiso determinado,
        /// en donde el permiso se establece a partir de un valorString (del 
        /// Parámetro que representa) que sea igual a la cadena que se pasa
        /// como argumento y del ETipoPermiso del permiso deseado. Lanza una 
        /// SecurityErrorException si no consigue determinar un recurso válido
        /// a partir de la cadena pasada como argumento.
        /// </summary>
        /// <param name="recurso">
        /// La cadena con la que se establece el recurso a verificar.
        /// </param>
        /// <param name="tipo">
        /// El tipo de permiso a verificar para el recurso determinado.
        /// </param>
        /// <returns>
        /// Retorna 'true' si el usuario posee el permiso o si no 'false'.
        /// </returns>
        public virtual bool poseePermiso(string recurso, ETipoPermiso tipo) {
            Parametro par = Parametros.GetByClave(recurso);

            if (par == null)
                throw new SecurityErrorException("RECURSO-NOEXISTS", recurso);

            return poseePermiso(par, tipo);
        }

        /// <summary>
        /// Este método verifica si el usuario posee un permiso determinado,
        /// en donde el permiso se establece a partir del recurso (Parametro) 
        /// pasado como argumento y del tipo de permiso deseado.
        /// </summary>
        /// <param name="recurso">
        /// El recurso (una instancia de Parametro) a verificar.
        /// </param>
        /// <param name="tipo">
        /// El tipo de permiso a verificar para el recurso determinado.
        /// </param>
        /// <returns>
        /// Retorna 'true' si el usuario posee el permiso o si no 'false'.
        /// </returns>
        public virtual bool poseePermiso(Parametro recurso, ETipoPermiso tipo) {
            Permiso per = Permisos.GetByRecursoTipo(recurso, tipo);

            if (per == null)
                return false;

            return poseePermiso(per);
        }

        /// <summary>
        /// Este método verifica si el usuario posee un permiso determinado.
        /// </summary>
        /// <param name="permiso">
        /// El permiso a verificar.
        /// </param>
        /// <returns>
        /// Retorna 'true' si el usuario posee el permiso o si no 'false'.
        /// </returns>
        public virtual bool poseePermiso(Permiso permiso) {
            try {
                foreach (Rol r in _roles)
                    if (r.contienePermiso(permiso))
                        return true;

                return false;
            } catch (Exception e) {
                throw new SecurityErrorException("ERROR-PERMISO-USUARIO", e.ToString());
            }
        }

        /// <summary>
        /// Este método genera el string por defecto a mostrar en todos lados.
        /// </summary>
        public override string ToString() {
            return Nombre;
        }
    }
}