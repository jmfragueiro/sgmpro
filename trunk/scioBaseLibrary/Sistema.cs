///////////////////////////////////////////////////////////
//  Sistema.cs
//  Implementation of the Class Sistema
//  Generated by Enterprise Architect
//  Created on:      13-abr-2009 17:44:30
//  Original author: Fito
///////////////////////////////////////////////////////////
using System;
using System.Collections.Generic;
using System.Drawing;
using System.Windows.Forms;
using scioBaseLibrary.excepciones;
using scioBaseLibrary.interfases;
using scioBaseLibrary.Properties;
using scioBaseLibrary.vista;
using scioLoggingLibrary;
using scioLoggingLibrary.interfases;
using scioParamLibrary.dominio;
using scioParamLibrary.dominio.repos;
using scioPersistentLibrary;
using scioPersistentLibrary.enums;
using scioSecureLibrary;
using scioSecureLibrary.dominio;
using scioSecureLibrary.enums;
using scioSecureLibrary.interfases;
using scioToolLibrary;
using scioToolLibrary.enums;

namespace scioBaseLibrary {
    /// <summary>
    /// En el framework ad-hoc de SCIO, esta clase Sistema es la que representa al 
    /// sistema y a todos los servicios centrales que una aplicación deberá proveer. 
    /// Implementa la interfaz IControladorSistema y utiliza el patrón Singleton 
    /// para controlar que exista una sola instancia del mismo corriendo. Esta clase 
    /// posee métodos necesarios para iniciar y proveer servicios de: verificación de 
    /// integridad, logging, y crea y expone la vista principal del sistema (si hay). 
    /// </summary>
    public abstract class Sistema : IControladorSistema {
        // Atributos internos de la clase (y subclases)
        protected ENivelMensaje _nivelEjecucion;

        // Vistas asociadas al sistema base de SCIO
        /// <summary>
        /// Cuadro de inicio de la aplicación
        /// </summary>
        public IVistaCuadroInicio CuadroInicio {
            get {
                if (_wininicio == null)
                    throw new VistaErrorException("VISTA-NOREADY");
                return _wininicio;
            }
        }
        protected IVistaCuadroInicio _wininicio;
        /// <summary>
        /// Ventana principal de la aplicación
        /// </summary>
        public IVistaVentanaPpal Winppal {
            get {
                if (_vista == null)
                    throw new VistaErrorException("VISTA-NOREADY");
                return _vista;
            }
        }
        protected IVistaVentanaPpal _vista;
        /// <summary>
        /// Controlador del sistema implementadea via el singleton.
        /// </summary>
        public static IControladorSistema Controlador {
            get { return _sistema; }
        }
        protected static IControladorSistema _sistema;
        /// <summary>
        /// Propiedad de la Interface.
        /// </summary>
        public IControladorLogging LogService {
            get { return _log; }
        }
        protected IControladorLogging _log;
        /// <summary>
        /// Propiedad de la Interface.
        /// </summary>
        public IControladorSeguridad SecurityService {
            get { return _seguridad; }
        }
        protected IControladorSeguridad _seguridad;

        // Propiedades publicas del sistema (solo lectura)
        /// <summary>
        /// Propiedad de la Interface.
        /// </summary>
        public string Nombre {
            get { return _nombre; }
        }
        protected string _nombre;
        /// <summary>
        /// Propiedad de la Interface.
        /// </summary>
        public string Titulo {
            get { return _titulo; }
        }
        protected string _titulo;
        /// <summary>
        /// Propiedad de la Interface.
        /// </summary>
        public string Version {
            get { return _version; }
        }
        protected string _version;
        /// <summary>
        /// Propiedad de la Interface.
        /// </summary>
        public string CadenaConexion {
            get { return _conexion; }
        }
        protected string _conexion;
        /// <summary>
        /// Propiedad de la Interface.
        /// </summary>
        public string Database {
            get { return _database; }
        }
        protected string _database;
        /// <summary>
        /// Propiedad de la Interface.
        /// </summary>
        public string UltimoUsuario {
            get { return _lastuser; }
        }
        protected string _lastuser;
        /// <summary>
        /// Propiedad de la Interface.
        /// </summary>
        public string AppPath { get; set; }

        /// <summary>
        /// Implementa el Método de la Interfaz.
        /// Inicia el sistema de acuerdo al tipo de llamada entrante, en donde
        /// en principio puede ejecutarse el sistema en modo 'BATCH': sin UI y
        /// finalizando al terminar la ejecucion de los procesos batch; ó, en 
        /// cualquier otro modo, con UI y dejando 'fluir' la aplicación.
        /// </summary>
        public virtual void iniciarSistema(
            ENivelMensaje nivelEjecucion,
            IVistaCuadroInicio wininicio,
            IVistaVentanaPpal winppal,
            IControladorLogging log,
            IControladorSeguridad security) {
            if (nivelEjecucion == ENivelMensaje.BATCH)
                try {
                    iniciarSistemaSinUI(nivelEjecucion, log, security);
                    ejecutarProcesosBatch();
                } catch (Exception e) {
                    logear("APP-NOINIT-ERROR", ENivelMensaje.FATAL, e.ToString());
                } finally {
                    cerrarSistema();
                }
            else
                try {
                    iniciarSistemaConUI(nivelEjecucion, null, null, null, null);
                } catch (Exception e) {
                    mostrar("APP-NOINIT-ERROR", ENivelMensaje.FATAL, e.ToString(), true);
                    cerrarSistema();
                }
        }

        /// <summary>
        /// Implementa el Método de la Interfaz.
        /// </summary>
        protected virtual void iniciarSistemaConUI(
            ENivelMensaje nivelEjecucion,
            IVistaCuadroInicio wininicio,
            IVistaVentanaPpal winppal,
            IControladorLogging log,
            IControladorSeguridad security) {
            try {
                // Inicializa los componentes internos necesarios
                _nivelEjecucion = nivelEjecucion;
                AppPath = Application.StartupPath;

                // Inicializa los parametros del mismo.
                iniciarParametros();

                // Establece componentes usados en la ejecución del sistema
                _log = log ?? new LogSistema(nivelEjecucion);
                _seguridad = security ?? new SecureService();

                // Inicia las interfaces gráficas
                _wininicio = wininicio ?? new WinInicio(this);
                _vista = winppal ?? new WinPrincipal(this);

                // Arranca la ventana de inicio que se encarga de 
                // realizar el inicio efectivo de este sistema. 
                _wininicio.abrir();
                _wininicio.iniciarSistema();

                // Inicia la vista (ventana) principal del sistema.
                iniciarUi();
            } catch (Exception e) {
                MessageBox.Show(string.Format("ERROR FATAL DEL SISTEMA!\r\n{0}\r\n{1}",
                        Mensaje.TextoMensaje("APP-NOINIT-ERROR"),
                        e),
                    Mensaje.TextoMensaje("TITULO-SHOW"),
                    MessageBoxButtons.OK,
                    MessageBoxIcon.Stop);
                cerrarSistema();
            }
        }

        /// <summary>
        /// Inicia el sistema sin interfaz gráfica.
        /// </summary>
        protected virtual void iniciarSistemaSinUI(
            ENivelMensaje nivelEjecucion,
            IControladorLogging log,
            IControladorSeguridad security) {
                // Inicializa los componentes internos necesarios
                _nivelEjecucion = nivelEjecucion;
                AppPath = Application.StartupPath;

                // Inicializa los parametros del mismo.
                iniciarParametros();

                // Establece componentes usados en la ejecución del sistema
                _log = log ?? new LogSistema(nivelEjecucion);
                _seguridad = security ?? new SecureService();

                // Luego inicializa los servicios del sistema
                iniciarLog();
                iniciarPersistencia();
        }

        /// <summary>
        /// Implementa el Método de la Interfaz. 
        /// Aqui se deja todos para la subclase.
        /// </summary>
        public virtual void ejecutarProcesosBatch() { }

        /// <summary>
        /// Implementa el Método de la Interfaz.
        /// </summary>
        public virtual void iniciarParametros() {
            _nombre = "SCIO SISTEMA BASE";
            _titulo = "SCIO SISTEMA BASE";
            _version = "0.0";
            _conexion = "";
            _lastuser = "";
            _database = "SGMPRO";
        }

        /// <summary>
        /// Implementa el Método de la Interfaz.
        /// </summary>
        public virtual void iniciarLog() {
            _log.iniciar(".", Mensaje.TextoMensaje("TITULO-SHOW").Replace("***", string.Empty));
        }

        /// <summary>
        /// Implementa el Método de la Interfaz. 
        /// Aqui se deja todos para la subclase.
        /// </summary>
        public virtual void iniciarPersistencia() {}

        /// <summary>
        /// Implementa el Método de la Interfaz.
        /// </summary>
        public virtual void iniciarUi() {
            logear("VISTA-INIT", ENivelMensaje.DEBUG, "WinPrincipal");
            Winppal.setTitulo(String.Format("{0} - Ver {1}",Titulo,Version));
            Winppal.setMenu();
            Winppal.setBarraEstado();
            finalizarInicio();
            Application.Run((Form)Winppal);
        }

        /// <summary>
        /// Implementa el Método de la Interfaz.
        /// </summary>
        public virtual void finalizarInicio() {}

        /// <summary>
        /// Implementa el Método de la Interfaz.
        /// </summary>
        public virtual void generarMenu(IVistaVentanaPpal vistaVentana, MenuStrip menu, ToolStrip toolbar) {
            ToolStripMenuItem item, subitem, tritem;
            ToolStripButton subuton, tributon;
            bool agregarSeparador = false;

            // Primero borra todos los que tiene actualmente el menu
            menu.Items.Clear();
            toolbar.Items.Clear();

            Usuario usuario = (_seguridad.haySesionActiva()) ? _seguridad.getUsuario() : null;
            logear("MENU-BASE", ENivelMensaje.INFORMACION, Mensaje.TextoMensaje("USUARIO-PRE") + usuario);

            // Arranca recorriendo las listas de primer nivel (según atributo 'orden' de PARAMETRO)
            try {
                IList<Parametro> listaMenus = Parametros.GetByTipoClaveLike(ETipoParametro.MENU, "MENU.");
                if (listaMenus.Count > 0)
                    foreach (Parametro p in listaMenus) {
                        // Primero controla su debe colocar el menu (solo si usuario no es nulo
                        // ó si el parametro, asociado al menu, tiene el campo valorbool = true)
                        if (usuario == null && !p.Valorbool)
                            continue;

                        // Crea la opción de menu de primer nivel
                        item = new ToolStripMenuItem(p.Nombre);
                        bool agregarMenu = false;

                        // Para cada una obtiene las opciones de 2do nivel (SUBMENU, según 'orden')
                        IList<Parametro> listaSubMenus = Parametros.GetByTipoClaveLike(ETipoParametro.SUBMENU, p.Clave);
                        if (listaSubMenus.Count > 0)
                            foreach (Parametro ps in listaSubMenus)
                                // Verifica si se trata de un separador o un menu real
                                // (si es separador lo guarda y solo lo agrega si hay
                                // alguna otra opcion de menú real que venga despues)
                                if (ps.Clave.EndsWith("$LINEA$"))
                                    agregarSeparador = true;
                                else if (ps.Clave.Equals("MENU.SISTEMA.INICIARSESION") && usuario != null)
                                    continue;
                                else if (ps.Clave.Equals("MENU.SISTEMA.CERRARSESION") && usuario == null)
                                    continue;
                                else {
                                    // Crea la opción de menu de segundo nivel (aqui se 
                                    // agrega en la propiedad TAG el nombre del caso de
                                    // uso a dispararse en caso de seleccionar el mismo)
                                    subitem = new ToolStripMenuItem(ps.Nombre) {Tag = ps.Valorstring};

                                    // Para el submenu obtiene opciones de 3er orden (TRIMENU, según 'orden')                                 
                                    IList<Parametro> listaTriMenus =
                                        Parametros.GetByTipoClaveLike(ETipoParametro.TRIMENU, ps.Clave);
                                    if (listaTriMenus.Count > 0)
                                        foreach (Parametro pt in listaTriMenus) {
                                            // Verifica si debe validar el permiso y solo agrega
                                            // la opción de trimenu si se pasan las validaciones
                                            if (!pt.Valorbool &&
                                                (usuario == null || !usuario.poseePermiso(pt, ETipoPermiso.EJECUTAR)))
                                                continue;

                                            // Crea el trimenu y asigna un delegado para el click
                                            tritem = new ToolStripMenuItem(pt.Nombre) {Tag = pt.Valorstring};
                                            tritem.Click += vistaVentana.subMenuClick;
                                            subitem.DropDownItems.Add(tritem);

                                            // verifica si debe agregar un boton en la barra
                                            if (pt.Valorchar == 'B') {
                                                tributon = new ToolStripButton(
                                                    pt.Nombre
                                                        .Replace("...", string.Empty)
                                                        .Replace("&", string.Empty)
                                                        .Replace("Gestión de", string.Empty)
                                                        .Replace("Administración de", string.Empty)
                                                        .Replace("Registros de", string.Empty).ToUpper())
                                                           {Tag = pt.Valorstring};
                                                tributon.Click += vistaVentana.subMenuClick;
                                                toolbar.Items.Add(tributon);
                                            }
                                        }

                                    // Primero verifica si el usuario actual posee el permiso necesario
                                    if (!ps.Valorbool &&
                                        (usuario == null || !usuario.poseePermiso(ps, ETipoPermiso.EJECUTAR)))
                                        continue;

                                    // Si tiene permiso asigna el submenu y el delegado para el click  
                                    string icomenu = ps.Valorstring.Replace('.', '_');
                                    Image img = ((Image)(Resources.ResourceManager.GetObject(icomenu)));
                                    subitem.Image = img;
                                    subitem.Click += vistaVentana.subMenuClick;

                                    if (agregarSeparador) {
                                        item.DropDownItems.Add(new ToolStripSeparator());
                                        agregarSeparador = false;
                                    }
                                    item.DropDownItems.Add(subitem);
                                    agregarMenu = true;

                                    // verifica si debe agregar un boton en la barra
                                    if (ps.Valorchar == 'B') {
                                        subuton = new ToolStripButton(
                                            ps.Nombre
                                                .Replace("...", string.Empty)
                                                .Replace("&", string.Empty)
                                                .Replace("Gestión de", string.Empty)
                                                .Replace("Administración de", string.Empty)
                                                .Replace("Registros de", string.Empty).ToUpper())
                                                  {Tag = ps.Valorstring};
                                        subuton.Click += vistaVentana.subMenuClick;
                                        subuton.Image = img;
                                        subuton.ImageAlign = ContentAlignment.TopCenter;
                                        subuton.TextAlign = ContentAlignment.BottomCenter;
                                        subuton.TextImageRelation = TextImageRelation.ImageAboveText;
                                        subuton.ToolTipText = ps.Nombre.Replace("&", string.Empty);
                                        toolbar.Items.Add(subuton);
                                    }
                                }

                        // Si el menu tiene algo se agrega, pero verifica
                        // primero si hay separador, para agregar al menu
                        if (agregarMenu)
                            menu.Items.Add(item);
                    }
            } catch (Exception e) {
                throw new AppErrorException("MENU-NOK", e.ToString());
            }
        }

        /// <summary>
        /// Implementa el Método de la Interfaz.
        /// </summary>
        public virtual void cerrarSistema() {
            try {
                logear("APP-FIN", ENivelMensaje.DEBUG, null);
                cerrarPersistencia();
                cerrarLog();
            } catch (Exception e) {
                logear("APP-EXIT-ERROR", ENivelMensaje.FATAL, e.ToString());
            } finally {
                Application.Exit();
            }
        }

        /// <summary>
        /// Implementa el Método de la Interfaz.
        /// </summary>
        public void cerrarLog() {
            if (_log != null)
                _log.terminar();
        }

        /// <summary>
        /// Implementa el Método de la Interfaz.
        /// </summary>
        public void cerrarParametros() {}

        /// <summary>
        /// Implementa el Método de la Interfaz.
        /// </summary>
        public virtual void cerrarPersistencia() {
            Persistencia.Controlador.cerrarSsp();
        }

        /// <summary>
        /// Implementa el Método de la Interfaz.
        /// </summary>
        public virtual object getSettingExtra(string nombre) {
            return null;
        }

        /// <summary>
        /// Implementa el Método de la Interfaz.
        /// </summary>
        public ENivelMensaje getNivelEjecucion() {
            return _nivelEjecucion;
        }

        /// <summary>
        /// Implementa el Método de la Interfaz.
        /// </summary>
        public virtual void setSettingExtra(string nombre, object valor) { }

        /// <summary>
        /// Implementa el Método de la Interfaz.
        /// </summary>
        public void logear(string mensaje, ENivelMensaje nivel, string extra) {
            if (_log != null)
                _log.logear(mensaje, nivel, extra);
        }

        /// <summary>
        /// Implementa el Método de la Interfaz.
        /// </summary>
        public virtual DialogResult mostrar(string mensaje, ENivelMensaje nivel, string extra, bool logging) {
            try {
                DialogResult res = _vista.mostrarMensaje(mensaje, nivel, extra);

                if (logging)
                    logear(mensaje, nivel, ". " + (extra ?? "") + " [Dialogo.Show=" + res + "]");

                return res;
            } catch (Exception e) {
                throw new FatalErrorException("MENSAJE-NOK", e.ToString());
            }
        }
    }
}