///////////////////////////////////////////////////////////
//  IVistaVentanaPpal.cs
//  Implementation of the Interface IVistaVentanaPpal
//  Generated by Enterprise Architect
//  Created on:      15-Abr-2009 07:11:10 p.m.
//  Original author: Fito
///////////////////////////////////////////////////////////
using System;
using System.Windows.Forms;
using scioToolLibrary.enums;

namespace scioBaseLibrary.interfases {
    /// <summary>
    /// Esta interface determina el protocolo que debe seguir una vista que
    /// pueda ser utilizada dentro del framework de SCIO por una instancia de
    /// IControladorSistema para mostrar su estado. La idea subyacente aqui 
    /// es la de una ventana de aplicación simple con un titulo en la barra
    /// de titulos, una barra de menu (cuyo menu debe ser generado desde la
    /// instancia IControladorSistema), y una barra de estado con 3 partes:
    /// una ayuda (sin icono), un extra1 (con icono extra1.png) y un extra2
    /// (con icono extra2.png). Los iconos deberían estar entre los recursos 
    /// de éste proyecto, e insertados dentro de la calse de implementación
    /// de ésta interface.
    /// </summary>
    public interface IVistaVentanaPpal {
        /// <summary>
        /// El controlador de sistema para el sistema de quien es la ventana. 
        /// </summary>
        IControladorSistema Sistema { get; }

        /// <summary>
        /// Este método se encarga de colocar el título de la vista.
        /// </summary>
        /// <param name="titulo">
        /// El titulo para la vista.
        /// </param>
        void setTitulo(string titulo);
        
        /// <summary>
        /// Este método se encarga de establecer el menu
        /// </summary>
        /// <param name="parametros">
        /// Una colección de parametros que puedan necesitarse.
        /// </param>
        void setMenu(params object[] parametros);

        /// <summary>
        /// Este método inicializa la barra de estado del sistema colocando
        /// los valores de textos iniciales.
        /// </summary>
        void setBarraEstado();

        /// <summary>
        /// Este método muestra una cadena en la 1ra. sección de la 
        /// barra de estado (pensada para ayudas y tips).
        /// </summary>
        /// <param name="texto">
        /// La cadena a mostrarse en la 1ra. sección de la barra.
        /// </param>
        void setAyuda(string texto);

        /// <summary>
        /// Este método muestra una cadena en la 2da. sección de la 
        /// barra de estado (pensada para mostrar el usuario).
        /// </summary>
        /// <param name="texto">
        /// La cadena a mostrarse en la 2da. sección de la barra.
        /// </param>
        void setExtra1(string texto);

        /// <summary>
        /// Este método muestra una cadena en la 3ra. sección de la 
        /// barra de estado (pensada para mostrar la base).
        /// </summary>
        /// <param name="texto">
        /// La cadena a mostrarse en la 3ra. sección de la barra.
        /// </param>
        void setExtra2(string texto);

        /// <summary>
        /// Método para mostrar un mensaje en la ventana, debe lanzar FatalErrorException 
        /// si no puede mostrar el mensaje por algo.
        /// </summary>
        /// <param name="mensaje">
        /// El código del mensaje a mostrar (el cual debe contrasta contra una tabla de 
        /// códigos para así obtener el texto que efectivamente se muestra en pantalla).
        /// </param> 
        /// <param name="nivel">
        /// El nivel del mensaje (debe ser un valor de enumeración ENivelMensaje) que se 
        /// usa para filtrar lo que se logea y para decidir el formato del dialogobox.
        /// </param> 
        /// <param name="extra">
        /// Una cadena extra que se anexa al mensaje (o null si no quiere anexar nada).
        /// </param> 
        /// <returns>
        /// Retornar el valor devuelto por la ventana que muestre el mensaje o retornar 
        /// DialogResult.None si no hay nada para devolver o si existió algún problema.
        /// </returns>
        DialogResult mostrarMensaje(string mensaje, ENivelMensaje nivel, string extra);

        /// <summary>
        /// Delegado encargado de manejar los eventos producidos por la selección 
        /// en las opciones del menú. Esto se hace por la forma como se manejan las
        /// opciones de menu en .NET. Primero debe verificar si no es una opción que 
        /// pueda manejarse localmente dentro de la vista) y, si no es así, utiliza 
        /// la clase CUCaller para llamar (via reflexión) al caso de uso externo 
        /// generico que haya sido asociado (guardado en la tabla Parametro en el 
        /// campo valorstring) a la opción seleccionada.
        /// </summary>
        /// <param name="who">
        /// La opción de menú (MenuItem) que ha sido seleccionada.
        /// </param>
        /// <param name="e">
        /// El objeto que contiene datos sobre el evento producido.
        /// </param>
        void subMenuClick(object who, EventArgs e);
    }
}