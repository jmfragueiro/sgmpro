///////////////////////////////////////////////////////////
//  IControladorSistema.cs
//  Implementation of the Interface IControladorSistema
//  Generated by Enterprise Architect
//  Created on:      15-Dic-2009 07:11:10 p.m.
//  Original author: Fito
///////////////////////////////////////////////////////////
using System.Windows.Forms;
using scioLoggingLibrary.interfases;
using scioSecureLibrary.interfases;
using scioToolLibrary.enums;

namespace scioBaseLibrary.interfases {
    /// <summary>
    /// Esta interfase es la que representa el comportamiento deseable 
    /// de una clase que implemente y controle un Sistema completo, el
    /// cual debe encargarse, para ello, de brindar cierto tipo de fcs
    /// básicas esperadas de un sistema, en este caso 4 fundamentales:
    /// Persistencia, Logging, SecureService, Mensajes por pantalla. Usada
    /// dentro del 'framework' de trabajo de SCIO utilizado para crear 
    /// las aplicaciones. Para cada sistema en particular, se debería 
    /// crear una clase que implemente la interface y utiliza el patrón
    /// singleton para asegurar que exista solo una instancia del mismo.
    /// </summary>
    public interface IControladorSistema {
        /// <summary>
        /// El nombre interno del sistema (propiedad de solo lectura).
        /// </summary>
        string Nombre { get; }
        /// <summary>
        /// El titulo (nombre visible) del sistema (propiedad de solo lectura).
        /// </summary>
        string Titulo { get; }
        /// <summary>
        /// La versión del código del sistema (propiedad de solo lectura).
        /// </summary>
        string Version { get; }
        /// <summary>
        /// La cadena de conexión, en caso de existir una, del sistema (propiedad de solo lectura).
        /// </summary>
        string CadenaConexion { get; }
        /// <summary>
        /// El nombre de la base de datos utilizada (en caso de existir una).
        /// </summary>
        string Database { get; }
        /// <summary>
        /// El ultimo usuario conectado, en caso de existir usuarios conectados.
        /// </summary>
        string UltimoUsuario { get; }
        /// <summary>
        /// El path de inicio del sistema.
        /// </summary>
        string AppPath { get; set; }
        /// <summary>
        /// El cuadro de inicio del sistema (propiedad de solo lectura).
        /// </summary>
        IVistaCuadroInicio CuadroInicio { get; }
        /// <summary>
        /// La ventana principal del sistema (propiedad de solo lectura).
        /// </summary>
        IVistaVentanaPpal Winppal { get; }
        /// <summary>
        /// El servicio de logging del sistema (propiedad de solo lectura).
        /// </summary>
        IControladorLogging LogService { get; }
        /// <summary>
        /// El servicio de seguridad del sistema (propiedad de solo lectura).
        /// </summary>
        IControladorSeguridad SecurityService { get; }

        /// <summary>
        /// Este método se deberia encargar de iniciar el sistema en forma ordenada
        /// comenzando por configurar los valores básicos del sistema, verificar la 
        /// integridad del sistema, iniciar el sistema de logging (con el nivel de 
        /// ejecución deseado), luego iniciar el mecanismo de persistencia de datos, 
        /// y finalmente iniciando, si se debe, la interfaz de usuario. Se debería 
        /// lanzar una FatalErrorException si hay algun problema.
        /// </summary>
        /// <param name="nivelEjecucion">
        /// El nivel de ejecución para el sistema, para determinar qué mensajes 
        /// mostrar, o qué acciones tomar en determinados casos, etc.
        /// </param>
        /// <param name="wininicio">
        /// El cuadro de inicio encargado de iniciar el sistema. Si es nulo se 
        /// crea un WinInicio como vista principal del sistema.
        /// </param> 
        /// <param name="winppal">
        /// La vista principal del sistema, contra la que interactuará el mismo.
        /// Si es nulo se crea un WinPrincipal como vista principal del sistema.
        /// </param>
        /// <param name="log">
        /// El servicio de logging del sistema. Si es nulo se crea un LogSistema.
        /// </param>
        /// <param name="security">
        /// El servicio de seguridad y auditoría del sistema. Si es nulo se crea
        /// un SecureService.
        /// </param>
        void iniciarSistema(ENivelMensaje nivelEjecucion, 
            IVistaCuadroInicio wininicio,
            IVistaVentanaPpal winppal, 
            IControladorLogging log, 
            IControladorSeguridad security);

        /// <summary>
        /// Este método permite ejecutar una serie de procesos batch especificos
        /// de la aplicación que se genere. El proposito es que se pueda iniciar
        /// una serie de procesos en cualquier momento (especialmente al iniciar
        /// y/o cuando la ejecución tiene el nivel 'BATCH' -ver ENivelMensaje-).
        /// </summary>
        void ejecutarProcesosBatch();

        /// <summary>
        /// Este método es el encargado de iniciar parametros básicos del sistema.
        /// Debería ejecutarse antes que nada para tomar valores muy inciales desde
        /// el Registry de Windows o desde un archivo de inicio. No se deben capturar
        /// ni lanzar excepciones si hay error porque es mejor terminar. 
        /// </summary>
        void iniciarParametros();

        /// <summary>
        /// Este metodo es el encargado de iniciar el servicio de logging del sistema 
        /// a un destino de log definido por la clase que implementa la interfaz. El 
        /// método recibe el nivel de ejecución deseado y lo debe utilizar para que 
        /// este pueda restringir los mensajes que se logearan. No se deben capturar
        /// ni lanzar excepciones si hay error porque es mejor terminar si no hay log. 
        /// </summary>
        void iniciarLog();

        /// <summary>
        /// Este metodo es el encargado de iniciar el servicio de persistencia del sistema
        /// abriendo una sesion inicial contra el servicio. No se deben capturar ni lanzar 
        /// excepciones si hay un error porque es mejor terminar si no hay persistencia. 
        /// </summary>
        void iniciarPersistencia();

        /// <summary>
        /// Este metodo es el encargado de iniciar la interfaz gráfica del sistema
        /// abriendo la ventana principal y dandole el control. No se deben capturar 
        /// ni lanzar excepciones si hay un error porque es mejor terminar si no hay
        /// interfaz gráfica. 
        /// </summary>
        void iniciarUi();

        /// <summary>
        /// Este método es llamado por el Sistema justo antes de mostrar la pantalla y es
        /// el encargado de realizar cualquier tarea final que haya que hacer antes de eso
        /// (por ejem para dar los utlimos retoques a la interfaz mostrada ó logear algo).
        /// </summary>
        void finalizarInicio();

        /// <summary>
        /// Este método debería cerrar el sistema en forma ordenada cerrando los servicios 
        /// de logging, de persistencia y cualquier otro que fuese abierto por el sistema.
        /// No se deberían capturar ni relanzar excepciones durante el proceso.
        /// </summary>
        void cerrarSistema();

        /// <summary>
        /// Este método debería ejecutar las acciones para dejar los parámetros actualizados
        /// al cerrarse el sistema (o cualquier cuestión razonable que requiera su cierre).
        /// </summary>
        void cerrarParametros();

        /// <summary>
        /// Este método debería ejecutar las acciones para cerrar ordenadamente el servicio 
        /// de logging del sistema (por cualquier cuestión razonable que requiera su cierre).
        /// </summary>
        void cerrarLog();

        /// <summary>
        /// Este método debería ejecutar las acciones para cerrar ordenadamente el servicio 
        /// de persistencia del sistema (por cualquier cuestión razonable que requiera su cierre).
        /// </summary>
        void cerrarPersistencia();

        /// <summary>
        /// Este método permite generar una puerta hacia cualquier dato extra que 
        /// utilice una instancia de Sistema y que no esté dentro de los que estan
        /// aqui definidos. Es para cuando se agrega un dato en el Settings.Settings
        /// del Properties del proyecto de inicio del sistema (respecto de los aqui
        /// ya definidos).
        /// </summary>
        /// <param name="nombre">
        /// El nombre del dato extra que se desea obtener.
        /// </param>
        /// <returns>
        /// El valor del dato extra como un object (debe ser casteado a su tipo concreto).
        /// </returns>
        object getSettingExtra(string nombre);

        /// <summary>
        /// Este método permite obtener el nivel de ejecucion actual del sistema.
        /// </summary>
        /// <returns>
        /// El valor del nivel de ejecucion del sistema.
        /// </returns>
        ENivelMensaje getNivelEjecucion();

        /// <summary>
        /// Este método permite generar una puerta hacia cualquier dato extra que 
        /// utilice una instancia de Sistema y que no esté dentro de los que estan
        /// aqui definidos. Es para cuando se agrega un dato en el Settings.Settings
        /// del Properties del proyecto de inicio del sistema (respecto de los aqui
        /// ya definidos). Este método debe grabar el contenido despues de modificarlo.
        /// </summary>
        /// <param name="nombre">
        /// El nombre del dato extra que se desea obtener.
        /// </param>
        /// <param name="valor">
        /// El valor que se quiere guardar en el dato extra.
        /// </param>
        void setSettingExtra(string nombre, object valor);

        /// <summary>
        /// Este metodo es el encargado de generar el menu de opciones del sistema para
        /// la interfaz gráfica del sistema o de cualquier modo. No se deben capturar 
        /// ni lanzar excepciones si hay un error porque es mejor terminar si no puede
        /// generar un menú de opciones.
        /// </summary>
        /// <param name="vistaVentana">
        /// Ventana para la cual generará el menú, que se pasa para tener el Delegado
        /// para manejar las opciones de menú (subMenuClick(object who, EventArgs e)).
        /// </param>
        /// <param name="menu">
        /// El menu de la Ventana que va a llenarse con las opciones obtenidas. Se pasa
        /// porque no funciona si se genera uno nuevo cada vez que es llamado el método.
        /// </param>
        /// <param name="toolbar">
        /// El toolbar de la Ventana que va a llenarse con las opciones obtenidas.
        /// </param>
        void generarMenu(IVistaVentanaPpal vistaVentana, MenuStrip menu, ToolStrip toolbar);

        /// <summary>
        /// Método para registrar (logear) un mensaje al mecanismo de logging actual. 
        /// </summary>
        /// <param name="mensaje">
        /// El mensaje a registrar (logear).
        /// </param> 
        /// <param name="nivel">
        /// El nivel del mensaje (debe ser un valor de la enum enums.ENivelMensaje) que 
        /// se usa para filtrar lo que se registra.
        /// </param> 
        /// <param name="extra">
        /// Una cadena extra que se anexa al mensaje (o null).
        /// </param>
        void logear(string mensaje, ENivelMensaje nivel, string extra);

        /// <summary>
        /// Método para mostrar un mensaje por pantalla y opcionalmente registrarlo
        /// con el servicio de logging del sistema. Logea cualquier error y deberia
        /// lanzar una FatalErrorException si no puede mostrar el mensaje por algo.
        /// </summary>
        /// <param name="mensaje">
        /// El código del mensaje a mostrar (el cual debe contrasta contra una tabla de 
        /// códigos para así obtener el texto que efectivamente se muestra en pantalla).
        /// </param> 
        /// <param name="nivel">
        /// El nivel del mensaje (debe ser un valor de enumeración ENivelMensaje) que se 
        /// usa para filtrar lo que se logea y para decidir el formato del dialogobox.
        /// </param> 
        /// <param name="extra">
        /// Una cadena extra que se anexa al mensaje (o null si no quiere anexar nada).
        /// </param> 
        /// <param name="logging">
        /// Un valor boleano que indica si debe (true) logear el mensaje, o no (false).
        /// </param>
        /// <returns>
        /// Retornar el valor devuelto por la ventana que muestre el mensaje o retornar 
        /// DialogResult.None si no hay nada para devolver o si existió algún problema.
        /// </returns>
        DialogResult mostrar(string mensaje, ENivelMensaje nivel, string extra, bool logging);
    }
}