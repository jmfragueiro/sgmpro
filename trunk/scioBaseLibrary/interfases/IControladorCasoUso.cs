///////////////////////////////////////////////////////////
//  IControladorCasoUso.cs
//  Implementation of the Interface IControladorCasoUso
//  Generated by Enterprise Architect
//  Created on:      15-Abr-2009 07:11:10 p.m.
//  Original author: Fito
///////////////////////////////////////////////////////////
namespace scioBaseLibrary.interfases {
    /// <summary>
    /// Esta interfase es la que representa el comportamiento deseable de una clase 
    /// que implemente y controle un Caso de Uso dentro del framework de trabajo de 
    /// SCIO utilizado para crear el sistema. En este framework ad-hoc, siempre que 
    /// se desea ejecutar una unidad suficientemente importante de funcionalidad se 
    /// lo hace vía un caso de uso, es decir una clase que implemente esta interfaz. 
    /// Como ejemplo: en el menu principal del sistema (desde la ventana principal)
    /// todas las opciones lanzan clases que deben implementar esta interfaz (para 
    /// ello utilizan la reflexión). Toda implementación de esta interfaz recibe un 
    /// objeto cualquiera del sistema que lo toma como 'padre', vale decir quien lo 
    /// llama y, en última instancia, lo controla. 
    /// </summary>
    public interface IControladorCasoUso {
        /// <summary>
        /// El padre del caso de uso (quien lo llama o gestiona).
        /// </summary>
        object Padre { get; set; }

        /// <summary>
        /// Este método representa el punto de entrada al caso de uso, 
        /// por lo que es el método que debe llamarse para iniciar el 
        /// mismo. Podría retornar con una AppErrorException si tiene 
        /// problemas.
        /// </summary>
        /// <param name="padre">
        /// El objeto padre del caso de uso implementado (que el propio
        /// caso de uso deberá tratar).
        /// </param>      
        /// <param name="valor">        
        /// Aqui se espera que vengan argumentos extras necesarios para 
        /// la ejecución deseada del caso de uso (que el propio caso de 
        /// uso deberá tratar).
        /// </param>
        /// <returns>
        /// Debería retornar true si se inició correctamente el caso de 
        /// uso ó, de lo contrario, retornar false si no pudo pero por
        /// un error esperable. Si no inicia por un error inesperado se
        /// debe retornar AppErrorException.
        /// </returns>
        bool iniciar(object padre, params object[] valor);

        /// <summary>
        /// Este método debería tomar los parametros pasados como argumento
        /// al metodo iniciar del del caso de uso y realizar las verificaciones
        /// y adaptaciones que sean necesarias.
        /// </summary>
        /// <param name="parametros">
        /// Los parametros pasados en la llamada al caso de uso.
        /// </param>
        void aceptarParametros(params object[] parametros);
    }
}