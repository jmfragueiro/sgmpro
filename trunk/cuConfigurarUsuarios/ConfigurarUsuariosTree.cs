///////////////////////////////////////////////////////////
//  ConfigurarUsuariosTree.cs
//  Clase de control para el tree configurar usuarios.
//  Generated by Fito
//  Created on:      08-abr-2009 11:32:54
//  Original author: Fito
///////////////////////////////////////////////////////////
using System;
using System.Drawing;
using System.Windows.Forms;
using cuConfigurarUsuarios.Properties;
using scioBaseLibrary;
using scioBaseLibrary.excepciones;
using scioControlLibrary.dominio.repos;
using scioControlLibrary.enums;
using scioControlLibrary.interfaces;
using scioToolLibrary;
using scioToolLibrary.enums;

namespace cuConfigurarUsuarios {
    public class ConfigurarUsuariosTree : IControladorTree {
        /// <summary>
        /// Atributo que contiene al árbol asociado a la instancia.
        /// </summary>
        private readonly TreeNode _tree;
        /// <summary>
        /// Lista de Imágenes para los iconitos del árbol
        /// </summary>
        private readonly ImageList _listaImagenes;

        /// <summary>
        /// Contructor de la clase que inicializa el árbol asociado
        /// y la lista de imagenes que se utilizará dentro del tree.
        /// </summary>
        public ConfigurarUsuariosTree() {
            _tree = NodoTrees.GetRaizByDescripcion("Seguridad y Perfiles").getTree();
            _listaImagenes = new ImageList();
            _listaImagenes.Images.Add(Resource.world);
            _listaImagenes.Images.Add(Resource.usuario);
            _listaImagenes.Images.Add(Resource.rol);
            _listaImagenes.Images.Add(Resource.perfil);
            _listaImagenes.Images.Add(Resource.arrow_right);
        }

        #region Implementation of IControladorTree
        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        /// <returns>
        /// Devuelve el nodo raiz del árbol con todas sus hojas.
        /// </returns>
        public TreeNode getTree() {
            return _tree;
        }

        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        /// <returns>
        /// Devuelve la lista de imágenes asociada al árbol.
        /// </returns>
        public ImageList getImagenesTree() {
            return _listaImagenes;
        }

        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        public int getImagenSeleccionado() {
            return 4;
        }

        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        public void alEjecutarNodo(TreeNode nodo) {}

        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        public void alActualizarListado(TreeNode nodo) {}

        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        public EModoVentana getModoVista(TreeNode nodo) {
            return EModoVentana.LIST;
        }

        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        /// <returns>
        /// Devuelve el titulo deseado para la ventana del árbol.
        /// </returns>
        public string getTitulo() {
            return Mensaje.TextoMensaje("TITULO-CONFIG-SEGURIDAD");
        }

        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        public virtual Icon getIcono() {
            return Resource.cfguser;
        }

        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        public void cargarTree(TreeView vista) {
            try {
                vista.Nodes.Add(getTree());
                vista.ImageList = getImagenesTree();
            } catch (Exception e) {
                Sistema.Controlador.logear("PANEL-NOK", ENivelMensaje.ERROR, e.ToString());
                throw new VistaErrorException("TREE-NOK");
            }
        }
        #endregion
    }
}