///////////////////////////////////////////////////////////
//  CUAbmConvenio.cs
//  Clase de implementación de CUAbmConvenio.
//  Generated by Fito
//  Created on:      08-abr-2009 11:32:54
//  Original author: Fito
///////////////////////////////////////////////////////////
using System;
using System.Drawing;
using System.Windows.Forms;
using cuAbmConvenio.Properties;
using scioBaseLibrary;
using scioBaseLibrary.excepciones;
using scioControlLibrary;
using scioParamLibrary.dominio;
using scioParamLibrary.dominio.repos;
using scioPersistentLibrary;
using scioToolLibrary;
using scioToolLibrary.enums;
using sgmpro.dominio.configuracion;
using sgmpro.dominio.gestion;
using toolsGestion;

namespace cuAbmConvenio {
    /// <summary>
    /// Esta clase hereda de CUAbmGenerico y se encarga de gestionar la 
    /// ventana WinABMV junto con su panelABMV para la entidad Convenio.
    /// </summary>
    public class CUAbmConvenio : CUAbmGenerico<Convenio> {
        #region IControladorEditable Members
        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        public override PanelABMV<Convenio> crearPanelEdicion() {
            return new PanelAbmvConvenio(this);
        }

        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        public override Icon getIcono() {
            return Resources.convenioico;
        }

        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        public override void add(params Object[] parametros) {
            if (parametros[0] is Cuenta)
                ObjetoEnEdicion = new Convenio {Cuenta = (Cuenta)parametros[0]};
            else
                throw new AppErrorException("ERROR-ADD-WITHOUT-MASTER", "CONVENIO");
        }

        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        public override void remove(params object[] parametros) {
            if (ObjetoEnEdicion == null)
                return;

            if (ObjetoEnEdicion.Cuenta.ConvenioActivo.Equals(ObjetoEnEdicion))
                ObjetoEnEdicion.Cuenta.bajarConvenioActivo();
            else
                ObjetoEnEdicion.delete();
        }

        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        public override void save(params Object[] parametros) {
            if (ObjetoEnEdicion != null)
                if (Sistema.Controlador.mostrar("PREGUNTA-SAVE-CONVENIO", ENivelMensaje.PREGUNTA, null, false)
                    == DialogResult.Yes)
                    try {
                        if (ObjetoEnEdicion.Cuenta.ConvenioActivo != null)
                            throw new DataErrorException("ERROR-CONVENIO-NODUP");
                        if (ObjetoEnEdicion.Cuotas.Count <= 0)
                            throw new DataErrorException("ERROR-CONVENIO-NOGEN");

                        // Solo si termina bien asigna fecha de alta y agrega
                        long scn = Persistencia.Controlador.iniciarTransaccion();
                        ObjetoEnEdicion.FechaAlta = DateTime.Now;
                        ObjetoEnEdicion.Cuenta.agregarConvenio(ObjetoEnEdicion);
                        ObjetoEnEdicion.save();

                        // Refresca la gestion de la cuenta (por las dudas)
                        refrescarGestionCuentaAsociada();
                        Persistencia.Controlador.commitTransaccion(scn);
                    } catch (Exception e) {
                        Persistencia.Controlador.rollbackTransaccion();
                        throw new AppErrorException("DATA-SAVENOK", e.ToString());
                    }
        }

        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        public override void verify(params object[] parametros) {
            if (ObjetoEnEdicion.Tipo == null)
                throw new DataErrorException("CAMPO-NOK", Mensaje.TextoValidacion("CONVENIO-TIPO"));

            if (ObjetoEnEdicion.DeudaBase <= 0)
                throw new DataErrorException("CAMPO-NOK", Mensaje.TextoValidacion("CONVENIO-MONTO"));

            if ((ObjetoEnEdicion.DeudaBase - ObjetoEnEdicion.Anticipo) <= 0)
                throw new DataErrorException("CAMPO-NOK", Mensaje.TextoValidacion("CONVENIO-MONTOREF"));

            if (ObjetoEnEdicion.Quita < 0)
                throw new DataErrorException("CAMPO-NOK", Mensaje.TextoValidacion("CONVENIO-QUITA"));

            if (ObjetoEnEdicion.Anticipo < 0)
                throw new DataErrorException("CAMPO-NOK", Mensaje.TextoValidacion("CONVENIO-ANTICIPO"));

            if (ObjetoEnEdicion.Anticipo < ObjetoEnEdicion.GastosAnticipo)
                throw new DataErrorException("CAMPO-NOK", Mensaje.TextoValidacion("CONVENIO-GASTOS"));

            if (ObjetoEnEdicion.CtdadCuotas < 1)
                throw new DataErrorException("CAMPO-NOK", Mensaje.TextoValidacion("CONVENIO-CTDADCTAS"));

            if (ObjetoEnEdicion.CtdadCuotas > ObjetoEnEdicion.Tipo.MaxCuotas)
                throw new DataErrorException("CAMPO-NOK", Mensaje.TextoValidacion("CONVENIO-CTDADCTAS-MAX"));

            if (ObjetoEnEdicion.FechaInicio < DateTime.Now.Date)
                throw new DataErrorException("CAMPO-NOK", Mensaje.TextoValidacion("CONVENIO-FECHAINI"));
        }
        #endregion

        /// <summary>
        /// Este método verifica la cuenta asociada al convenio que se acaba de generar (y grabar) 
        /// y, si ésta tiene alguna gestión pendiente, entonces la cierra con la aplicación de un 
        /// resultado 'generación de convenio'. Si no tenia pendientes entonces crea una nueva.
        /// </summary>
        private void refrescarGestionCuentaAsociada() {
            bool habiaGestion = false;
            Parametro resultado = Parametros.GetByClave("RESULTADOGESTION.ALTACONVENIO");
            string desc = "Tipo:" + ObjetoEnEdicion.Tipo.Nombre; 
            desc += "; Origen:$" + ObjetoEnEdicion.TotalOrigen;
            desc += "; Quita:$" + ObjetoEnEdicion.Quita;
            desc += "; Deuda:$" + ObjetoEnEdicion.DeudaBase;
            desc += "; Anticipo:$" + ObjetoEnEdicion.Anticipo;
            desc += "; GastosAnt:$" + ObjetoEnEdicion.GastosAnticipo;
            desc += "; Refinancia:$" + (ObjetoEnEdicion.DeudaBase - ObjetoEnEdicion.Anticipo);
            desc += "; Cuotas:" + ObjetoEnEdicion.CtdadCuotas;
            desc += "; Inicio:" + ObjetoEnEdicion.FechaInicio.Date;
            desc += "; Final:$" + ObjetoEnEdicion.MontoFinal;
            desc += "; Cuota:$" + ObjetoEnEdicion.getCuota(1).Total;
            desc += "; Obs:" + ObjetoEnEdicion.Descripcion;

            foreach (Gestion gestion in ObjetoEnEdicion.Cuenta.getGestionesActivas())
                if (!gestion.estaFinalizada()) {
                    habiaGestion = true;
                    gestion.ResultadoDesc = desc;                    
                    ResultadoGestion.EjecutarResultado(gestion, resultado);
                }

            if (!habiaGestion) {
                Gestion ges = new Gestion {
                                      Estado = Parametros.GetByClave("ESTADOGESTION.ASIGNADA"),
                                      FechaInicio = DateTime.Now,
                                      Tipo = Parametros.GetByClave("TIPOGESTION.ADMINISTRATIVA"),
                                      ResultadoDesc = desc
                                  };
                ObjetoEnEdicion.Cuenta.agregarGestion(ges);
                ResultadoGestion.EjecutarResultado(ges, resultado);
            }

            Sistema.Controlador.SecurityService.getSesion().cerrarGestion();
            ObjetoEnEdicion.save();
        }
    }
}