///////////////////////////////////////////////////////////
//  IControladorSistema.cs
//  Implementation of the Interface IControladorSistema
//  Generated by Enterprise Architect
//  Created on:      15-Dic-2009 07:11:10 p.m.
//  Original author: Fito
///////////////////////////////////////////////////////////
using scioToolLibrary.enums;

namespace scioLoggingLibrary.interfases {
    /// <summary>
    /// Esta interfase es la que representa el comportamiento deseable 
    /// de una clase que implemente y controle un servicio de logging, 
    /// el cual debe encargarse de registrar mensajes a cualquier salida 
    /// determinada. El servicio de logging debe utilizar el nivel de 
    /// ejecución de un sistema (un valor de enumeración ENivelMensaje)
    /// para establecer que mensajes logear.
    /// </summary>
    public interface IControladorLogging {
        /// <summary>
        /// El nombre interno del sistema (propiedad de solo lectura).
        /// </summary>
        ENivelMensaje NivelMensaje { get; }
        /// <summary>
        /// Estado del servicio de logging (debería cambiar automáticamente 
        /// vía los métodos iniciar() y terminar()). Solo se debería logear
        /// si la instancia se encuentra activa.
        /// </summary>
        bool Activo { get; set; }

        /// <summary>
        /// Método para iniciar el proceso de logging. Aqui se deberia 
        /// crear efectivamente el destino de log y se prueba (inicia) 
        /// el registro de mensajes.
        /// </summary>
        /// <param name="dir">
        /// El contenedor donde crear el destino del servicio de logging
        /// (por ejemplo se espera que sea el directorio del archivo).
        /// </param> 
        /// <param name="nombre">
        /// El nombre del destino del servicio de logging, al que se debe
        /// sumar la fecha y hora de creación del mismo y una marca de log
        /// (por ejemplo la extensión .log si fuera un archivo).
        /// </param>  
        void iniciar(string dir, string nombre);

        /// <summary>
        /// Método para registrar (logear) un mensaje al destino del servicio.
        /// </summary>
        /// <param name="mensaje">
        /// El mensaje a registrar (logear).
        /// </param> 
        /// <param name="nivel">
        /// El nivel del mensaje (debe ser un valor de enum enums.ENivelMensaje) 
        /// que se debe utilizar para filtrar lo que se registra efectivamente,
        /// dado que solo lo que supere el nivel de mensaje de la instancia actual
        /// del servicio deberá quedar registrado.
        /// </param> 
        /// <param name="extra">
        /// Una cadena extra que se debería anexar al mensaje (o puede ser null).
        /// </param>
        void logear(string mensaje, ENivelMensaje nivel, string extra);

        /// <summary>
        /// Método para finalizar el servicio de logging, el cual debería cerrar
        /// en forma ordenada el mismo y todos los recursos asociados, descargando
        /// lo que tenga en curso.
        /// </summary>
        void terminar();
    }
}