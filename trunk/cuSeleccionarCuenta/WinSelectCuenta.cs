///////////////////////////////////////////////////////////
//  EntidadIdentificada.cs
//  Implementation of the Class EntidadIdentificada
//  Generated by Enterprise Architect
//  Created on:      08-abr-2009 11:32:53
//  Original author: Fito
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Windows.Forms;
using cuAbmCuenta;
using scioBaseLibrary;
using scioBaseLibrary.excepciones;
using scioControlLibrary;
using scioControlLibrary.enums;
using scioControlLibrary.interfaces;
using scioParamLibrary.dominio;
using scioParamLibrary.dominio.repos;
using scioPersistentLibrary.criterios;
using scioPersistentLibrary.interfases;
using scioToolLibrary;
using scioToolLibrary.enums;
using sgmpro.dominio.configuracion;

namespace cuSeleccionarCuenta {
    public partial class WinSelectCuenta : Form, IVistaContenedor {
        /// <summary>
        /// Este atributo es el controlador para el listado de cuentas.
        /// </summary>
        private readonly CUListCuentas _controlCuentas;
        /// <summary>
        /// El criterio a aplicarse al listado de cuentas
        /// </summary>
        public ICriterioConsulta CriterioCuentas { get; set; }
        /// <summary>
        /// Este atributo es el controlador para el listado de contactos.
        /// </summary>
        private readonly IControladorListable<Contacto> _controlListadoContactos;
        /// <summary>
        /// Este atributo es el controlador para el listado de entidades.
        /// </summary>
        private readonly IControladorListable<Entidad> _controlListadoEntidades;
        /// <summary>
        /// Este atributo es el controlador para el listado de personas.
        /// </summary>
        private readonly IControladorListable<Persona> _controlListadoPersonas;
        /// <summary>
        /// Este atributo es el controlador para el listado de productos.
        /// </summary>
        private readonly IControladorListable<Producto> _controlListadoProductos;
        /// <summary>
        /// El panel para mostrar las cuentas asociadas.
        /// </summary>
        private PanelListCuentas _panelCuentas;
        /// <summary>
        /// Este atributo referencia al panel de listado que se utiliza.
        /// </summary>
        private IVistaPanelList _panelListado;
        /// <summary>
        /// El listado de estados controlados (para filtrar cuentas)
        /// </summary>
        private readonly IList<Parametro> _parsControlados 
                                    = Parametros.GetByCriteria(true, new[] {
                                        Criterios.Like("Clave","ESTADOCUENTA%")
                                        ,Criterios.Igual("Valorbool", true)}, null);

        /// <summary>
        /// Contructor que llama inicializa los componentes de la ventana.
        /// </summary>
        public WinSelectCuenta() {
            InitializeComponent();

            CriterioCuentas = Criterios.EsNulo("Id");

            _controlListadoPersonas = new CUListPersonasSelCta(this);
            _controlListadoPersonas.iniciar(this, new object[] {EModoVentana.VIEW});

            _controlListadoEntidades = new CUListEntidadSelCta(this);
            _controlListadoEntidades.iniciar(this, new object[] {EModoVentana.VIEW});

            _controlListadoProductos = new CUListProductosSelCta(this);
            _controlListadoProductos.iniciar(this, new object[] {EModoVentana.VIEW});

            _controlListadoContactos = new CUListContactosSelCta(this);
            _controlListadoContactos.iniciar(this, new object[] {EModoVentana.VIEW});

            _controlCuentas = new CUListCuentas();
            _controlCuentas.iniciar(this, new object[] {EModoVentana.GESTION});
        }

        #region helpers
        /// <summary>
        /// Este método es el encargado de actualizar el listado de personas a la derecha.
        /// </summary>
        private void actualizarListadoPersonas() {
            try {
                if (_controlListadoPersonas != null) {
                    splitCtasCabecera.Panel1.Controls.Remove(label8);
                    splitCtasCabecera.Panel1.Controls.Remove((Control) _panelListado);
                    _panelListado = _controlListadoPersonas.getPanelListado();
                    _panelListado.Contenedor = this;
                    splitCtasCabecera.Panel1.Controls.Add((PanelListABMV<Persona>) _panelListado);
                    ((PanelListABMV<Persona>) _panelListado).Dock = DockStyle.Fill;
                    ((PanelListABMV<Persona>) _panelListado).Dock = DockStyle.Fill;
                    ((DataGridView) _panelListado.getControlListado()).KeyDown += listado_KeyDown;
                    splitCtasCabecera.Panel1.Controls[0].Focus();
                }
            } catch (Exception ex) {
                Sistema.Controlador.mostrar("SELECT-CUENTAS-NOK", ENivelMensaje.ERROR, ex.ToString(), true);
            }
        }

        /// <summary>
        /// Este método es el encargado de actualizar el listado de entidades a la derecha.
        /// </summary>
        private void actualizarListadoEntidades() {
            try {
                if (_controlListadoEntidades != null) {
                    splitCtasCabecera.Panel1.Controls.Remove(label8);
                    splitCtasCabecera.Panel1.Controls.Remove((Control) _panelListado);
                    _panelListado = _controlListadoEntidades.getPanelListado();
                    _panelListado.Contenedor = this;
                    splitCtasCabecera.Panel1.Controls.Add((PanelListABMV<Entidad>) _panelListado);
                    ((PanelListABMV<Entidad>) _panelListado).Dock = DockStyle.Fill;
                    ((DataGridView) _panelListado.getControlListado()).KeyDown += listado_KeyDown;
                    splitCtasCabecera.Panel1.Controls[0].Focus();
                }
            } catch (Exception ex) {
                Sistema.Controlador.mostrar("SELECT-CUENTAS-NOK", ENivelMensaje.ERROR, ex.ToString(), true);
            }
        }

        /// <summary>
        /// Este método es el encargado de actualizar el listado de productos a la derecha.
        /// </summary>
        private void actualizarListadoProductos() {
            try {
                if (_controlListadoProductos != null) {
                    splitCtasCabecera.Panel1.Controls.Remove(label8);
                    splitCtasCabecera.Panel1.Controls.Remove((Control) _panelListado);
                    _panelListado = _controlListadoProductos.getPanelListado();
                    _panelListado.Contenedor = this;
                    splitCtasCabecera.Panel1.Controls.Add((PanelListABMV<Producto>) _panelListado);
                    ((PanelListABMV<Producto>) _panelListado).Dock = DockStyle.Fill;
                    ((DataGridView) _panelListado.getControlListado()).KeyDown += listado_KeyDown;
                    splitCtasCabecera.Panel1.Controls[0].Focus();
                }
            } catch (Exception ex) {
                Sistema.Controlador.mostrar("SELECT-CUENTAS-NOK", ENivelMensaje.ERROR, ex.ToString(), true);
            }
        }

        /// <summary>
        /// Este método es el encargado de actualizar el listado de contactos a la derecha.
        /// </summary>
        private void actualizarListadoContactos() {
            try {
                if (_controlListadoContactos != null) {
                    splitCtasCabecera.Panel1.Controls.Remove(label8);
                    splitCtasCabecera.Panel1.Controls.Remove((Control) _panelListado);
                    _panelListado = _controlListadoContactos.getPanelListado();
                    _panelListado.Contenedor = this;
                    splitCtasCabecera.Panel1.Controls.Add((PanelListABMV<Contacto>) _panelListado);
                    ((PanelListABMV<Contacto>) _panelListado).Dock = DockStyle.Fill;
                    ((DataGridView) _panelListado.getControlListado()).KeyDown += listado_KeyDown;
                    splitCtasCabecera.Panel1.Controls[0].Focus();
                }
            } catch (Exception ex) {
                Sistema.Controlador.mostrar("SELECT-CUENTAS-NOK", ENivelMensaje.ERROR, ex.ToString(), true);
            }
        }

        /// <summary>
        /// Este método es el encargado de actualizar la ventana
        /// para mostrar a la derecha lo que se corresponda con el
        /// item del árbol seleccionado. Debería 'mostrar' cualquier
        /// error que pudiese ocurrir y no propagar ninguna excepción.
        /// </summary>
        private void actualizarCuentas() {
            try {
                Cursor = Cursors.WaitCursor;
                Sistema.Controlador.Winppal.setAyuda(Mensaje.TextoMensaje("UPDATE-LISTPANEL"));

                if (_controlCuentas != null) {
                    if (_panelCuentas != null) {
                        _panelCuentas = (PanelListCuentas) _controlCuentas.getPanelListado();
                        splitCuentas.Panel2.Controls[0].Focus();
                    } else {
                        splitCuentas.Panel2.Controls.Remove(label14);
                        _panelCuentas = (PanelListCuentas) _controlCuentas.getPanelListado();
                        splitCuentas.Panel2.Controls.Add(_panelCuentas);
                        _panelCuentas.Dock = DockStyle.Fill;
                    }
                    _panelCuentas.Contenedor = this;
                }
            } catch (Exception ex) {
                Sistema.Controlador.mostrar("SELECT-CUENTAS-NOK", ENivelMensaje.ERROR, ex.ToString(), true);
            } finally {
                Sistema.Controlador.Winppal.setAyuda(Mensaje.TextoMensaje("AYUDA-LISTO"));
                Cursor = Cursors.Default;
            }
        }

        /// <summary>
        /// Este método es el encargado de cerrar todos los paneles de 
        /// listado que esten abiertos. Debería 'mostrar' cualquier
        /// error que pudiese ocurrir y no propagar ninguna excepción.
        /// </summary>
        private void cerrarPaneles() {
            try {
                if (_controlListadoEntidades != null)
                    _controlListadoEntidades.listClose();
                if (_controlListadoPersonas != null)
                    _controlListadoPersonas.listClose();
                if (_controlListadoProductos != null)
                    _controlListadoProductos.listClose();
                if (_controlListadoContactos != null)
                    _controlListadoContactos.listClose();
            } catch (Exception ex) {
                Sistema.Controlador.mostrar("VISTA-CLOSE-NOK", ENivelMensaje.ERROR, ex.ToString(), true);
            }
        }

        /// <summary>
        /// Este método arma el criterio de búsqueda para filtrar el 
        /// listado de personas y a partir de lo ingresado en los campos
        /// respectivos.
        /// </summary>
        /// <returns>
        /// El criterio de búsqueda a aplicarse a las personas.
        /// </returns>
        public ICriterioConsulta armaCriterioPersonas() {
            ICriterioConsulta crit = Criterios.EsNoNulo("Id");

            if (txtPNombre.Text != null && !txtPNombre.Text.Trim().Equals(""))
                crit = Criterios.And(crit, Criterios.Like("Nombre", "%" + txtPNombre.Text.Trim() + "%"));
            if (txtPCUIT.Text != null && !txtPCUIT.Text.Trim().Equals(""))
                crit = Criterios.And(crit, Criterios.Like("Cuit", "%" + txtPCUIT.Text.Trim() + "%"));
            if (txtPDNI.Text != null && !txtPDNI.Text.Trim().Equals(""))
                crit = Criterios.And(crit, Criterios.Like("DNI", "%" + txtPDNI.Text.Trim() + "%"));
            if (txtPProfesion.Text != null && !txtPProfesion.Text.Trim().Equals(""))
                crit = Criterios.And(crit, Criterios.Like("Profesion", "%" + txtPProfesion.Text.Trim() + "%"));
            if (txtPTrabajo.Text != null && !txtPTrabajo.Text.Trim().Equals(""))
                crit = Criterios.And(crit, Criterios.Like("Trabajo", "%" + txtPTrabajo.Text.Trim() + "%"));

            return crit;
        }

        /// <summary>
        /// Este método arma el criterio de búsqueda para filtrar el 
        /// listado de entidades y a partir de lo ingresado en los campos
        /// respectivos.
        /// </summary>
        /// <returns>
        /// El criterio de búsqueda a aplicarse a las entidades.
        /// </returns>
        public ICriterioConsulta armaCriterioEntidades() {
            ICriterioConsulta crit = Criterios.EsNoNulo("Id");

            if (txtENombre.Text != null && !txtENombre.Text.Trim().Equals(""))
                crit = Criterios.And(crit, Criterios.Like("Nombre", "%" + txtENombre.Text.Trim() + "%"));
            if (txtECodigo.Text != null && !txtECodigo.Text.Trim().Equals(""))
                crit = Criterios.And(crit, Criterios.Like("Codigo", "%" + txtECodigo.Text.Trim() + "%"));
            if (txtETelefono.Text != null && !txtETelefono.Text.Trim().Equals(""))
                crit = Criterios.And(crit, Criterios.Like("Telefono", "%" + txtETelefono.Text.Trim() + "%"));
            if (txtECUIT.Text != null && !txtECUIT.Text.Trim().Equals(""))
                crit = Criterios.And(crit, Criterios.Like("Cuit", "%" + txtECUIT.Text.Trim() + "%"));
            if (txtEContacto.Text != null && !txtEContacto.Text.Trim().Equals(""))
                crit = Criterios.And(crit, Criterios.Like("Contacto", "%" + txtEContacto.Text.Trim() + "%"));

            return crit;
        }

        /// <summary>
        /// Este método arma el criterio de búsqueda para filtrar el 
        /// listado de productos y a partir de lo ingresado en los campos
        /// respectivos.
        /// </summary>
        /// <returns>
        /// El criterio de búsqueda a aplicarse a los productos.
        /// </returns>
        public ICriterioConsulta armaCriterioProductos() {
            ICriterioConsulta crit = Criterios.EsNoNulo("Id");

            if (txtRNombre.Text != null && !txtRNombre.Text.Trim().Equals(""))
                crit = Criterios.And(crit, Criterios.Like("Nombre", "%" + txtRNombre.Text.Trim() + "%"));
            if (txtRCodigo.Text != null && !txtRCodigo.Text.Trim().Equals(""))
                crit = Criterios.And(crit, Criterios.Like("Codigo", "%" + txtRCodigo.Text.Trim() + "%"));
            if (txtRDescripcion.Text != null && !txtRDescripcion.Text.Trim().Equals(""))
                crit = Criterios.And(crit, Criterios.Like("Descripcion", "%" + txtRDescripcion.Text.Trim() + "%"));

            return crit;
        }

        /// <summary>
        /// Este método arma el criterio de búsqueda para filtrar el 
        /// listado de contactos y a partir de lo ingresado en los campos
        /// respectivos.
        /// </summary>
        /// <returns>
        /// El criterio de búsqueda a aplicarse a los contactos.
        /// </returns>
        public ICriterioConsulta armaCriterioContactos() {
            ICriterioConsulta crit = Criterios.EsNoNulo("Id");

            if (txtCDescripcion.Text != null && !txtCDescripcion.Text.Trim().Equals(""))
                crit = Criterios.And(crit, Criterios.Like("Descripcion", "%" + txtCDescripcion.Text.Trim() + "%"));
            if (txtCCalle.Text != null && !txtCCalle.Text.Trim().Equals(""))
                crit = Criterios.And(crit, Criterios.Like("Calle", "%" + txtCCalle.Text.Trim() + "%"));
            if (txtCEmail.Text != null && !txtCEmail.Text.Trim().Equals(""))
                crit = Criterios.And(crit, Criterios.Like("Email", "%" + txtCEmail.Text.Trim() + "%"));
            if (txtCPuerta.Text != null && !txtCPuerta.Text.Trim().Equals(""))
                crit = Criterios.And(crit, Criterios.Like("Puerta", "%" + txtCPuerta.Text.Trim() + "%"));
            if (txtCIdgis.Text != null && !txtCIdgis.Text.Trim().Equals(""))
                crit = Criterios.And(crit, Criterios.Like("IdGIS", "%" + txtCIdgis.Text.Trim() + "%"));
            if (txtCPisoDepto.Text != null && !txtCPisoDepto.Text.Trim().Equals(""))
                crit = Criterios.And(crit, Criterios.Like("PisoDepto", "%" + txtCPisoDepto.Text.Trim() + "%"));
            if (txtCTelefonos.Text != null && !txtCTelefonos.Text.Trim().Equals(""))
                crit = Criterios.And(
                    crit,
                    Criterios.Or(
                        Criterios.Like("Telefono1", "%" + txtCTelefonos.Text.Trim() + "%"),
                        Criterios.Or(
                            Criterios.Like("Telefono2", "%" + txtCTelefonos.Text.Trim() + "%"),
                            Criterios.Or(
                                Criterios.Like("Celular", "%" + txtCTelefonos.Text.Trim() + "%"),
                                Criterios.Like("Fax", "%" + txtCTelefonos.Text.Trim() + "%")))));

            return crit;
        }

        /// <summary>
        /// Este método arma el criterio de búsqueda para filtrar el 
        /// listado de productos y a partir de lo ingresado en los campos
        /// respectivos.
        /// </summary>
        /// <returns>
        /// El criterio de búsqueda a aplicarse a los productos.
        /// </returns>
        public ICriterioConsulta armaCriterioEstadosControlados() {
            ICriterioConsulta crit = Criterios.EsNoNulo("Id");

            if (txtRNombre.Text != null && !txtRNombre.Text.Trim().Equals(""))
                crit = Criterios.And(crit, Criterios.Like("Nombre", "%" + txtRNombre.Text.Trim() + "%"));
            if (txtRCodigo.Text != null && !txtRCodigo.Text.Trim().Equals(""))
                crit = Criterios.And(crit, Criterios.Like("Codigo", "%" + txtRCodigo.Text.Trim() + "%"));
            if (txtRDescripcion.Text != null && !txtRDescripcion.Text.Trim().Equals(""))
                crit = Criterios.And(
                    crit,
                    Criterios.Like("Descripcion", "%" + txtRDescripcion.Text.Trim() + "%"));

            return crit;
        }
        #endregion

        #region interfase
        /// <summary>
        /// Este evento es llamado al presionar el botón Buscar Personas 
        /// y se encarga de ejecutar el filtro y mostrar los resultados.
        /// </summary>
        /// <param name="sender">
        /// El objeto que realiza la llamda del evento.
        /// </param>
        /// <param name="e">
        /// Los argumentos de la llamada del evento.
        /// </param>
        private void btnBuscar_Click(object sender, EventArgs e) {
            try {
                Cursor = Cursors.WaitCursor;
                Sistema.Controlador.Winppal.setAyuda(Mensaje.TextoMensaje("UPDATE-LISTPANEL"));

                if (_controlListadoPersonas == null)
                    throw new VistaErrorException("UPDATE-LISTPANEL");

                cerrarPaneles();

                // Blanquea el listado de cuentas para no confundir
                CriterioCuentas = Criterios.EsNulo("Id");
                btnFiltrar_Click(sender, e);

                // Luego carga el listado de las personas
                _controlListadoPersonas.Filtros.Clear();
                _controlListadoPersonas.Filtros.Add(armaCriterioPersonas());
                actualizarListadoPersonas();
                _controlListadoPersonas.alActualizarFila();
            } catch (Exception ex) {
                Sistema.Controlador.mostrar("SELECT-CUENTAS-NOK", ENivelMensaje.ERROR, ex.ToString(), true);
            } finally {
                Sistema.Controlador.Winppal.setAyuda(Mensaje.TextoMensaje("AYUDA-LISTO"));
                Cursor = Cursors.Default;
            }
        }

        /// <summary>
        /// Este evento es llamado al presionar el botón Limpiar Personas 
        /// y se encarga de ejecutar el filtro y mostrar los resultados.
        /// </summary>
        /// <param name="sender">
        /// El objeto que realiza la llamda del evento.
        /// </param>
        /// <param name="e">
        /// Los argumentos de la llamada del evento.
        /// </param>
        private void btnLimpiarPersonas_Click(object sender, EventArgs e) {
            txtPNombre.Text = "";
            txtPTrabajo.Text = "";
            txtPProfesion.Text = "";
            txtPDNI.Text = "";
            txtPCUIT.Text = "";
        }

        /// <summary>
        /// Este evento es llamado al presionar el botón Buscar Entidades 
        /// y se encarga de ejecutar el filtro y mostrar los resultados.
        /// </summary>
        /// <param name="sender">
        /// El objeto que realiza la llamda del evento.
        /// </param>
        /// <param name="e">
        /// Los argumentos de la llamada del evento.
        /// </param>
        private void btnBuscarEntidades_Click(object sender, EventArgs e) {
            try {
                Cursor = Cursors.WaitCursor;
                Sistema.Controlador.Winppal.setAyuda(Mensaje.TextoMensaje("UPDATE-LISTPANEL"));

                if (_controlListadoEntidades == null)
                    throw new VistaErrorException("UPDATE-LISTPANEL");

                cerrarPaneles();

                // Blanquea el listado de cuentas para no confundir
                CriterioCuentas = Criterios.EsNulo("Id");
                btnFiltrar_Click(sender, e);

                // Luego carga el listado de las entidades
                _controlListadoEntidades.Filtros.Clear();
                _controlListadoEntidades.Filtros.Add(armaCriterioEntidades());
                actualizarListadoEntidades();
                _controlListadoEntidades.alActualizarFila();
            } catch (Exception ex) {
                Sistema.Controlador.mostrar("SELECT-CUENTAS-NOK", ENivelMensaje.ERROR, ex.ToString(), true);
            } finally {
                Sistema.Controlador.Winppal.setAyuda(Mensaje.TextoMensaje("AYUDA-LISTO"));
                Cursor = Cursors.Default;
            }
        }

        /// <summary>
        /// Este evento es llamado al presionar el botón Limpiar Entidades 
        /// y se encarga de ejecutar el filtro y mostrar los resultados.
        /// </summary>
        /// <param name="sender">
        /// El objeto que realiza la llamda del evento.
        /// </param>
        /// <param name="e">
        /// Los argumentos de la llamada del evento.
        /// </param>
        private void btnLimpiarEntidades_Click(object sender, EventArgs e) {
            txtECodigo.Text = "";
            txtEContacto.Text = "";
            txtECUIT.Text = "";
            txtENombre.Text = "";
            txtETelefono.Text = "";
        }

        /// <summary>
        /// Este evento es llamado al presionar el botón Buscar Productos 
        /// y se encarga de ejecutar el filtro y mostrar los resultados.
        /// </summary>
        /// <param name="sender">
        /// El objeto que realiza la llamda del evento.
        /// </param>
        /// <param name="e">
        /// Los argumentos de la llamada del evento.
        /// </param>
        private void btnBuscarProductos_Click(object sender, EventArgs e) {
            try {
                Cursor = Cursors.WaitCursor;
                Sistema.Controlador.Winppal.setAyuda(Mensaje.TextoMensaje("UPDATE-LISTPANEL"));

                if (_controlListadoProductos == null)
                    throw new VistaErrorException("UPDATE-LISTPANEL");

                cerrarPaneles();

                // Blanquea el listado de cuentas para no confundir
                CriterioCuentas = Criterios.EsNulo("Id");
                btnFiltrar_Click(sender, e);

                // Luego carga el listado de los productos
                _controlListadoProductos.Filtros.Clear();
                _controlListadoProductos.Filtros.Add(armaCriterioProductos());
                actualizarListadoProductos();
                _controlListadoProductos.alActualizarFila();
            } catch (Exception ex) {
                Sistema.Controlador.mostrar("SELECT-CUENTAS-NOK", ENivelMensaje.ERROR, ex.ToString(), true);
            } finally {
                Sistema.Controlador.Winppal.setAyuda(Mensaje.TextoMensaje("AYUDA-LISTO"));
                Cursor = Cursors.Default;
            }
        }

        /// <summary>
        /// Este evento es llamado al presionar el botón Limpiar Productos 
        /// y se encarga de ejecutar el filtro y mostrar los resultados.
        /// </summary>
        /// <param name="sender">
        /// El objeto que realiza la llamda del evento.
        /// </param>
        /// <param name="e">
        /// Los argumentos de la llamada del evento.
        /// </param>
        private void btnLimpiarProductos_Click(object sender, EventArgs e) {
            txtRCodigo.Text = "";
            txtRDescripcion.Text = "";
            txtRNombre.Text = "";
        }

        /// <summary>
        /// Este evento es llamado al presionar el botón Buscar Entidades 
        /// y se encarga de ejecutar el filtro y mostrar los resultados.
        /// </summary>
        /// <param name="sender">
        /// El objeto que realiza la llamda del evento.
        /// </param>
        /// <param name="e">
        /// Los argumentos de la llamada del evento.
        /// </param>
        private void btnBuscarContactos_Click(object sender, EventArgs e) {
            try {
                Cursor = Cursors.WaitCursor;
                Sistema.Controlador.Winppal.setAyuda(Mensaje.TextoMensaje("UPDATE-LISTPANEL"));

                if (_controlListadoContactos == null)
                    throw new VistaErrorException("UPDATE-LISTPANEL");

                cerrarPaneles();

                // Blanquea el listado de cuentas para no confundir
                CriterioCuentas = Criterios.EsNulo("Id");
                btnFiltrar_Click(sender, e);

                // Luego carga el listado de las personas
                _controlListadoContactos.Filtros.Clear();
                _controlListadoContactos.Filtros.Add(armaCriterioContactos());
                actualizarListadoContactos();
                _controlListadoContactos.alActualizarFila();
            } catch (Exception ex) {
                Sistema.Controlador.mostrar("SELECT-CUENTAS-NOK", ENivelMensaje.ERROR, ex.ToString(), true);
            } finally {
                Sistema.Controlador.Winppal.setAyuda(Mensaje.TextoMensaje("AYUDA-LISTO"));
                Cursor = Cursors.Default;
            }
        }

        /// <summary>
        /// Este evento es llamado al presionar el botón Limpiar Entidades 
        /// y se encarga de ejecutar el filtro y mostrar los resultados.
        /// </summary>
        /// <param name="sender">
        /// El objeto que realiza la llamda del evento.
        /// </param>
        /// <param name="e">
        /// Los argumentos de la llamada del evento.
        /// </param>
        private void btnLimpiarContactos_Click(object sender, EventArgs e) {
            txtCCalle.Text = "";
            txtCDescripcion.Text = "";
            txtCEmail.Text = "";
            txtCIdgis.Text = "";
            txtCPisoDepto.Text = "";
            txtCPuerta.Text = "";
            txtCTelefonos.Text = "";
        }

        /// <summary>
        /// Este evento es llamado al presionar el botón Filtrar por Registro 
        /// Seleccionado, y se encarga de ejecutar dicho filtro y mostrar los 
        /// resultados. Tiene en cuenta si se muestran, o no, las cuentas con 
        /// estados controlados (valorbool en true).
        /// </summary>
        /// <param name="sender">
        /// El objeto que realiza la llamda del evento.
        /// </param>
        /// <param name="e">
        /// Los argumentos de la llamada del evento.
        /// </param>
        private void btnFiltrar_Click(object sender, EventArgs e) {
            _controlCuentas.Filtros.Clear();
            _controlCuentas.Filtros.Add(CriterioCuentas);
            if (!chkControlados.Checked) {
                foreach (Parametro parametro in _parsControlados)
                    _controlCuentas.Filtros.Add(Criterios.Distinto("Estado", parametro));
                _controlCuentas.Filtros.Add(Criterios.Igual("Activada", true));
            }

            actualizarCuentas();
        }

        /// <summary>
        /// Este evento es llamado al presionar el botón Filtrar por Código
        /// y se encarga de ejecutar el filtro y mostrar los resultados.
        /// </summary>
        /// <param name="sender">
        /// El objeto que realiza la llamda del evento.
        /// </param>
        /// <param name="e">
        /// Los argumentos de la llamada del evento.
        /// </param>
        private void btnPorCódigo_Click(object sender, EventArgs e) {
            if (string.IsNullOrEmpty(txtPorCodigo.Text))
                Sistema.Controlador.mostrar("ACTION-VIEW-GESTION-NOK", ENivelMensaje.ERROR, null, false);
            else {
                _controlCuentas.Filtros.Clear();
                _controlCuentas.Filtros.Add(Criterios.Igual("Codigo", txtPorCodigo.Text));
                actualizarCuentas();
            }
        }

        /// <summary>
        /// Este evento es llamado al darle Enter al cuadro Filtrar por Código
        /// y se encarga de ejecutar el filtro y mostrar los resultados.
        /// </summary>
        /// <param name="sender">
        /// El objeto que realiza la llamda del evento.
        /// </param>
        /// <param name="e">
        /// Los argumentos de la llamada del evento.
        /// </param>
        private void txtPorCodigo_KeyDown(object sender, KeyEventArgs e) {
            if (e.KeyCode != Keys.Enter)
                return;
            e.SuppressKeyPress = true;
            if (txtPorCodigo.Text.Trim() == "")
                return;
            btnPorCodigo.PerformClick();
        }

        private void txtPCUIT_KeyDown(object sender, KeyEventArgs e) {
            if (e.KeyCode != Keys.Enter)
                return;
            e.SuppressKeyPress = true;
            btnBuscarPersonas.PerformClick();
        }

        private void txtENombre_KeyDown(object sender, KeyEventArgs e) {
            if (e.KeyCode != Keys.Enter)
                return;
            e.SuppressKeyPress = true;
            btnBuscarEntidades.PerformClick();
        }

        private void txtRNombre_KeyDown(object sender, KeyEventArgs e) {
            if (e.KeyCode != Keys.Enter)
                return;
            e.SuppressKeyPress = true;
            btnBuscarProductos.PerformClick();
        }


        private void txtCDescripcion_KeyDown(object sender, KeyEventArgs e) {
            if (e.KeyCode != Keys.Enter)
                return;
            e.SuppressKeyPress = true;
            btnBuscarContactos.PerformClick();
        }

        private void listado_KeyDown(object sender, KeyEventArgs e) {
            if (e.KeyCode != Keys.Enter)
                return;
            e.SuppressKeyPress = true;
            btnFiltrar.PerformClick();
        }

        /// <summary>
        /// Este método responde al click del botón closer de la ventnana
        /// para cerrar la misma ante una presión de ESC.
        /// </summary>
        /// <param name="sender">
        /// El componente que lanza el evento (envía el mensaje).
        /// </param>
        /// <param name="e">
        /// Los argumentos del evento lanzado por el componente.
        /// </param>
        private void btnCloser_Click(object sender, EventArgs e) {
            Close();
        }
        #endregion

        #region IVistaContenedor
        /// <summary>
        /// Implementacion del método de la interface
        /// </summary>
        public void setModoVista() {}

        /// <summary>
        /// Implementacion del método de la interface
        /// </summary>
        public void guardarDatos() {}

        /// <summary>
        /// Implementacion del método de la interface
        /// </summary>
        public void actualizarDatos() {}

        /// <summary>
        /// Este método es el que le dice al contenedor de una vista 
        /// que el usuario a determinado que la misma debe cerrarse.
        /// </summary>
        public void cerrar() {
            Close();
        }
        #endregion
    }
}