///////////////////////////////////////////////////////////
//  WinAbmJob.cs
//  Implementation of the Class WinAbmJob.
//  Generated by Fernando
//  Created on:      13-abr-2009 17:23:41
//  Original author: Fernando
///////////////////////////////////////////////////////////
using System;
using System.Collections;
using System.Data;
using System.Windows.Forms;
using scioBaseLibrary;
using scioBaseLibrary.excepciones;
using scioInterfazLibrary;
using scioLoggingLibrary;
using scioToolLibrary;
using scioToolLibrary.enums;
using sgmpro;
using scioParamLibrary.dominio.repos;
using sgmpro.dominio.configuracion.repos;
using scioPersistentLibrary;
using System.Collections.Generic;

namespace cuCargaMasiva {
    public partial class WinNovedades : Form {
        private double _step, _acum;
        private string _path, _file;
        private readonly string _tipo;
        private readonly Importador _importador = new Importador();

        /// <summary>
        /// Constructor por default
        /// </summary>
        public WinNovedades(string tipo) {
            try {
                _tipo = (tipo ?? "SALDOS");
                InitializeComponent();
            } catch (Exception e) {
                Sistema.Controlador.mostrar("VISTA-NOK", ENivelMensaje.ERROR, e.ToString(), true);
                throw new VistaErrorException("VISTA-NOK", e.ToString());
            }
        }

        #region metodos cargas
        /// <summary>
        /// Este método responde al evento Load de la ventana. Debería 
        /// 'mostrar' cualquier error que pudiese ocurrir y no propagar 
        /// ninguna excepción.
        /// </summary>
        /// <param name="sender">
        /// El componente que lanza el evento (envía el mensaje).
        /// </param>
        /// <param name="e">
        /// Los argumentos del evento lanzado por el componente.
        /// </param>
        private void WinCargaMasiva_Load(object sender, EventArgs e) {
            Cursor = Cursors.WaitCursor;
            Sistema.Controlador.Winppal.setAyuda(Mensaje.TextoMensaje("UPDATE-DATAPANEL"));

            try {
                setearProgreso(false, false);

                //_path = Environment.SpecialFolder.Personal.ToString();
                _path = Environment.GetFolderPath(Environment.SpecialFolder.Personal);
                _file = string.Empty;

                // Setea los valores por default de los controles de entrada
                txtHojaExcel.Text = "Hoja1";
                cmbTipo.SelectedIndex = 0;

                // No muestra la opción de elegir la Entidad 
                // cuando es una carga de gestiones legales
                if (_tipo == "LEGALES" || _tipo == "DESASIGNAR" || _tipo == "PROMOCIONES")
                    grpEntidad.Visible = false;
                if (_tipo == "PROMOCIONES")
                    grpPromo.Visible = true;
            } catch (Exception ex) {
                Sistema.Controlador.mostrar("VISTA-NOK", ENivelMensaje.ERROR, ex.ToString(), true);
                Close();
            } finally {
                Sistema.Controlador.Winppal.setAyuda(Mensaje.TextoMensaje("AYUDA-LISTO"));
                Cursor = Cursors.Default;
            }
        }

        /// <summary>
        /// Carga las cuenta y deudas desde los archivos de datos.
        /// </summary>
        private string cargarSaldos(DataTable cuentas) {
            reiniciarProgreso(cuentas.Rows.Count);

            LogSistema log = new LogSistema(ENivelMensaje.DEBUG);
            log.iniciar(Environment.SpecialFolder.Personal.ToString(), "ImportacionSaldos");
            log.logear("IMPORTACION-CUENTA-INICIO", ENivelMensaje.INFORMACION, _file);
            Sistema.Controlador.logear("IMPORTACION-CUENTA-INICIO", ENivelMensaje.INFORMACION, null);

            long ctdad = 0, procs = 0, errs = 0;
            foreach (DataRow cta in cuentas.Rows) {
                ctdad++;
                try {
                    SgmproImport.ImportarSaldoCarsa(cta);
                    procs++;
                    log.logear(
                        "GENERICO",
                        ENivelMensaje.DEBUG,
                        "Importado OK Saldo[" + cta["Ficha"].ToString().Trim() + "]");
                } catch (Exception e) {
                    errs++;
                    log.logear(
                        "IMPORTACION-ERROR-NOK",
                        ENivelMensaje.ERROR,
                        "CUENTA[" + cta["Ficha"].ToString().Trim() + "]:" + e);
                }
                setearProgreso(true, false);
            }

            GC.Collect();
            setearProgreso(false, true);

            string resultado = string.Format("Procesados: {0}. Completados: {1}. Errores: {2}.", ctdad, procs, errs);
            Sistema.Controlador.logear("IMPORTACION-CUENTA-FINAL", ENivelMensaje.INFORMACION, null);
            log.logear("IMPORTACION-CUENTA-FINAL", ENivelMensaje.INFORMACION, resultado);
            log.terminar();
            return resultado;
        }

        /// <summary>
        /// Carga las cuenta y deudas desde los archivos de datos.
        /// </summary>
        private string cargarSaldosCetro(DataTable cuentas) {
            reiniciarProgreso(cuentas.Rows.Count);

            LogSistema log = new LogSistema(ENivelMensaje.DEBUG);
            log.iniciar(Environment.SpecialFolder.Personal.ToString(), "ImportacionSaldosCetro");
            log.logear("IMPORTACION-CUENTA-INICIO", ENivelMensaje.INFORMACION, _file);
            Sistema.Controlador.logear("IMPORTACION-CUENTA-INICIO", ENivelMensaje.INFORMACION, null);

            long ctdad = 0, procs = 0, errs = 0;
            foreach (DataRow cta in cuentas.Rows) {
                ctdad++;
                try {
                    SgmproImport.ImportarSaldoCetro(cta);
                    procs++;
                    log.logear(
                        "GENERICO",
                        ENivelMensaje.DEBUG,
                        "Importado OK Saldo[" + cta["DNI"].ToString().Trim() + "]");
                } catch (Exception e) {
                    errs++;
                    log.logear(
                        "IMPORTACION-ERROR-NOK",
                        ENivelMensaje.ERROR,
                        "CUENTA[" + cta["DNI"].ToString().Trim() + "]:" + e);
                }
                setearProgreso(true, false);
            }

            GC.Collect();
            setearProgreso(false, true);

            string resultado = string.Format("Procesados: {0}. Completados: {1}. Errores: {2}.", ctdad, procs, errs);
            Sistema.Controlador.logear("IMPORTACION-CUENTA-FINAL", ENivelMensaje.INFORMACION, null);
            log.logear("IMPORTACION-CUENTA-FINAL", ENivelMensaje.INFORMACION, resultado);
            log.terminar();
            return resultado;
        }

        /// <summary>
        /// Carga las cuenta y deudas desde los archivos de datos.
        /// </summary>
        private string cargarSaldosProvencred(DataTable cuentas) {
            reiniciarProgreso(cuentas.Rows.Count);

            LogSistema log = new LogSistema(ENivelMensaje.DEBUG);
            log.iniciar(Environment.SpecialFolder.Personal.ToString(), "ImportacionSaldosProvencred");
            log.logear("IMPORTACION-CUENTA-INICIO", ENivelMensaje.INFORMACION, _file);
            Sistema.Controlador.logear("IMPORTACION-CUENTA-INICIO", ENivelMensaje.INFORMACION, null);

            long ctdad = 0, procs = 0, errs = 0;
            foreach (DataRow cta in cuentas.Rows) {
                ctdad++;
                try {
                    SgmproImport.ImportarSaldoProvencred(cta);
                    procs++;
                    log.logear(
                        "GENERICO",
                        ENivelMensaje.DEBUG,
                        "Importado OK Saldo[" + cta["NroCuenta"].ToString().Trim() + "]");
                } catch (Exception e) {
                    errs++;
                    log.logear(
                        "IMPORTACION-ERROR-NOK",
                        ENivelMensaje.ERROR,
                        "CUENTA[" + cta["NroCuenta"].ToString().Trim() + "]:" + e);
                }
                setearProgreso(true, false);
            }

            GC.Collect();
            setearProgreso(false, true);

            string resultado = string.Format("Procesados: {0}. Completados: {1}. Errores: {2}.", ctdad, procs, errs);
            Sistema.Controlador.logear("IMPORTACION-CUENTA-FINAL", ENivelMensaje.INFORMACION, null);
            log.logear("IMPORTACION-CUENTA-FINAL", ENivelMensaje.INFORMACION, resultado);
            log.terminar();
            return resultado;
        }

        /// <summary>
        /// Carga las cuenta y deudas desde los archivos de datos.
        /// </summary>
        private string cargarSaldosGenerico(DataTable cuentas) {
            reiniciarProgreso(cuentas.Rows.Count);

            LogSistema log = new LogSistema(ENivelMensaje.DEBUG);
            log.iniciar(Environment.SpecialFolder.Personal.ToString(), "ImportacionSaldosGenerica");
            log.logear("IMPORTACION-CUENTA-INICIO", ENivelMensaje.INFORMACION, _file);
            Sistema.Controlador.logear("IMPORTACION-CUENTA-INICIO", ENivelMensaje.INFORMACION, null);

            long ctdad = 0, procs = 0, errs = 0;
            foreach (DataRow cta in cuentas.Rows) {
                ctdad++;
                try {
                    SgmproImport.ImportarSaldoProvencred(cta);
                    procs++;
                    log.logear(
                        "GENERICO",
                        ENivelMensaje.DEBUG,
                        "Importado OK Saldo[" + cta["NroCuenta"].ToString().Trim() + "]");
                } catch (Exception e) {
                    errs++;
                    log.logear(
                        "IMPORTACION-ERROR-NOK",
                        ENivelMensaje.ERROR,
                        "CUENTA[" + cta["NroCuenta"].ToString().Trim() + "]:" + e);
                }
                setearProgreso(true, false);
            }

            GC.Collect();
            setearProgreso(false, true);

            string resultado = string.Format("Procesados: {0}. Completados: {1}. Errores: {2}.", ctdad, procs, errs);
            Sistema.Controlador.logear("IMPORTACION-CUENTA-FINAL", ENivelMensaje.INFORMACION, null);
            log.logear("IMPORTACION-CUENTA-FINAL", ENivelMensaje.INFORMACION, resultado);
            log.terminar();
            return resultado;
        }


        /// <summary>
        /// Carga las cuenta y deudas desde los archivos de datos.
        /// </summary>
        private string cargarSaldosAccicom(DataTable cuentas) {
            reiniciarProgreso(cuentas.Rows.Count);

            LogSistema log = new LogSistema(ENivelMensaje.DEBUG);
            log.iniciar(Environment.SpecialFolder.Personal.ToString(), "ImportacionSaldosAccicom");
            log.logear("IMPORTACION-CUENTA-INICIO", ENivelMensaje.INFORMACION, _file);
            Sistema.Controlador.logear("IMPORTACION-CUENTA-INICIO", ENivelMensaje.INFORMACION, null);

            long ctdad = 0, procs = 0, errs = 0;
            foreach (DataRow cta in cuentas.Rows) {
                ctdad++;
                try {
                    SgmproImport.ImportarSaldoAccicom(cta);//.ImportarSaldoAccicom(cta);
                    procs++;
                    log.logear(
                        "GENERICO",
                        ENivelMensaje.DEBUG,
                        "Importado OK Saldo[" + cta["PRESTAMO"].ToString().Trim() + "]");
                } catch (Exception e) {
                    errs++;
                    log.logear(
                        "IMPORTACION-ERROR-NOK",
                        ENivelMensaje.ERROR,
                        "CUENTA[" + cta["PRESTAMO"].ToString().Trim() + "]:" + e);
                }
                setearProgreso(true, false);
            }

            GC.Collect();
            setearProgreso(false, true);

            string resultado = string.Format("Procesados: {0}. Completados: {1}. Errores: {2}.", ctdad, procs, errs);
            Sistema.Controlador.logear("IMPORTACION-CUENTA-FINAL", ENivelMensaje.INFORMACION, null);
            log.logear("IMPORTACION-CUENTA-FINAL", ENivelMensaje.INFORMACION, resultado);
            log.terminar();
            return resultado;
        }

        /// <summary>
        /// Carga los pagos desde los archivos de datos.
        /// </summary>
        private string cargarPagos(DataTable pagos) {
            reiniciarProgreso(pagos.Rows.Count);

            LogSistema log = new LogSistema(ENivelMensaje.DEBUG);
            log.iniciar(Environment.SpecialFolder.Personal.ToString(), "ImportacionPagos");
            log.logear("IMPORTACION-PAGO-INICIO", ENivelMensaje.INFORMACION, _file);
            Sistema.Controlador.logear("IMPORTACION-PAGO-INICIO", ENivelMensaje.INFORMACION, null);

            long ctdad = 0, procs = 0, errs = 0;
            foreach (DataRow pag in pagos.Rows) {
                ctdad++;
                try {
                    SgmproImport.ImportarNovedadesPagoCarsa(pag);
                    procs++;
                    log.logear(
                        "GENERICO",
                        ENivelMensaje.DEBUG,
                        "Importado OK Pago[" + pag["NroFicha"].ToString().Trim() + "]");
                } catch (Exception e) {
                    errs++;
                    log.logear(
                        "IMPORTACION-ERROR-NOK",
                        ENivelMensaje.ERROR,
                        "CUENTA[" + pag["NroFicha"].ToString().Trim() + "]:" + e);
                }
                setearProgreso(true, false);
            }

            GC.Collect();
            setearProgreso(false, true);

            string resultado = string.Format("Procesados: {0}. Completados: {1}. Errores: {2}.", ctdad, procs, errs);
            Sistema.Controlador.logear("IMPORTACION-PAGO-FINAL", ENivelMensaje.INFORMACION, null);
            log.logear("IMPORTACION-PAGO-FINAL", ENivelMensaje.INFORMACION, resultado);
            log.terminar();
            return resultado;
        }

        /// <summary>
        /// Carga las cuenta y deudas desde los archivos de datos.
        /// </summary>
        private string cargarAsignacion(DataTable cuentas) {
            reiniciarProgreso(cuentas.Rows.Count);

            LogSistema log = new LogSistema(ENivelMensaje.DEBUG);
            log.iniciar(Environment.SpecialFolder.Personal.ToString(), "ImportacionAsignacion");
            log.logear("IMPORTACION-CUENTA-INICIO", ENivelMensaje.INFORMACION, _file);
            Sistema.Controlador.logear("IMPORTACION-CUENTA-INICIO", ENivelMensaje.INFORMACION, null);

            long ctdad = 0, procs = 0, errs = 0;
            foreach (DataRow cta in cuentas.Rows) {
                ctdad++;
                try {
                    SgmproImport.ImportarAsignacionCarsa(cta);
                    procs++;
                    log.logear(
                        "GENERICO",
                        ENivelMensaje.DEBUG,
                        "Importado OK Asignacion[" + cta["Ficha"].ToString().Trim() + "]");
                } catch (Exception e) {
                    errs++;
                    log.logear(
                        "IMPORTACION-ERROR-NOK",
                        ENivelMensaje.ERROR,
                        "CUENTA[" + cta["Ficha"].ToString().Trim() + "]:" + e);
                }
                setearProgreso(true, false);
            }

            GC.Collect();
            setearProgreso(false, true);

            string resultado = string.Format("Procesados: {0}. Completados: {1}. Errores: {2}.", ctdad, procs, errs);
            Sistema.Controlador.logear("IMPORTACION-CUENTA-FINAL", ENivelMensaje.INFORMACION, null);
            log.logear("IMPORTACION-CUENTA-FINAL", ENivelMensaje.INFORMACION, resultado);
            log.terminar();
            return resultado;
        }

        /// <summary>
        /// Carga las cuenta y deudas desde los archivos de datos.
        /// </summary>
        private string cargarAsignacionCetro(DataTable cuentas) {
            reiniciarProgreso(cuentas.Rows.Count);

            LogSistema log = new LogSistema(ENivelMensaje.DEBUG);
            log.iniciar(Environment.SpecialFolder.Personal.ToString(), "ImportacionAsignacionCetro");
            log.logear("IMPORTACION-CUENTA-INICIO", ENivelMensaje.INFORMACION, _file);
            Sistema.Controlador.logear("IMPORTACION-CUENTA-INICIO", ENivelMensaje.INFORMACION, null);

            long ctdad = 0, procs = 0, errs = 0;
            foreach (DataRow cta in cuentas.Rows) {
                ctdad++;
                try {
                    SgmproImport.ImportarAsignacionCetro(cta);
                    procs++;
                    log.logear(
                        "GENERICO",
                        ENivelMensaje.DEBUG,
                        "Importado OK Asignacion[" + cta["DNI"].ToString().Trim() + "]");
                } catch (Exception e) {
                    errs++;
                    log.logear(
                        "IMPORTACION-ERROR-NOK",
                        ENivelMensaje.ERROR,
                        "CUENTA[" + cta["DNI"].ToString().Trim() + "]:" + e);
                }
                setearProgreso(true, false);
            }

            GC.Collect();
            setearProgreso(false, true);

            string resultado = string.Format("Procesados: {0}. Completados: {1}. Errores: {2}.", ctdad, procs, errs);
            Sistema.Controlador.logear("IMPORTACION-CUENTA-FINAL", ENivelMensaje.INFORMACION, null);
            log.logear("IMPORTACION-CUENTA-FINAL", ENivelMensaje.INFORMACION, resultado);
            log.terminar();
            return resultado;
        }

        /// <summary>
        /// Carga las cuenta y deudas desde los archivos de datos.
        /// </summary>
        private string cargarAsignacionFederar(DataTable cuentas) {
            reiniciarProgreso(cuentas.Rows.Count);

            LogSistema log = new LogSistema(ENivelMensaje.DEBUG);
            log.iniciar(Environment.SpecialFolder.Personal.ToString(), "ImportacionAsignacionFederar");
            log.logear("IMPORTACION-CUENTA-INICIO", ENivelMensaje.INFORMACION, _file);
            Sistema.Controlador.logear("IMPORTACION-CUENTA-INICIO", ENivelMensaje.INFORMACION, null);
            string fmtNuevo = "Nro";
            long ctdad = 0, procs = 0, errs = 0;
            foreach (DataRow cta in cuentas.Rows) {
                try { String.IsNullOrEmpty(cta["Nro"].ToString().Trim()); } catch { fmtNuevo = "DNI"; }
                ctdad++;
                try {
                    if (fmtNuevo.Equals("Nro"))
                        SgmproImport.ImportarAsignacionFederar(cta);
                    else 
                        SgmproImport.ImportarAsignacionFederar2(cta);
                    
                    procs++;
                    log.logear(
                        "GENERICO",
                        ENivelMensaje.DEBUG,
                        "Importado OK Asignacion[(531?)" + cta[fmtNuevo].ToString().Trim() + "]");
                } catch (Exception e) {
                    errs++;
                    log.logear(
                        "IMPORTACION-ERROR-NOK",
                        ENivelMensaje.ERROR,
                        "CUENTA[(531?)" + cta[fmtNuevo].ToString().Trim() + "]:" + e);
                }
                setearProgreso(true, false);
            }

            GC.Collect();
            setearProgreso(false, true);

            string resultado = string.Format("Procesados: {0}. Completados: {1}. Errores: {2}.", ctdad, procs, errs);
            Sistema.Controlador.logear("IMPORTACION-CUENTA-FINAL", ENivelMensaje.INFORMACION, null);
            log.logear("IMPORTACION-CUENTA-FINAL", ENivelMensaje.INFORMACION, resultado);
            log.terminar();
            return resultado;
        }

        /// <summary>
        /// Carga las cuenta y deudas desde los archivos de datos.
        /// </summary>
        private string cargarAsignacionProvencred(DataTable cuentas) {
            reiniciarProgreso(cuentas.Rows.Count);

            LogSistema log = new LogSistema(ENivelMensaje.DEBUG);
            log.iniciar(Environment.SpecialFolder.Personal.ToString(), "ImportacionAsignacionProvencred");

            log.logear("IMPORTACION-PROVENCRED-BLANQUEO", ENivelMensaje.INFORMACION, null);
            log.logear("GENERICO", ENivelMensaje.INFORMACION, "Se desasingaron " + blanquearProvencred() + " cuentas.");
            log.logear("IMPORTACION-PROVENCRED-BLANQUEO-FIN", ENivelMensaje.INFORMACION, null);

            log.logear("IMPORTACION-CUENTA-INICIO", ENivelMensaje.INFORMACION, _file);
            Sistema.Controlador.logear("IMPORTACION-CUENTA-INICIO", ENivelMensaje.INFORMACION, null);

            long ctdad = 0, procs = 0, errs = 0;
            foreach (DataRow cta in cuentas.Rows) {
                ctdad++;
                try {
                    SgmproImport.ImportarAsignacionProvencred(cta);
                    procs++;
                    log.logear(
                        "GENERICO",
                        ENivelMensaje.DEBUG,
                        "Importado OK Asignacion[" + cta["NroCuenta"].ToString().Trim() + "]");
                } catch (Exception e) {
                    errs++;
                    log.logear(
                        "IMPORTACION-ERROR-NOK",
                        ENivelMensaje.ERROR,
                        "CUENTA[" + cta["NroCuenta"].ToString().Trim() + "]:" + e);
                }
                setearProgreso(true, false);
            }

            GC.Collect();
            setearProgreso(false, true);

            string resultado = string.Format("Procesados: {0}. Completados: {1}. Errores: {2}.", ctdad, procs, errs);
            Sistema.Controlador.logear("IMPORTACION-CUENTA-FINAL", ENivelMensaje.INFORMACION, null);
            log.logear("IMPORTACION-CUENTA-FINAL", ENivelMensaje.INFORMACION, resultado);
            log.terminar();
            return resultado;
        }

        /// <summary>
        /// Carga las cuenta y deudas desde los archivos de datos.
        /// </summary>
        private string cargarAsignacionAccicom(DataTable cuentas) {
            reiniciarProgreso(cuentas.Rows.Count);

            LogSistema log = new LogSistema(ENivelMensaje.DEBUG);
            log.iniciar(Environment.SpecialFolder.Personal.ToString(), "ImportacionAsignacionAccicom");
            log.logear("IMPORTACION-CUENTA-INICIO", ENivelMensaje.INFORMACION, _file);
            Sistema.Controlador.logear("IMPORTACION-CUENTA-INICIO", ENivelMensaje.INFORMACION, null);

            long ctdad = 0, procs = 0, errs = 0;
            foreach (DataRow cta in cuentas.Rows) {
                ctdad++;
                try {
                    SgmproImport.ImportarAsignacionAccicom(cta);
                    procs++;
                    log.logear(
                        "GENERICO",
                        ENivelMensaje.DEBUG,
                        "Importado OK Asignacion[" + cta["NROCARPETA"].ToString().Trim() + "]");
                } catch (Exception e) {
                    errs++;
                    log.logear(
                        "IMPORTACION-ERROR-NOK",
                        ENivelMensaje.ERROR,
                        "CUENTA[" + cta["NROCARPETA"].ToString().Trim() + "]:" + e);
                }
                setearProgreso(true, false);
            }

            GC.Collect();
            setearProgreso(false, true);

            string resultado = string.Format("Procesados: {0}. Completados: {1}. Errores: {2}.", ctdad, procs, errs);
            Sistema.Controlador.logear("IMPORTACION-CUENTA-FINAL", ENivelMensaje.INFORMACION, null);
            log.logear("IMPORTACION-CUENTA-FINAL", ENivelMensaje.INFORMACION, resultado);
            log.terminar();
            return resultado;
        }

        /// <summary>
        /// Carga las cuenta y deudas desde los archivos de datos.
        /// </summary>
        private string cargarAsignacionCfa(DataTable cuentas) {
            reiniciarProgreso(cuentas.Rows.Count);

            LogSistema log = new LogSistema(ENivelMensaje.DEBUG);
            log.iniciar(Environment.SpecialFolder.Personal.ToString(), "ImportacionAsignacionCFA");
            log.logear("IMPORTACION-CUENTA-INICIO", ENivelMensaje.INFORMACION, _file);
            Sistema.Controlador.logear("IMPORTACION-CUENTA-INICIO", ENivelMensaje.INFORMACION, null);

            long ctdad = 0, procs = 0, errs = 0;
            foreach (DataRow cta in cuentas.Rows) {
                ctdad++;
                try {
                    SgmproImport.ImportarAsignacionCfa(cta);
                    procs++;
                    log.logear("GENERICO",
                        ENivelMensaje.DEBUG,
                        "Importado OK Asignacion[" + cta["NroCredito"].ToString().Trim() + "]");
                } catch (Exception e) {
                    errs++;
                    log.logear("IMPORTACION-ERROR-NOK",
                        ENivelMensaje.ERROR,
                        "CUENTA[" + cta["NroCredito"].ToString().Trim() + "]:" + e);
                }
                setearProgreso(true, false);
            }

            GC.Collect();
            setearProgreso(false, true);

            string resultado = string.Format("Procesados: {0}. Completados: {1}. Errores: {2}.", ctdad, procs, errs);
            Sistema.Controlador.logear("IMPORTACION-CUENTA-FINAL", ENivelMensaje.INFORMACION, null);
            log.logear("IMPORTACION-CUENTA-FINAL", ENivelMensaje.INFORMACION, resultado);
            log.terminar();
            return resultado;
        }

        /// <summary>
        /// Carga las cuenta y deudas desde los archivos de datos.
        /// </summary>
        private string cargarAsignacionGenerica(DataTable cuentas) {
            reiniciarProgreso(cuentas.Rows.Count);

            LogSistema log = new LogSistema(ENivelMensaje.DEBUG);
            log.iniciar(Environment.SpecialFolder.Personal.ToString(), "ImportacionAsignacionGenerica");
            log.logear("IMPORTACION-CUENTA-INICIO", ENivelMensaje.INFORMACION, _file);
            Sistema.Controlador.logear("IMPORTACION-CUENTA-INICIO", ENivelMensaje.INFORMACION, null);

            long ctdad = 0, procs = 0, errs = 0;
            foreach (DataRow cta in cuentas.Rows) {
                ctdad++;
                try {
                    SgmproImport.ImportarAsignacionGenerica(cta);
                    procs++;
                    log.logear(
                        "GENERICO",
                        ENivelMensaje.DEBUG,
                        "Importado OK Asignacion[" + cta["NroCuenta"].ToString().Trim() + "]");
                } catch (Exception e) {
                    errs++;
                    log.logear(
                        "IMPORTACION-ERROR-NOK",
                        ENivelMensaje.ERROR,
                        "CUENTA[" + cta["NroCuenta"].ToString().Trim() + "]:" + e);
                }
                setearProgreso(true, false);
            }

            GC.Collect();
            setearProgreso(false, true);

            string resultado = string.Format("Procesados: {0}. Completados: {1}. Errores: {2}.", ctdad, procs, errs);
            Sistema.Controlador.logear("IMPORTACION-CUENTA-FINAL", ENivelMensaje.INFORMACION, null);
            log.logear("IMPORTACION-CUENTA-FINAL", ENivelMensaje.INFORMACION, resultado);
            log.terminar();
            return resultado;
        }

        /// <summary>
        /// Carga las cuenta y deudas desde los archivos de datos.
        /// </summary>
        private string desasignarCuentas(DataTable cuentas) {
            reiniciarProgreso(cuentas.Rows.Count);

            LogSistema log = new LogSistema(ENivelMensaje.DEBUG);
            log.iniciar(Environment.SpecialFolder.Personal.ToString(), "DeasignacionCuentas");
            log.logear("IMPORTACION-DESASIGNAR-INICIO", ENivelMensaje.INFORMACION, null);
            Sistema.Controlador.logear("IMPORTACION-DESASIGNAR-INICIO", ENivelMensaje.INFORMACION, null);

            long ctdad = 0, procs = 0, errs = 0;
            foreach (DataRow cta in cuentas.Rows) {
                ctdad++;
                try {
                    SgmproImport.ImportarDesasignacion(cta);
                    procs++;
                    log.logear(
                        "GENERICO",
                        ENivelMensaje.DEBUG,
                        "Importado OK Desasignacion[" + cta["Ficha"].ToString().Trim() + "]");
                } catch (Exception e) {
                    errs++;
                    log.logear(
                        "IMPORTACION-ERROR-NOK",
                        ENivelMensaje.ERROR,
                        "CUENTA[" + cta["Ficha"].ToString().Trim() + "]:" + e);
                }
                setearProgreso(true, false);
            }

            GC.Collect();
            setearProgreso(false, true);

            string resultado = string.Format("Procesados: {0}. Completados: {1}. Errores: {2}.", ctdad, procs, errs);
            Sistema.Controlador.logear("IMPORTACION-DESASIGNAR-FINAL", ENivelMensaje.INFORMACION, null);
            log.logear("IMPORTACION-DESASIGNAR-FINAL", ENivelMensaje.INFORMACION, resultado);
            log.terminar();
            return resultado;
        }

        /// <summary>
        /// Carga las gestiones para actualizar las cuentas de legales
        /// </summary>
        private string cargaGestionesLegales(DataTable cuentas) {
            reiniciarProgreso(cuentas.Rows.Count);
            LogSistema log = new LogSistema(ENivelMensaje.DEBUG);
            string rrr = Environment.SpecialFolder.Personal.ToString();
            log.iniciar(Environment.SpecialFolder.Personal.ToString(), "ImportacionLegales");
            log.logear("IMPORTACION-CUENTA-INICIO", ENivelMensaje.INFORMACION, _file);
            Sistema.Controlador.logear("IMPORTACION-CUENTA-INICIO", ENivelMensaje.INFORMACION, null);

            long ctdad = 0, procs = 0, errs = 0;

            // Crea un listarray para cargar toda la informacion de una cuenta.
            ArrayList unaCuenta = new ArrayList();
            // Contador que se resetea cada 6
            int cont = 0;

            foreach (DataRow cta in cuentas.Rows) {
                if (cont == 6) {
                    ctdad++;
                    try {
                        SgmproImport.ImportarGestionesLegales(unaCuenta);
                        procs++;
                        log.logear(
                            "GENERICO",
                            ENivelMensaje.DEBUG,
                            "Importado OK ");
                    } catch (Exception e) {
                        errs++;
                        log.logear(
                            "IMPORTACION-ERROR-NOK",
                            ENivelMensaje.ERROR,
                            //"CUENTA[" + cta["Ficha"].ToString().Trim() + "]:" + e);
                            e.ToString());
                    }
                    setearProgreso(true, false);

                    // resetea el contador
                    cont = 0;
                    // resetea el array para cargar una nueva cuenta
                    unaCuenta.Clear();
                }
                // Carga una linea en el array
                unaCuenta.Add(cta.ItemArray[0].ToString());
                // aumenta el contador de lineas
                cont++;
            }

            GC.Collect();
            setearProgreso(false, true);

            string resultado = string.Format("Procesados: {0}. Completados: {1}. Errores: {2}.", ctdad, procs, errs);
            Sistema.Controlador.logear("IMPORTACION-CUENTA-FINAL", ENivelMensaje.INFORMACION, null);
            log.logear("IMPORTACION-CUENTA-FINAL", ENivelMensaje.INFORMACION, resultado);
            log.terminar();
            return resultado;
        }

        /// <summary>
        /// Carga los pagos desde los archivos de datos.
        /// </summary>
        private string cargarPromoCarsaJubilados(DataTable pagos) {
            reiniciarProgreso(pagos.Rows.Count);

            LogSistema log = new LogSistema(ENivelMensaje.DEBUG);
            log.iniciar(Environment.SpecialFolder.Personal.ToString(), "ImportacionPromoJubilados");
            log.logear("IMPORTACION-PROMO-INICIO", ENivelMensaje.INFORMACION, _file);
            Sistema.Controlador.logear("IMPORTACION-PROMO-INICIO", ENivelMensaje.INFORMACION, null);

            long ctdad = 0, procs = 0, errs = 0;
            foreach (DataRow pag in pagos.Rows) {
                ctdad++;
                try {
                    SgmproImport.ImportarPromoCarsaJubilados(pag);
                    procs++;
                    log.logear("GENERICO", ENivelMensaje.DEBUG, "Importado OK Promo Jubilados[" + pag["Ficha"].ToString().Trim() + "]");
                } catch (Exception e) {
                    errs++;
                    log.logear("IMPORTACION-ERROR-NOK",ENivelMensaje.ERROR, "CUENTA[" + pag["Ficha"].ToString().Trim() + "]:" + e);
                }
                setearProgreso(true, false);
            }

            GC.Collect();
            setearProgreso(false, true);

            string resultado = string.Format("Procesados: {0}. Completados: {1}. Errores: {2}.", ctdad, procs, errs);
            Sistema.Controlador.logear("IMPORTACION-PROMO-FINAL", ENivelMensaje.INFORMACION, null);
            log.logear("IMPORTACION-PROMO-FINAL", ENivelMensaje.INFORMACION, resultado);
            log.terminar();
            return resultado;
        }

        /// <summary>
        /// Carga los pagos desde los archivos de datos.
        /// </summary>
        private string cargarPromoCarsaMega(DataTable pagos) {
            reiniciarProgreso(pagos.Rows.Count);

            LogSistema log = new LogSistema(ENivelMensaje.DEBUG);
            log.iniciar(Environment.SpecialFolder.Personal.ToString(), "ImportacionPromoCobranzaMega");
            log.logear("IMPORTACION-PROMO-INICIO", ENivelMensaje.INFORMACION, _file);
            Sistema.Controlador.logear("IMPORTACION-PROMO-INICIO", ENivelMensaje.INFORMACION, null);

            long ctdad = 0, procs = 0, errs = 0;
            foreach (DataRow pag in pagos.Rows) {
                ctdad++;
                try {
                    SgmproImport.ImportarPromoCarsaMega(pag);
                    procs++;
                    log.logear("GENERICO", ENivelMensaje.DEBUG, "Importado OK Promo Cobranza Mega[" + pag["Ficha"].ToString().Trim() + "]");
                } catch (Exception e) {
                    errs++;
                    log.logear("IMPORTACION-ERROR-NOK", ENivelMensaje.ERROR, "CUENTA[" + pag["Ficha"].ToString().Trim() + "]:" + e);
                }
                setearProgreso(true, false);
            }

            GC.Collect();
            setearProgreso(false, true);

            string resultado = string.Format("Procesados: {0}. Completados: {1}. Errores: {2}.", ctdad, procs, errs);
            Sistema.Controlador.logear("IMPORTACION-PROMO-FINAL", ENivelMensaje.INFORMACION, null);
            log.logear("IMPORTACION-PROMO-FINAL", ENivelMensaje.INFORMACION, resultado);
            log.terminar();
            return resultado;
        }


        /// <summary>
        /// Carga los pagos desde los archivos de datos.
        /// </summary>
        private string cargarPromoCarsaGral(DataTable pagos) {
            reiniciarProgreso(pagos.Rows.Count);

            LogSistema log = new LogSistema(ENivelMensaje.DEBUG);
            log.iniciar(Environment.SpecialFolder.Personal.ToString(), "ImportacionPromoCobranzaGral");
            log.logear("IMPORTACION-PROMO-INICIO", ENivelMensaje.INFORMACION, _file);
            Sistema.Controlador.logear("IMPORTACION-PROMO-INICIO", ENivelMensaje.INFORMACION, null);

            long ctdad = 0, procs = 0, errs = 0;
            foreach (DataRow pag in pagos.Rows) {
                ctdad++;
                try {
                    SgmproImport.ImportarPromoCarsaGral(pag);
                    procs++;
                    log.logear("GENERICO", ENivelMensaje.DEBUG, "Importado OK Promo Cobranza Gral[" + pag["Ficha"].ToString().Trim() + "]");
                } catch (Exception e) {
                    errs++;
                    log.logear("IMPORTACION-ERROR-NOK", ENivelMensaje.ERROR, "CUENTA[" + pag["Ficha"].ToString().Trim() + "]:" + e);
                }
                setearProgreso(true, false);
            }

            GC.Collect();
            setearProgreso(false, true);

            string resultado = string.Format("Procesados: {0}. Completados: {1}. Errores: {2}.", ctdad, procs, errs);
            Sistema.Controlador.logear("IMPORTACION-PROMO-FINAL", ENivelMensaje.INFORMACION, null);
            log.logear("IMPORTACION-PROMO-FINAL", ENivelMensaje.INFORMACION, resultado);
            log.terminar();
            return resultado;
        }
        #endregion

        #region helpers
        /// <summary>
        /// Este método reinicia la barra de progreso.
        /// </summary>
        private void reiniciarProgreso(int maximo) {
            lblProgreso.Visible = true;
            pgbrProgreso.Visible = true;
            lblPorciento.Visible = true;
            pgbrProgreso.Minimum = 0;
            pgbrProgreso.Maximum = 100;
            pgbrProgreso.Step = 1;
            pgbrProgreso.Value = 0;

            _step = Math.Round((double)100/maximo, 3);
            _acum = 0;

            Refresh();
        }

        /// <summary>
        /// Este método establece o desactiva la barra de progreso.
        /// </summary>
        private void setearProgreso(bool activar, bool terminar) {
            if (!activar) {
                lblProgreso.Visible = false;
                lblPorciento.Text = "0%";
                lblPorciento.Visible = false;
                pgbrProgreso.Visible = false;
                return;
            }

            if (!terminar && pgbrProgreso.Value < pgbrProgreso.Maximum) {
                _acum += _step;
                if (_acum >= 1) {
                    pgbrProgreso.PerformStep();
                    _acum = 0;
                    lblPorciento.Text = pgbrProgreso.Value + "%";
                    Refresh();
                }
            } else if (terminar) {
                pgbrProgreso.Value = pgbrProgreso.Maximum;
                lblPorciento.Text = pgbrProgreso.Value + "%";
                Refresh();
            }
        }

        /// <summary>
        /// Este método bloquea o desbloquea todos los controles de la ventana.
        /// </summary>
        /// <param name="bloquear">
        /// Si debe bloquear o desbloquear.
        /// </param>
        private void bloquearTodo(bool bloquear) {
            btnOFD.Enabled = !bloquear;
            txtArchivoOrigen.Enabled = !bloquear;
            btnListo.Enabled = !bloquear;
            txtHojaExcel.Enabled = !bloquear;
            cmbTipo.Enabled = !bloquear;
        }

        /// <summary>
        /// PEDIDO DE NATALIA 10/01/2012 *******************************
        /// Este método desactiva todas las ctas. de provencred para que
        /// solamente se queden, luego de correr una asiganción, activas
        /// las cuentas que efectivamente vinieron en el archivo.
        /// </summary>
        private long blanquearProvencred() {
            List<string> sqls = new List<string>();

            // Primero elimina cualquier gestion asociada no finalizada
            string sql = "delete from gestion" +
                  " where ges_estado    <> '" + Parametros.GetByClave("ESTADOGESTION.FINALIZADA").Id + "'" +
                  "   and ges_resultado is null" +
                  "   and ges_resultadodesc is null" +
                  "   and ges_fechainicio = '" + Fechas.FechaNull + "'" +
                  "   and ges_cuenta in (select cta_id from cuenta where [cta_entidad] = '" + Entidades.GetByCodigo("4").Id + "')";
            sqls.Add(sql);

            // Luego desasigna las cuentas de provencred (y la lista si hay)
            sql = "UPDATE [sgmpro].[dbo].[Cuenta]";
            sql += "  SET [cta_activada] = 0";
            sql += "  ,[cta_listaasignada] = null";
            sql += "  ,[cta_fechaelegible] = convert(datetime, '1753-01-01 00:00:000', 121)";
            sql += "  ,[cta_estado] = '" + (Parametros.GetByClave("ESTADOCUENTA.CTA.-DESASIGNADA-POR-CLIENTE")).Id + "'";
            sql += " WHERE [cta_entidad] = '" + Entidades.GetByCodigo("4").Id + "'";
            // PEDIDO DE NATALIA 22/03/2012 *******************************
            //sql += "   AND NOT ([cta_fechaasignacion] between convert(datetime, '2012-03-22 01:00:000',121) ";
            //sql += "			   and convert(datetime, '2012-03-22 23:00:000',121))";
            // ************************************************************
            sqls.Add(sql);

            return Persistencia.EjecutarSqlDML(sqls, SgmproSistema.Controlador.CadenaConexion);
        }
        #endregion helpers

        #region interfase
        /// <summary>
        /// Este método responde a la presión del botón ejecutar. 
        /// </summary>
        /// <param name="sender">
        /// El componente que lanza el evento (envía el mensaje).
        /// </param>
        /// <param name="e">
        /// Los argumentos del evento lanzado por el componente.
        /// </param>
        private void btnListo_Click(object sender, EventArgs e) {
            string resultado = string.Empty;
            bloquearTodo(true);
            Cursor = Cursors.WaitCursor;
            Sistema.Controlador.Winppal.setAyuda(Mensaje.TextoMensaje("IMPORTACION-AYUDA"));
            Sistema.Controlador.logear("IMPORTACION-INICIO", ENivelMensaje.INFORMACION, _file);

            try {
                if (string.IsNullOrEmpty(_file))
                    return;

                string hoja = (string.IsNullOrEmpty(txtHojaExcel.Text))
                                  ? "Hoja1"
                                  : txtHojaExcel.Text;

                if (cmbTipo.SelectedItem.Equals("Excel")) 
                    if (_tipo.Equals("CUENTAS")) {
                        if (rdbCarsa.Checked)
                            resultado = cargarAsignacion(_importador.getTablaFromXls(_file, hoja));
                        else if (rdbCetrogar.Checked)
                            resultado = cargarAsignacionCetro(_importador.getTablaFromXls(_file, hoja));
                        else if (rdbFederar.Checked)
                            resultado = cargarAsignacionFederar(_importador.getTablaFromXls(_file, hoja));
                        else if (rdbProvencred.Checked)
                            resultado = cargarAsignacionProvencred(_importador.getTablaFromXls(_file, hoja));
                        else if (rdbCfa.Checked)
                            resultado = cargarAsignacionCfa(_importador.getTablaFromXls(_file, hoja));
                        else if (rdbGenerica.Checked)
                            resultado = cargarAsignacionGenerica(_importador.getTablaFromXls(_file, hoja));
                        else if (rdbAccicom.Checked)
                            resultado = cargarAsignacionAccicom(_importador.getTablaFromXls(_file, hoja));
                    } else if (_tipo.Equals("PAGOS")) {
                        if (rdbCarsa.Checked)
                            resultado = cargarPagos(_importador.getTablaFromXls(_file, hoja));
                    } else if (_tipo.Equals("SALDOS")) {
                        if (rdbCarsa.Checked)
                            resultado = cargarSaldos(_importador.getTablaFromXls(_file, hoja));
                        else if (rdbCetrogar.Checked)
                            resultado = cargarSaldosCetro(_importador.getTablaFromXls(_file, hoja));
                        else if (rdbProvencred.Checked)
                            resultado = cargarSaldosProvencred(_importador.getTablaFromXls(_file, hoja));
                        else if (rdbGenerica.Checked)
                            resultado = cargarSaldosGenerico(_importador.getTablaFromXls(_file, hoja));
                        else if (rdbAccicom.Checked)
                            resultado = cargarSaldosAccicom(_importador.getTablaFromXls(_file, hoja));
                    } else if (_tipo.Equals("DESASIGNAR")) {
                        resultado = desasignarCuentas(_importador.getTablaFromXls(_file, hoja));
                    } else if (_tipo.Equals("LEGALES")) {
                        resultado = cargaGestionesLegales(_importador.getTablaFromXls(_file, hoja));
                    } else if (_tipo.Equals("PROMOCIONES")) {
                        if (rdbCarsaPrJub.Checked)
                            resultado = cargarPromoCarsaJubilados(_importador.getTablaFromXls(_file, hoja));
                        else if (rdbCarsaPrMega.Checked)
                            resultado = cargarPromoCarsaMega(_importador.getTablaFromXls(_file, hoja));
                        else if (rdbCarsaPrGral.Checked)
                            resultado = cargarPromoCarsaGral(_importador.getTablaFromXls(_file, hoja));
                    }
            } catch (Exception ex) {
                Sistema.Controlador.mostrar("IMPORTACION-ERROR-NOK", ENivelMensaje.ERROR, ex.ToString(), true);
            } finally {
                bloquearTodo(false);
                Cursor = Cursors.Default;
                Sistema.Controlador.Winppal.setAyuda(Mensaje.TextoMensaje("AYUDA-LISTO"));
                Sistema.Controlador.mostrar("IMPORTACION-FINAL", ENivelMensaje.INFORMACION, resultado, true);
            }
        }

        /// <summary>
        /// Este método responde a la presión del botón de buscar carpeta. 
        /// </summary>
        /// <param name="sender">
        /// El componente que lanza el evento (envía el mensaje).
        /// </param>
        /// <param name="e">
        /// Los argumentos del evento lanzado por el componente.
        /// </param>    
        private void btnOFD_Click(object sender, EventArgs e) {
            OpenFileDialog ofdOrigen = new OpenFileDialog {
                Title = "Seleccione Archivo Origen",
                InitialDirectory = _path,
                Filter = "Archivos Excel (*.xls)|*.xls|Archivos de Texto (*.txt)|*.txt|Todos (*.*)|*.*"
            };

            try {
                _file = string.Empty;

                if (ofdOrigen.ShowDialog() == DialogResult.OK)
                    _file = ofdOrigen.FileName;

                txtArchivoOrigen.Text = _file;
            } catch (Exception ex) {
                Sistema.Controlador.mostrar("IMPORTACION-ERROR-NOK", ENivelMensaje.ERROR, ex.ToString(), true);
            }
        }
        #endregion interfase
    }
}