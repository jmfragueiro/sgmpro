///////////////////////////////////////////////////////////
//  PanelListJobs.cs
//  Implementation of the Class PanelListJobs
//  Generated by Enterprise Architect
//  Created on:      20-abr-2009 16:57:18
//  Original author: Fito
///////////////////////////////////////////////////////////
using System;
using System.Windows.Forms;
using scioBaseLibrary;
using scioBaseLibrary.helpers;
using scioControlLibrary;
using scioControlLibrary.interfaces;
using scioPersistentLibrary.interfases;
using scioToolLibrary;
using scioToolLibrary.enums;
using sgmpro.dominio.scheduler;

namespace cuGenerarJobs {
    public partial class PanelListJobs : PanelListABMV<Job> {
        /// <summary>
        /// Constructor de la clase que primero ejecuta la inicialización
        /// por defecto y pasa el controlador al panel base (para agregar, 
        /// mostrar, editar o borrar).
        /// </summary>
        /// <param name="controlador">
        /// El objeto controlador de la ventana.
        /// </param>
        public PanelListJobs(IControladorListable<Job> controlador) : base(controlador) {}

        #region helpers
        /// <summary>
        /// Metodo que ejecuta un job seleccionado en el listado
        /// El metodo reemplaza la programacion del job y lo ejecuta
        /// inmediatamente.
        /// </summary>
        private void runJob(IEntidadIdentificable job) {
            Cursor = Cursors.WaitCursor;
            Sistema.Controlador.Winppal.setAyuda(Mensaje.TextoMensaje("VISTA-EXE-GENERACION"));

            // Ejecuta el job
            try {
                CUCaller.CallCU("cuGenerarJobs.CURunJob", this, new object[] {job.Id});
                Sistema.Controlador.mostrar("PROCESO-OK", ENivelMensaje.INFORMACION, null, true);
            } catch (Exception e) {
                Sistema.Controlador.mostrar("ERROR-EJECUTAR-GENERACION-LISTA", ENivelMensaje.ERROR, e.ToString(), true);
            } finally {
                Sistema.Controlador.Winppal.setAyuda(Mensaje.TextoMensaje("AYUDA-LISTO"));
                Cursor = Cursors.Default;
            }
        }
        #endregion helpers

        #region interfase
        /// <summary>
        /// Este método responde al botón Run Job. Debería 'mostrar' 
        /// cualquier error que ocurriese y no propagar excepción.
        /// </summary>
        /// <param name="sender">
        /// El componente que lanza el evento (envía el mensaje).
        /// </param>
        /// <param name="e">
        /// Los argumentos del evento lanzado por el componente.
        /// </param>
        private void btnRun_Click(object sender, EventArgs e) {
            if (dgvListado.CurrentRow == null)
                Sistema.Controlador.mostrar("ROW-MUST", ENivelMensaje.ERROR, null, false);

            Job job = getObjetoActual();
            if (!job.Activo)
                Sistema.Controlador.mostrar("JOBRUN-INACTIVO", ENivelMensaje.ERROR, null, false);
            else
                try {
                    runJob(job);
                } catch (Exception ex) {
                    Sistema.Controlador.mostrar("ACTION-EDIT-NOK", ENivelMensaje.ERROR, ex.ToString(), true);
                } finally {
                    postAccion();
                }
        }
        #endregion interfase
    }
}