///////////////////////////////////////////////////////////
//  CUAbmContacto.cs
//  Clase de implementación de CUAbmContacto.
//  Generated by Fito
//  Created on:      08-abr-2009 11:32:54
//  Original author: Fito
///////////////////////////////////////////////////////////
using System.Drawing;
using cuAbmContacto.Properties;
using scioBaseLibrary.excepciones;
using scioControlLibrary;
using scioControlLibrary.enums;
using scioToolLibrary;
using sgmpro.dominio.configuracion;

namespace cuAbmContacto {
    /// <summary>
    /// Esta clase hereda de CUAbmGenerico y se encarga de gestionar la 
    /// ventana WinABMV junto con su panelABMV para la entidad Contacto.
    /// </summary>
    public class CUAbmContacto : CUAbmGenerico<Contacto> {
        #region IControladorEditable Members
        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        public override PanelABMV<Contacto> crearPanelEdicion() {
            return new PanelAbmvContacto(this);
        }

        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        public override void add(params object[] parametros) {
            if (parametros[0] is Persona)
                ObjetoEnEdicion = new Contacto {Persona = (Persona)parametros[0]};
            else
                throw new AppErrorException("ERROR-ADD-WITHOUT-MASTER", "CONTACTO");
        }

        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        public override void save(params object[] parametros) {
            if (ObjetoEnEdicion != null) {
                if (!ObjetoEnEdicion.Persona.Contactos.Contains(ObjetoEnEdicion))
                    ObjetoEnEdicion.Persona.agregarContacto(ObjetoEnEdicion);

                ObjetoEnEdicion.save();
            }
        }

        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        public override void verify(params object[] parametros) {
            if (!string.IsNullOrEmpty(ObjetoEnEdicion.Email)
                && !Validador.ValidarEmail(ObjetoEnEdicion.Email))
                throw new DataErrorException("CAMPO-NOK", Mensaje.TextoValidacion("CONTACTO-EMAIL"));

            if (ObjetoEnEdicion.Persona == null)
                throw new DataErrorException("CAMPO-NOK", Mensaje.TextoValidacion("CONTACTO-PERSONA"));

            if (!ObjetoEnEdicion.Principal
                && ObjetoEnEdicion.Persona.getContactoPrincipal() == null)
                throw new DataErrorException("CAMPO-NOK", Mensaje.TextoValidacion("CONTACTO-PERSONA-SCPPAL"));
        }

        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        public override Icon getIcono() {
            return Resources.Contacto;
        }
        #endregion

        #region IControladorCasoUso members
        /// <summary>
        /// Implementación del método de la interfaz.
        /// Verifica que no se quiera editar un contacto dado por el 
        /// cliente (segun Valorbool del tipo de origen del Contacto).
        /// </summary>
        public override void aceptarParametros(params object[] parametros) {
            base.aceptarParametros(parametros);

            // Si hay un contacto para editar y valorbool de su 
            // Origen es falso entonces el tipo no puede modificarse
            if (ModoVista == EModoVentana.EDIT && !ObjetoEnEdicion.Origen.Valorbool)
                throw new AppErrorException("ERROR-TIPOCONTACTO-NOEDITABLE");
        }
        #endregion
    }
}