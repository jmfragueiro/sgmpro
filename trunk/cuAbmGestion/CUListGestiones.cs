///////////////////////////////////////////////////////////
//  CUListGestiones.cs
//  Clase de implementación de CUListGestiones.
//  Generated by Fito
//  Created on:      08-abr-2009 11:32:54
//  Original author: Fito
///////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Windows.Forms;
using scioBaseLibrary;
using scioBaseLibrary.excepciones;
using scioControlLibrary;
using scioControlLibrary.enums;
using scioParamLibrary.dominio;
using scioParamLibrary.dominio.repos;
using scioPersistentLibrary.acceso;
using scioPersistentLibrary.criterios;
using scioPersistentLibrary.interfases;
using scioPersistentLibrary.orden;
using scioSecureLibrary.dominio;
using scioToolLibrary;
using sgmpro.dominio.configuracion;
using sgmpro.dominio.gestion;
using sgmpro.dominio.gestion.repos;

namespace cuAbmGestion {
    /// <summary>
    ///   Esta clase hereda de CUListGenerico y se encarga de 
    ///   gestionar un PanelListABMV para la entidad Gestion.
    /// </summary>
    public class CUListGestiones : CUPreviewGenerico<Gestion> {
        protected Gestion _gestionActual;
        private string _estado;
        private readonly Parametro _estadofinal = Parametros.GetByClave("ESTADOGESTION.FINALIZADA");
        private readonly Parametro _estadopendiente = Parametros.GetByClave("ESTADOGESTION.PENDIENTE");
        private readonly Usuario _usuario = Sistema.Controlador.SecurityService.getUsuario();

        /// <summary>
        ///   Constructor de la clase que inicializa elementos internos.
        /// </summary>
        public CUListGestiones() {
            ControlEditable = new CUAbmGestion();
            Ordenamiento.Add(Orden.Desc("FechaUMod"));
            ModoListado = EModoListado.RELACIONAL;
        }

        /// <summary>
        ///   Constructor de la clase que acepta la gestion actual bajo
        ///   operación (primero llama al constructor por defecto obvio).
        /// </summary>
        public CUListGestiones(Gestion gestionActual) : this() {
            _gestionActual = gestionActual;
        }

        #region IControladorListable Members
        /// <summary>
        ///   Implementación del método de la interfaz.
        /// </summary>
        protected override PanelListABMV<Gestion> crearPanelListado() {
            return (_gestionActual != null)
                       ? new PanelListGestiones(this, _gestionActual)
                       : new PanelListGestiones(this);
        }

        /// <summary>
        ///   Implementación del método de la interfaz.
        /// </summary>
        protected override PanelPreview<Gestion> crearPanelPreview() {
            return new PanelPreviewGestion(ControlEditable);
        }

        /// <summary>
        ///   Implementación del método de la interfaz.
        /// </summary>
        public override ICriterioConsulta getFiltroMaster() {
            if (ObjetoMaster is Persona)
                return Criterios.Igual("Contactado", ObjetoMaster);

            if (ObjetoMaster is Parametro && ((Parametro)ObjetoMaster).Clave.StartsWith("TIPOGESTION"))
                return Criterios.And(
                    Criterios.And(
                        Criterios.Igual("Tipo", ObjetoMaster),
                        Criterios.And(
                            Criterios.Distinto("Estado", _estadofinal),
                            Criterios.Distinto("Estado", _estadopendiente))),
                    Criterios.Or(
                        Criterios.Igual("Usuario", _usuario),
                        Criterios.EsNulo("Usuario")));

            if (ObjetoMaster is Usuario)
                return Criterios.And(
                    Criterios.Igual(
                        "Estado",
                        (_estado.Equals("FINALIZADA")
                             ? _estadofinal
                             : _estadopendiente)),
                    Criterios.Igual("Usuario", _usuario));

            if (ObjetoMaster is Cuenta)
                return Criterios.Igual("Cuenta", ObjetoMaster);

            return base.getFiltroMaster();
        }

        /// <summary>
        ///   Implementación del método de la interfaz.
        /// </summary>
        public override BindingSource listList(params object[] parametros) {
            try {
                // Agrega el filtro de base que debe utilizarse (para, por 
                // ejemplo, obtener solo el detail adecuado de un master)
                ICriterioConsulta master = getFiltroMaster();
                if (!Filtros.Contains(master))
                    Filtros.Add(master);

                // Ejecuta el filtro y obtiene resultados de la base (se debe sobrepasar en 
                // una subclase de ésta (y usar GetAllbyOrden) si se quieren los "muertos"
                _bs = _bs ?? new BindingSource();

                // Si se trata de un caso especial (cuando se quiere ver la bandeja de entrada
                // para gestiones que no finalizaron), entonces siempre trabaja en modo OBJETO
                if (!string.IsNullOrEmpty(_estado)
                    && !_estado.Equals("FINALIZADA")
                    && ObjetoMaster is Parametro
                    && ((Parametro)ObjetoMaster).Clave.StartsWith("TIPOGESTION"))
                    _bs.DataSource =
                        CollectionHelper.ConvertTo(
                            Gestiones.GetGestionablesByUsuarioTipo(
                                _usuario,
                                (Parametro)ObjetoMaster));
                else
                    _bs.DataSource =
                        (ModoListado == EModoListado.OBJETO)
                            ? CollectionHelper.ConvertTo(
                                RepositorioGenerico<Gestion>.GetByCriteria(
                                    true,
                                    Filtros,
                                    Ordenamiento))
                            : RepositorioGenerico<Gestion>.SelectByCriteria(true, Filtros, Ordenamiento);

                // Obtiene la cantidad de registros para mostrar
                Cuenta = ((DataTable)_bs.DataSource).Rows.Count;

                return _bs;
            } catch (Exception e) {
                throw new VistaErrorException("DATA-LISTNOK", e.ToString());
            }
        }
        #endregion

        #region IControladorCasoUso Members
        /// <summary>
        ///   Implementación del método de la interfase.
        /// </summary>
        public override bool iniciar(Object padre, params object[] valor) {
            try {
                // Crea el panel para asignar el objeto a trabajar
                Padre = padre;

                // Obtiene y acepta los parametros pasados
                aceptarParametros(valor);

                // Establece aspectos propios del listado de gestiones
                if (_estado.Equals("FINALIZADA"))
                    ModoVista = EModoVentana.LIST;
                if (_estado.Equals("FINALIZADA") || _estado.Equals("PENDIENTE"))
                    ObjetoMaster = Sistema.Controlador.SecurityService.getUsuario();
                else if (!_estado.Equals(string.Empty))
                    ObjetoMaster = Parametros.GetByClave("TIPOGESTION." + _estado);

                return true;
            } catch (Exception e) {
                throw new AppErrorException("UCCALLER-NOINIT", e.ToString());
            }
        }

        /// <summary>
        ///   Implementación del método de la interfase
        /// </summary>
        public override void aceptarParametros(params object[] parametros) {
            ModoVista = (parametros.Length > 0)
                            ? (EModoVentana)parametros[0]
                            : EModoVentana.GESTION;

            _estado = (parametros.Length > 1)
                          ? (string)parametros[1]
                          : string.Empty;
        }
        #endregion
    }
}