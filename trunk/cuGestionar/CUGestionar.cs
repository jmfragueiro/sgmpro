///////////////////////////////////////////////////////////
//  CUGestionar.cs
//  Clase de control para el caso de uso de gestion efectiva
//  de una cuenta morosa.
//  Generated by Fito
//  Created on:      08-abr-2009 11:32:54
//  Original author: Fito
///////////////////////////////////////////////////////////
using System;
using System.Windows.Forms;
using NHibernate;
using scioBaseLibrary;
using scioBaseLibrary.excepciones;
using scioBaseLibrary.interfases;
using scioParamLibrary.dominio;
using scioParamLibrary.dominio.repos;
using scioPersistentLibrary;
using scioToolLibrary;
using sgmpro.dominio.configuracion;
using sgmpro.dominio.gestion;

namespace cuGestionar {
    public class CUGestionar : IControladorCasoUso {
        private static readonly Parametro _creada = Parametros.GetByClave("ESTADOGESTION.CREADA");
        private static readonly Parametro _asignada = Parametros.GetByClave("ESTADOGESTION.ASIGNADA");

        /// <summary>
        /// La ventana de gestión de cuentas asociada a la gestión.
        /// </summary>
        private WinGestionCuenta _ventana;
        /// <summary>
        /// La gestion actual, si existe una, que debe utilizarse
        /// al momento de cargar una gestion o actualizarla. Si no
        /// existe entonces debe crearse una.
        /// </summary>
        private Gestion _gestion;
        /// <summary>
        /// La cuenta que actualmente se está gestionando.
        /// </summary>
        public Cuenta CuentaActual { get; set; }
        /// <summary>
        /// Implementación de la propiedad de la interfaz.
        /// </summary>
        public object Padre { get; set; }

        /// <summary>
        /// Este método retorna la gestión actual asociada a la ventana
        /// de gestión o, solo si no hay ninguna, retorna null.
        /// </summary>
        /// <returns>
        /// La gestión asociada a la ventana actual o null. 
        /// </returns>
        public Gestion getGestionActual() {
            return _gestion;
        }

        /// <summary>
        /// Este método retorna una nueva gestión, con los datos mínimos
        /// necesarios, en base a los datos de la cuenta a gestionarse y 
        /// del tipo de gestion indicada en la ventana.
        /// </summary>
        /// <returns>
        /// Una gestión nueva (prácticamente vacía) para la ventana.
        /// </returns>
        public Gestion crearGestionNueva(Parametro tipo) {
            if (tipo == null)
                throw new DataErrorException("ERROR-ADD-WITHOUT-MASTER", null);

            return new Gestion {
                Cuenta = CuentaActual,
                Usuario = Sistema.Controlador.SecurityService.getUsuario(),
                Estado = _asignada,
                Tipo = tipo
            };
        }

        /// <summary>
        /// Este método retorna el titulo para la ventana.
        /// </summary>
        /// <returns>
        /// El título de la ventana.
        /// </returns>
        private static string getTitulo() {
            return Mensaje.TextoMensaje("TITULO-GESTIONAR");
        }

        #region Implementation of IControladorCasoUso
        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        /// <param name="padre">
        /// En éste caso el objeto padre del caso de uso es un Form.
        /// </param>       
        /// <param name="valor">
        /// Aqui se espera que venga: [0](Parametro) el tipo de gestión que se 
        /// espera se ejecute ahora;[1](Cuenta)=la cuenta que debe gestionarse;
        /// [3](Gestión)=la gestion que debe utilizarse actualmente (puede no 
        /// venir en cuyo caso se crea).
        /// </param>
        public bool iniciar(object padre, params object[] valor) {
            try {
                // Crea el panel para asignar el objeto a trabajar
                Padre = padre;

                // Verifica y acepta los parámetros
                aceptarParametros(valor);

                // Si viene una gestion verifica su estado y asignacion
                // y si no viene entonces crea una nueva para gestionar
                if (_gestion != null) {
                    // Esto se hace en modo "SELECT ... FOR UPDATE"
                    Persistencia.Controlador.getSsp().Refresh(_gestion, LockMode.Upgrade);

                    // Controla que no este asignada o lo este al usuario actual
                    if (_gestion.Usuario != null &&
                        !_gestion.Usuario.Equals(Sistema.Controlador.SecurityService.getUsuario()))
                        throw new DataErrorException("ERROR-GESTION-YAASGINADA", _gestion.Usuario.ToString());

                    // ...si solo esta creada la coloca como asignada
                    if (_gestion.Estado.Equals(_creada))
                        _gestion.Estado = _asignada;

                    // ...luego se asigna el usuario que corresponde
                    _gestion.Usuario = Sistema.Controlador.SecurityService.getUsuario();

                    // ...finalmente se graba liberando el registro
                    _gestion.save();
                }

                _ventana = new WinGestionCuenta(this) {
                    StartPosition = FormStartPosition.CenterScreen,
                    Text = string.Format("{0} - {1}", Mensaje.TextoMensaje("TITULO-SHOW"), getTitulo())
                };
                _ventana.ShowDialog();

                return true;
            } catch (Exception e) {
                Persistencia.Controlador.cerrarSsp();
                throw new AppErrorException("UCCALLER-NOINIT", e.ToString());
            }
        }

        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        public void aceptarParametros(params object[] parametros) {
            if (!(parametros[0] is Cuenta))
                throw new DataErrorException("ERROR-ADD-WITHOUT-MASTER", null);
            CuentaActual = (Cuenta)parametros[0];

            // Si viene una gestion verifica su estado y asignacion
            // y si no viene entonces crea una nueva para gestionar
            _gestion = null;
            if (parametros.Length > 1) {
                if (!(parametros[1] is Gestion))
                    throw new DataErrorException("ERROR-DATA-GESTION-TIPO-NOK", null);
                _gestion = (Gestion)parametros[1];
            }
        }
        #endregion
    }
}