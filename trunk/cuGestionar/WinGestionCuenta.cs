///////////////////////////////////////////////////////////
//  WinABMV.cs
//  Clase de ventana genérica para entidades del sistema.
//  Generated by Fito
//  Created on:      08-abr-2009 11:32:54
//  Original author: Fito
///////////////////////////////////////////////////////////
using System;
using System.Windows.Forms;
using cuAbmConvenio;
using cuAbmCuenta;
using cuAbmGestion;
using cuAbmPago;
using scioBaseLibrary;
using scioBaseLibrary.excepciones;
using scioBaseLibrary.helpers;
using scioBaseLibrary.interfases;
using scioControlLibrary.enums;
using scioControlLibrary.interfaces;
using scioParamLibrary.dominio;
using scioParamLibrary.dominio.repos;
using scioPersistentLibrary.criterios;
using scioPersistentLibrary.orden;
using scioSecureLibrary.enums;
using scioSecureLibrary.excepciones;
using scioToolLibrary;
using scioToolLibrary.enums;
using sgmpro.dominio.configuracion;
using sgmpro.dominio.gestion;

namespace cuGestionar {
    /// <summary>
    /// Esta clase implementa una ventana de ABMV generica para mostrar
    /// elementos de entidades que son editables desde el sistema, via
    /// paneles de datos (obtenidos como clase heredada de PanelABMV).
    /// </summary>
    public partial class WinGestionCuenta : Form, IVistaContenedor {
        private Cuenta _cuenta;
        private readonly DateTime _fechaInicioGestion;
        private readonly bool _iniciaConGestion;
        protected Convenio _convenioActivo;
        private readonly CUGestionar _controlador;
        private readonly CUListGestiones _listGestiones;
        private readonly CUListConveniosHisto _listConvenios;
        private readonly CUListCuentas _listCuentasTitular;
        private readonly CUListCuentas _listCuentasGarante;
        private readonly CUListPagos _listPagos;
        private readonly CUListHistDeudas _listHistDeudas;
        private CUListCuotas _listCuotas;
        private readonly CUListEstadosCuenta _listEstados;
        private IVistaPanelList _panelGestiones, _panelConvenios, _panelCTitular, _panelCGarante;
        private IVistaPanelList _panelPagos, _panelHDeudas, _panelCuotas, _panelEstados;

        private static readonly Parametro _tgadmin = Parametros.GetByClave("TIPOGESTION.ADMINISTRATIVA");
        private static readonly Parametro _tgtelef = Parametros.GetByClave("TIPOGESTION.TELEFONICA");
        private static readonly Parametro _tgpostal = Parametros.GetByClave("TIPOGESTION.POSTAL");
        private static readonly Parametro _tgterren = Parametros.GetByClave("TIPOGESTION.TERRENO");
        private static readonly Parametro _tgbackof = Parametros.GetByClave("TIPOGESTION.BACKOFFICE");
        private static readonly Parametro _enproceso = Parametros.GetByClave("ESTADOGESTION.ENPROCESO");
        private static readonly Parametro _asignada = Parametros.GetByClave("ESTADOGESTION.ASIGNADA");
        private static readonly Parametro _creada = Parametros.GetByClave("ESTADOGESTION.CREADA");
        private static readonly Parametro _finalizada = Parametros.GetByClave("ESTADOGESTION.FINALIZADA");

        /// <summary>
        /// Constructor de la clase que asigna el controlador y el objeto
        /// destino de la ventana (para agregar, mostrar, editar o borrar), y
        /// luego inicializa los componentes visuales. Debería lanzar una
        /// VistaErrorException si hay algún problema (y mostrar el mismo).
        /// </summary>
        /// <param name="controlador">
        /// El objeto controlador de la ventana.
        /// </param>
        public WinGestionCuenta(CUGestionar controlador) {
            try {
                Cursor = Cursors.WaitCursor;
                Sistema.Controlador.Winppal.setAyuda(Mensaje.TextoMensaje("UPDATE-DATAPANEL"));

                // Inicializa el tiempo de actividad
                Sistema.Controlador.SecurityService.getSesion().iniciarActividad();

                // Crea e inicializa el controlador
                _controlador = controlador;

                // Establece un flag de si inicia o no con una gestion predeterminada
                _iniciaConGestion = (_controlador.getGestionActual() != null);

                // Establece la fecha de inicio de la gestion como la fecha
                // en que se abre la ventana (para asi asignar a la gestion
                // que se cree o edite desde esta instancia de la ventana)
                _fechaInicioGestion = DateTime.Now; 

                // Establece la ventana de acuerdo a su diseño 
                // original y la actualiza según el panel recibido
                InitializeComponent();

                // Inicializa los tabs de información inferiores
                _listPagos = new CUListPagos {Padre = this};
                _listPagos.ColsInvisibles.Add("Deudas");
                _listPagos.ColsInvisibles.Add("Cuenta");

                _listCuotas = new CUListCuotas {Padre = this};
                _listCuotas.ColsInvisibles.Add("Pagos");
                _listCuotas.ColsInvisibles.Add("Cuenta");
                _listCuotas.ColsInvisibles.Add("Convenio");

                _listHistDeudas = new CUListHistDeudas {Padre = this};
                _listHistDeudas.ColsInvisibles.Add("Pagos");
                _listHistDeudas.ColsInvisibles.Add("Cuenta");
                _listHistDeudas.ColsInvisibles.Add("Convenio");
                _listHistDeudas.Ordenamiento.Add(Orden.Desc("FechaVto"));

                _listGestiones = new CUListGestiones(_controlador.getGestionActual()) {Padre = this};
                _listGestiones.ColsInvisibles.Add("Cuenta");
                _listGestiones.ColsInvisibles.Add("Lista");
                _listGestiones.ColsInvisibles.Add("FechaAnulacion");

                _listConvenios = new CUListConveniosHisto { Padre = this };
                _listConvenios.ColsInvisibles.Add("Cuenta");

                _listEstados = new CUListEstadosCuenta { Padre = this };
                _listEstados.ColsInvisibles.Add("Cuenta");

                _listCuentasTitular = new CUListCuentas {Padre = this};
                _listCuentasTitular.ColsInvisibles.Add("Titular");

                _listCuentasGarante = new CUListCuentas {Padre = this};
                _listCuentasGarante.ColsInvisibles.Add("Garante");

                // Establece los objetos de referencia en la ventana
                establecerDatos();

                // Setea que botones debe mostar y qué no
                establecerBotones();

                // Luego carga toda la información a mostrar
                establecerPaneles();

                // Luego establece los paneles de tabs incialmente
                establecerPanelesTabs();

                // Inicializa y carga los tabs de la ventanta
                cargarTabs();
            } catch (Exception e) {
                Sistema.Controlador.SecurityService.getSesion().iniciarInactividad();
                Sistema.Controlador.mostrar("VISTA-NOK", ENivelMensaje.ERROR, e.ToString(), true);
            } finally {
                Sistema.Controlador.Winppal.setAyuda(Mensaje.TextoMensaje("AYUDA-LISTO"));
                Cursor = Cursors.Default;
            }
        }

        #region winpanel
        /// <summary>
        /// Este método devuelve el controlador asociado a la instancia.
        /// </summary>
        /// <returns>
        /// El controlador asociado a la ventana.
        /// </returns>
        public IControladorCasoUso getControlador() {
            return _controlador;
        }

        /// <summary>
        /// Este método se encarga de verificar que botones se deben
        /// mostrar y cuales no, de acuerdo al tipo de gestion que se
        /// está gestionando actualmente.
        /// </summary>
        private void establecerBotones() {
            if (_iniciaConGestion) {
                btnCargarGestion.Text = "&Gestión Actual";
                btnEditGestion.Visible = true;
                btnGestionPostal.Visible = false;
                btnGestionTelef.Visible = false;
                btnGestionTerreno.Visible = false;
                btnGestionBOffice.Visible = false;
            } else {
                btnCargarGestion.Text = "&Gestión Admin.";
                btnEditGestion.Visible = true;
                btnGestionPostal.Visible = true;
                btnGestionTelef.Visible = true;
                btnGestionTerreno.Visible = true;
                btnGestionBOffice.Visible = true;
            }

            aplicarPermisos(this);
        }

        /// <summary>
        /// Este método se encarga de verificar que botones se deben
        /// mostrar y cuales no, de acuerdo al tipo de gestion que se
        /// está gestionando actualmente.
        /// </summary>
        private void establecerDatos() {
            _listConvenios.ObjetoMaster =
                _listHistDeudas.ObjetoMaster =
                _listGestiones.ObjetoMaster =
                _listPagos.ObjetoMaster =
                _listEstados.ObjetoMaster = 
                _cuenta = _controlador.CuentaActual;

            if (_cuenta != null) {
                _convenioActivo = null;
                if (_cuenta.ConvenioActivo != null)
                    if (_cuenta.ConvenioActivo.convenioDebeCaer() &&
                        Sistema.Controlador.mostrar("PREGUNTA-BAJAR-CONVENIO", ENivelMensaje.PREGUNTA, null, false)
                        == DialogResult.Yes)
                        try {
                            _cuenta.bajarConvenioActivo();
                            _cuenta.save();
                        } catch (Exception e) {
                            Sistema.Controlador.mostrar("ERROR-FATAL", ENivelMensaje.ERROR, e.ToString(), true);
                        }
                    else {
                        _convenioActivo = _cuenta.ConvenioActivo;
                        _listCuotas.ObjetoMaster = _convenioActivo;
                    }

                _listCuentasTitular.ObjetoMaster = _cuenta.Titular;
                _listCuentasGarante.ObjetoMaster = _cuenta.Garante;
            }
        }

        /// <summary>
        /// Este método establece inicialmente todos los paneles
        /// según la Cuenta desde la cual extraer todos los datos
        /// </summary>
        public void establecerPaneles() {
            try {
                // Setea el padre en todos los paneles hijos
                panelCuenta.setVentanaPadre(this);
                panelPersonas.setVentanaPadre(this);

                // Setea los objetos cuenta para los paneles
                panelCuenta.setObjeto(_cuenta);
                panelPersonas.setObjeto(_cuenta);
            } catch (Exception e) {
                Sistema.Controlador.mostrar("VISTA-NOK", ENivelMensaje.ERROR, e.ToString(), true);
                Close();
            }
        }

        /// <summary>
        /// Este método establece inicialmente todos los paneles
        /// de tabs según la Cuenta desde la cual extraer datos
        /// </summary>
        public void establecerPanelesTabs() {
            _panelGestiones = _listGestiones.getPanelListado(EModoVentana.VIEW);
            _panelGestiones.Contenedor = this;
            tabGestiones.Controls.Add((Control)_panelGestiones);
            DataGridView dgv = (DataGridView) _panelGestiones.getControlListado();
            tabGestiones.Controls["PanelListABMV"].Dock = DockStyle.Fill;
            dgv.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.ColumnHeader;
            // ReSharper disable PossibleNullReferenceException
            dgv.Columns["ResultadoDesc"].AutoSizeMode = DataGridViewAutoSizeColumnMode.DisplayedCells;
            // ReSharper restore PossibleNullReferenceException

            _listConvenios.Filtros.Add(Criterios.Distinto("FechaBaja", Fechas.FechaNull));
            _panelConvenios = _listConvenios.getPanelListado(EModoVentana.VIEW);
            _panelConvenios.Contenedor = this;
            tabHistConvenios.Controls.Clear();
            tabHistConvenios.Controls.Add((Control)_panelConvenios);
            tabHistConvenios.Controls["PanelListABMV"].Dock = DockStyle.Fill;

            _panelPagos = _listPagos.getPanelListado(EModoVentana.VIEW);
            _panelPagos.Contenedor = this;
            tabPagos.Controls.Clear();
            tabPagos.Controls.Add((Control)_panelPagos);
            tabPagos.Controls["PanelListABMV"].Dock = DockStyle.Fill;

            _panelHDeudas = _listHistDeudas.getPanelListado(EModoVentana.VIEW);
            _panelHDeudas.Contenedor = this;
            tabHistorial.Controls.Clear();
            tabHistorial.Controls.Add((Control)_panelHDeudas);
            tabHistorial.Controls["PanelListABMV"].Dock = DockStyle.Fill;

            _panelCuotas = _listCuotas.getPanelListado(EModoVentana.VIEW);
            _panelCuotas.Contenedor = this;
            tabCuotas.Controls.Clear();
            tabCuotas.Controls.Add((Control)_panelCuotas);
            tabCuotas.Controls["PanelListABMV"].Dock = DockStyle.Fill;

            _panelEstados = _listEstados.getPanelListado(EModoVentana.VIEW);
            _panelEstados.Contenedor = this;
            tabHistEstados.Controls.Clear();
            tabHistEstados.Controls.Add((Control)_panelEstados);
            tabHistEstados.Controls["PanelListABMV"].Dock = DockStyle.Fill;

            if (_cuenta.Titular != null) {
                _listCuentasTitular.Filtros.Add(Criterios.Distinto("Id", _cuenta.Id));
                _panelCTitular = _listCuentasTitular.getPanelListado(EModoVentana.GESTION);
                _panelCTitular.Contenedor = this;
                tabOCTitular.Controls.Clear();
                tabOCTitular.Controls.Add((Control)_panelCTitular);
                tabOCTitular.Controls["PanelListABMV"].Dock = DockStyle.Fill;
            }

            if (_cuenta.Garante != null) {
                _listCuentasGarante.Filtros.Add(Criterios.Distinto("Id", _cuenta.Id));
                _panelCGarante = _listCuentasGarante.getPanelListado(EModoVentana.GESTION);
                _panelCGarante.Contenedor = this;
                tabOCGarante.Controls.Clear();
                tabOCGarante.Controls.Add((Control)_panelCGarante);
                tabOCGarante.Controls["PanelListABMV"].Dock = DockStyle.Fill;
            }
        }

        /// <summary>
        /// Este método establece inicialmente todos los tabs de listados
        /// según los objetos de referencia desde los que extraer datos
        /// </summary>
        private void cargarTabs() {
            try {
                _panelGestiones.refrescarListado(_listGestiones.ColsInvisibles);
                tabGestiones.Text = string.Format("Gestiones ({0})", _listGestiones.Cuenta);
                tabGestiones.Refresh();

                _panelPagos.refrescarListado((_listPagos.ColsInvisibles));
                tabPagos.Text = string.Format("Pagos ({0})", _listPagos.Cuenta);
                tabPagos.Refresh();

                _panelCuotas.refrescarListado(_listCuotas.ColsInvisibles);
                tabCuotas.Text = (_convenioActivo != null)
                                     ? string.Format("Convenio Activo (saldo ${0})", _convenioActivo.getMontoSaldoTotalActual())
                                     : "Convenio Activo";
                tabCuotas.Refresh();

                _panelHDeudas.refrescarListado(_listHistDeudas.ColsInvisibles);
                tabHistorial.Text = string.Format("Historial Deudas ({0})", _listHistDeudas.Cuenta);
                tabHistorial.Refresh();

                _panelEstados.refrescarListado(_listEstados.ColsInvisibles);
                tabHistEstados.Text = string.Format("Historial Estados ({0})", _listEstados.Cuenta);
                tabHistEstados.Refresh();

                _panelConvenios.refrescarListado(_listConvenios.ColsInvisibles);
                tabHistConvenios.Text = string.Format("Historial Convenios ({0})", _listConvenios.Cuenta);
                tabHistConvenios.Refresh();

                if (_cuenta.Titular != null) {
                    if (_panelCTitular == null) {
                        _listCuentasTitular.ObjetoMaster = _cuenta.Titular;                        
                        _listCuentasTitular.Filtros.Add(Criterios.Distinto("Id", _cuenta.Id));
                        _panelCTitular = _listCuentasTitular.getPanelListado(EModoVentana.GESTION);
                        _panelCTitular.Contenedor = this;
                        tabOCTitular.Controls.Clear();
                        tabOCTitular.Controls.Add((Control) _panelCTitular);
                        tabOCTitular.Controls["PanelListABMV"].Dock = DockStyle.Fill;
                    }
                    _panelCTitular.refrescarListado(_listCuentasTitular.ColsInvisibles);
                    tabOCTitular.Text = string.Format("Otras Cuentas del Titular ({0})", _listCuentasTitular.Cuenta);
                    tabOCTitular.Refresh();
                }

                if (_cuenta.Garante != null) {
                    if (_panelCGarante == null) {
                        _listCuentasGarante.ObjetoMaster = _cuenta.Garante;
                        _listCuentasGarante.Filtros.Add(Criterios.Distinto("Id", _cuenta.Id));
                        _panelCGarante = _listCuentasGarante.getPanelListado(EModoVentana.GESTION);
                        _panelCGarante.Contenedor = this;
                        tabOCGarante.Controls.Clear();
                        tabOCGarante.Controls.Add((Control)_panelCGarante);
                        tabOCGarante.Controls["PanelListABMV"].Dock = DockStyle.Fill;                        
                    }
                    _panelCGarante.refrescarListado(_listCuentasGarante.ColsInvisibles);
                    tabOCGarante.Text = string.Format("Otras Cuentas del Garante ({0})", _listCuentasGarante.Cuenta);
                    tabOCGarante.Refresh();
                }
            } catch (Exception e) {
                throw new DataErrorException("SUBLISTADO-NOK", e.ToString());
            }
        }

        /// <summary>
        /// Este método actualiza todos los datos de la ventana (paneles y tabs)
        /// </summary>
        public void refrescarVentana() {
            try {
                Cursor = Cursors.WaitCursor;
                Sistema.Controlador.Winppal.setAyuda(Mensaje.TextoMensaje("UPDATE-DATAPANEL"));

                _cuenta.refrescar();

                // Actualiza el convenio activo y el tabs de cuotas
                _convenioActivo = _cuenta.ConvenioActivo;
                if (_convenioActivo != null) {
                    _listCuotas.ObjetoMaster = _convenioActivo;
                    _listCuotas.getPanelListado();
                } else {
                    _listCuotas = new CUListCuotas {Padre = this, ObjetoMaster = null};
                    _listCuotas.ColsInvisibles.Add("Pagos");
                    _listCuotas.ColsInvisibles.Add("Cuenta");
                    _listCuotas.ColsInvisibles.Add("Convenio");
                    _panelCuotas = _listCuotas.getPanelListado(EModoVentana.VIEW);
                    _panelCuotas.Contenedor = this;
                    tabCuotas.Controls.Clear();              
                }

                // Actualiza los paneles de datos
                establecerPaneles();

                // Actualiza los botones de la ventana
                establecerBotones();

                // Se recargan todos los tabs
                cargarTabs();
            } catch (Exception e) {
                throw new DataErrorException("SUBLISTADO-NOK", e.ToString());
            } finally {
                Sistema.Controlador.Winppal.setAyuda(Mensaje.TextoMensaje("AYUDA-LISTO"));
                Cursor = Cursors.Default;
            }
        }
        #endregion

        #region helpers
        /// <summary>
        /// Este método inicia la gestión de una gestión (jeje).
        /// </summary>
        /// <param name="gestion">
        /// La gestión a iniciarse.
        /// </param>
        private void iniciarGestion(Gestion gestion) {
            // primero establece la fecha de inicio de la gestion
            // a la fecha en que se abrió la ventana actual (para
            // permitir controlar el tiempo del proceso completo)
            gestion.FechaUMod = gestion.FechaInicio = _fechaInicioGestion;

            // luego inicia la gestion dependiendo del tipo(puede 
            // ser que abra directamente el ABM de gestion, o que 
            // primero obligue a imprimir una carta o formulario)
            if (gestion.Tipo.Equals(_tgadmin) || gestion.Tipo.Equals(_tgtelef) || gestion.Tipo.Equals(_tgbackof))
                CUCaller.CallCU("cuAbmGestion", this, new object[] {EModoVentana.EDIT, gestion});
            else if (gestion.Tipo.Equals(_tgpostal) || gestion.Tipo.Equals(_tgterren))
                if (gestion.Estado.Equals(_creada) || gestion.Estado.Equals(_asignada)) {
                    gestion.Estado = _enproceso;
                    CUCaller.CallCU("cuGenerarInformes.CUGenerarCarta", this, new object[] {EModoVentana.VIEW, gestion});
                } else
                    CUCaller.CallCU("cuAbmGestion", this, new object[] {EModoVentana.EDIT, gestion});
        }

        /// <summary>
        /// Implementación del método de la interfaz.
        /// </summary>
        public void aplicarPermisos(Control contenedor) {
            try {
                foreach (Control ctrl in contenedor.Controls)
                    if (ctrl is ScrollableControl
                        || ctrl is TabControl
                        || ctrl is GroupBox)
                        aplicarPermisos(ctrl);
                    else if (ctrl is Button && ctrl.Tag is string && ctrl.Tag.ToString().StartsWith("BOTON"))
                        if (!Sistema.Controlador.SecurityService
                                 .usuarioActualPoseePermiso((string) ctrl.Tag, ETipoPermiso.EJECUTAR))
                            ctrl.Visible = false;
            } catch (Exception e) {
                throw new SecurityErrorException("PANEL-NOK", e.ToString());
            }
        }

        /// <summary>
        /// Este método verifica que se pueda iniciar una gestion (por 
        /// ejemplo que la cuenta este activa o el usuario pueda hacerlo).
        /// </summary>
        private void verificarInicioGestion() {
            if (!_cuenta.Activada)
                throw new DataErrorException("ERROR-CUENTA-NOGESTIONABLE");
            //if (_cuenta.Gestor != null 
            //    && !_cuenta.Gestor.Equals(Sistema.Controlador.SecurityService.getUsuario()))
            //    throw new DataErrorException("ERROR-NO-USER-GESTOR");
        }
        #endregion helpers

        #region interface
        private void btnCargarGestion_Click(object sender, EventArgs e) {
            try {
                verificarInicioGestion();
                Gestion gestion = _iniciaConGestion
                                      ? _controlador.getGestionActual()
                                      : _controlador.crearGestionNueva(_tgadmin);
                gestion.FechaInicio = _fechaInicioGestion;
                iniciarGestion(gestion);
                refrescarVentana();
            } catch (Exception ex) {
                Sistema.Controlador.mostrar("ACTION-COMPLETE-NOK", ENivelMensaje.ERROR, ex.ToString(), true);
            }
        }

        private void btnEditGestion_Click(object sender, EventArgs e) {
            try {
                verificarInicioGestion();

                Gestion gestion = (((PanelListGestiones) 
                    tabGestiones.Controls["PanelListABMV"]).getObjetoActual());
                if (gestion.Estado.Equals(_finalizada)) {
                    Sistema.Controlador.mostrar("GESTION-FINALIZADA", ENivelMensaje.ERROR, null, false);
                    return;
                }

                gestion.FechaInicio = _fechaInicioGestion;
                iniciarGestion(gestion);
                refrescarVentana();
            } catch (Exception ex) {
                Sistema.Controlador.mostrar("ACTION-COMPLETE-NOK", ENivelMensaje.ERROR, ex.ToString(), true);
            }
        }

        private void btnGestionTelef_Click(object sender, EventArgs e) {
            try {
                verificarInicioGestion();
                iniciarGestion(_controlador.crearGestionNueva(_tgtelef));
                refrescarVentana();
            } catch (Exception ex) {
                Sistema.Controlador.mostrar("ACTION-COMPLETE-NOK", ENivelMensaje.ERROR, ex.ToString(), true);
            }
        }

        private void btnGestionPostal_Click(object sender, EventArgs e) {
            try {
                verificarInicioGestion();
                iniciarGestion(_controlador.crearGestionNueva(_tgpostal));
                refrescarVentana();
            } catch (Exception ex) {
                Sistema.Controlador.mostrar("ACTION-COMPLETE-NOK", ENivelMensaje.ERROR, ex.ToString(), true);
            }
        }

        private void btnGestionTerreno_Click(object sender, EventArgs e) {
            try {
                verificarInicioGestion();
                iniciarGestion(_controlador.crearGestionNueva(_tgterren));
                refrescarVentana();
            } catch (Exception ex) {
                Sistema.Controlador.mostrar("ACTION-COMPLETE-NOK", ENivelMensaje.ERROR, ex.ToString(), true);
            }
        }

        private void btnGestionBOffice_Click(object sender, EventArgs e) {
            try {
                verificarInicioGestion();
                iniciarGestion(_controlador.crearGestionNueva(_tgbackof));
                refrescarVentana();
            } catch (Exception ex) {
                Sistema.Controlador.mostrar("ACTION-COMPLETE-NOK", ENivelMensaje.ERROR, ex.ToString(), true);
            }
        }

        private void btnRegistrarPago_Click(object sender, EventArgs e) {
            try {
                if (_cuenta.Activada) {
                    if (_cuenta.getMontoSaldoTotalActual() <= 0) {
                        Sistema.Controlador.mostrar("ERROR-PAGODEUDA-NOHAY", ENivelMensaje.ERROR, null, false);
                        return;
                    }

                    CUCaller.CallCU("cuAbmPago", this, new object[] {EModoVentana.ADD, new Pago(), _cuenta});
                    refrescarVentana();
                } else
                    Sistema.Controlador.mostrar("ERROR-CUENTA-NOGESTIONABLE", ENivelMensaje.ERROR, null, false);
            } catch (Exception ex) {
                Sistema.Controlador.mostrar("ACTION-COMPLETE-NOK", ENivelMensaje.ERROR, ex.ToString(), true);
            }
        }

        private void btnRegistrarDeuda_Click(object sender, EventArgs e) {
            try {
                if (_cuenta.Activada) {
                    CUCaller.CallCU("cuAbmDeuda", this, new object[] {EModoVentana.ADD, new Deuda(), _cuenta});
                    refrescarVentana();
                } else
                    Sistema.Controlador.mostrar("ERROR-CUENTA-NOGESTIONABLE", ENivelMensaje.ERROR, null, false);
            } catch (Exception ex) {
                Sistema.Controlador.mostrar("ACTION-COMPLETE-NOK", ENivelMensaje.ERROR, ex.ToString(), true);
            }
        }

        private void btnConvenio_Click(object sender, EventArgs e) {
            try {
                if (_cuenta.Activada) {
                    if (_cuenta.getMontoSaldoTotalActual() <= 0) {
                        Sistema.Controlador.mostrar("ERROR-REFINDEUDA-NOHAY", ENivelMensaje.ERROR, null, false);
                        return;
                    }

                    if (_cuenta.ConvenioActivo != null) {
                        Sistema.Controlador.mostrar("ERROR-CONVENIOACTIVO-EXISTS", ENivelMensaje.ERROR, null, false);
                        return;
                    }

                    CUCaller.CallCU("cuAbmConvenio", this, new object[] {EModoVentana.ADD, new Convenio {Cuenta = _cuenta}});
                    refrescarVentana();
                } else
                    Sistema.Controlador.mostrar("ERROR-CUENTA-NOGESTIONABLE", ENivelMensaje.ERROR, null, false);
            } catch (Exception ex) {
                Sistema.Controlador.mostrar("ACTION-COMPLETE-NOK", ENivelMensaje.ERROR, ex.ToString(), true);
            }
        }

        private void WinGestionCuenta_FormClosed(object sender, FormClosedEventArgs e) {
            Sistema.Controlador.SecurityService.getSesion().iniciarInactividad();
        }

        private void btnCloser_Click(object sender, EventArgs e) {
            Close();
        }
        #endregion interface

        #region IVistaContenedor
        /// <summary>
        /// Implementacion del método de la interface
        /// </summary>
        public void setModoVista() {}

        /// <summary>
        /// Implementacion del método de la interface
        /// </summary>
        public void guardarDatos() {}

        /// <summary>
        /// Implementacion del método de la interface
        /// </summary>
        public void actualizarDatos() {}

        /// <summary>
        /// Este método es el que le dice al contenedor de una vista 
        /// que el usuario a determinado que la misma debe cerrarse.
        /// </summary>
        public void cerrar() {
            Close();
        }
        #endregion
    }
}